{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<a href=\"https://www.bigdatauniversity.com\"><img src=\"https://ibm.box.com/shared/static/cw2c7r3o20w9zn8gkecaeyjhgw3xdgbj.png\" width=\"400\" align=\"center\"></a>\n",
    "\n",
    "<h1 align=\"center\"><font size=\"5\">Classification with Python</font></h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "In this notebook we try to practice all the classification algorithms that we learned in this course.\n",
    "\n",
    "We load a dataset using Pandas library, and apply the following algorithms, and find the best one for this specific dataset by accuracy evaluation methods.\n",
    "\n",
    "Lets first load required libraries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.ticker import NullFormatter\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.ticker as ticker\n",
    "from sklearn import preprocessing\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### About dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "This dataset is about past loans. The __Loan_train.csv__ data set includes details of 346 customers whose loan are already paid off or defaulted. It includes following fields:\n",
    "\n",
    "| Field          | Description                                                                           |\n",
    "|----------------|---------------------------------------------------------------------------------------|\n",
    "| Loan_status    | Whether a loan is paid off on in collection                                           |\n",
    "| Principal      | Basic principal loan amount at the                                                    |\n",
    "| Terms          | Origination terms which can be weekly (7 days), biweekly, and monthly payoff schedule |\n",
    "| Effective_date | When the loan got originated and took effects                                         |\n",
    "| Due_date       | Since it’s one-time payoff schedule, each loan has one single due date                |\n",
    "| Age            | Age of applicant                                                                      |\n",
    "| Education      | Education of applicant                                                                |\n",
    "| Gender         | The gender of applicant                                                               |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Lets download the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2020-12-25 15:51:10--  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_train.csv\n",
      "Resolving s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)... 67.228.254.196\n",
      "Connecting to s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)|67.228.254.196|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 23101 (23K) [text/csv]\n",
      "Saving to: ‘loan_train.csv’\n",
      "\n",
      "loan_train.csv      100%[===================>]  22.56K  --.-KB/s    in 0.001s  \n",
      "\n",
      "2020-12-25 15:51:10 (21.4 MB/s) - ‘loan_train.csv’ saved [23101/23101]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget -O loan_train.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_train.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Load Data From CSV File  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>9/22/2016</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>10/8/2016</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>10/8/2016</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Unnamed: 0.1 loan_status  Principal  terms effective_date  \\\n",
       "0           0             0     PAIDOFF       1000     30       9/8/2016   \n",
       "1           2             2     PAIDOFF       1000     30       9/8/2016   \n",
       "2           3             3     PAIDOFF       1000     15       9/8/2016   \n",
       "3           4             4     PAIDOFF       1000     30       9/9/2016   \n",
       "4           6             6     PAIDOFF       1000     30       9/9/2016   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0  10/7/2016   45  High School or Below    male  \n",
       "1  10/7/2016   33              Bechalor  female  \n",
       "2  9/22/2016   27               college    male  \n",
       "3  10/8/2016   28               college  female  \n",
       "4  10/8/2016   29               college    male  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('loan_train.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(346, 10)"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Convert to date time object "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Unnamed: 0.1 loan_status  Principal  terms effective_date  \\\n",
       "0           0             0     PAIDOFF       1000     30     2016-09-08   \n",
       "1           2             2     PAIDOFF       1000     30     2016-09-08   \n",
       "2           3             3     PAIDOFF       1000     15     2016-09-08   \n",
       "3           4             4     PAIDOFF       1000     30     2016-09-09   \n",
       "4           6             6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0 2016-10-07   45  High School or Below    male  \n",
       "1 2016-10-07   33              Bechalor  female  \n",
       "2 2016-09-22   27               college    male  \n",
       "3 2016-10-08   28               college  female  \n",
       "4 2016-10-08   29               college    male  "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['due_date'] = pd.to_datetime(df['due_date'])\n",
    "df['effective_date'] = pd.to_datetime(df['effective_date'])\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Data visualization and pre-processing\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Let’s see how many of each class is in our data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PAIDOFF       260\n",
       "COLLECTION     86\n",
       "Name: loan_status, dtype: int64"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['loan_status'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "260 people have paid off the loan on time while 86 have gone into collection \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets plot some columns to underestand data better:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "\n",
    "bins=np.linspace(df.Principal.min(), df.Principal.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'Principal', bins=bins, ec=\"k\")\n",
    "\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins=np.linspace(df.age.min(), df.age.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'age', bins=bins, ec=\"k\")\n",
    "\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bins = np.linspace(df.age.min(), df.age.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'age', bins=bins, ec=\"k\")\n",
    "\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Pre-processing:  Feature selection/extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Lets look at the day of the week people get the loan "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAagAAADQCAYAAABStPXYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAZsklEQVR4nO3de3hU9b3v8fdHSI0I1BtqJIVExQsIO2p6rEVbxMtDvaHbe9GCx25OrTeOpW61tj27nsdS4fHS7a3WqrRV1FpvpacqUtiKFStiFBGLbk0xFRSwrVJBQb/nj1lJAwQySdZkFjOf1/PMMzNr1vqt7wr58p3fbya/nyICMzOzrNmq2AGYmZm1xQXKzMwyyQXKzMwyyQXKzMwyyQXKzMwyyQXKzMwyyQUqZZJ2kXS3pDckPS/pGUknptT2CEnT02irO0iaLam+2HFY8ZVSXkjqJ+lZSS9IOrSA51lVqLa3FC5QKZIk4CHgyYjYPSIOBE4HqosUT89inNestRLMi8OBVyNi/4h4Ko2YrG0uUOkaCXwcEbc0b4iIP0fEfwJI6iFpsqTnJL0k6X8l20ckvY37Jb0q6a4kqZE0Ktk2B/jX5nYlbSvp9qStFySNTraPk/QrSb8BHu/KxUi6U9LNkmYl73y/nJxzkaQ7W+13s6R5khZK+o9NtHVU8q55fhJf767EZluUkskLSXXA1cDRkhokbbOp321JjZKuSl6bJ+kASY9J+m9J30j26S1pZnLsguZ42zjvt1v9fNrMsZIUEb6ldAMuBK7dzOvjgSuSx1sD84BaYATwd3LvKLcCngEOASqBt4BBgID7gOnJ8VcBZyaPtwMWA9sC44AmYIdNxPAU0NDG7Yg29r0TuCc592jgfWBoEuPzQF2y3w7JfQ9gNjAseT4bqAd2Ap4Etk22/zvwvWL/e/nWPbcSzItxwA3J403+bgONwLnJ42uBl4A+QD/g3WR7T6Bvq7ZeB5Q8X5XcHwXcmlzrVsB04EvF/nftjpuHgApI0o3kEurjiPg8uV+0YZJOTnb5LLkk+xj4Y0Q0Jcc1ADXAKuDNiHgt2f5LcslM0tbxkiYmzyuBAcnjGRHxXlsxRURHx8x/ExEhaQHwTkQsSGJZmMTYAJwqaTy5ZKsCBpNLxmZfSLY9nbwB/gy5/2ysDJVIXjRr73f7keR+AdA7Ij4APpC0RtJ2wD+AqyR9CfgU6A/sAixr1cZRye2F5Hlvcj+fJzsZ8xbDBSpdC4GTmp9ExHmSdiL3jhBy74AuiIjHWh8kaQTwUatNn/DPf5tNTZYo4KSI+NMGbR1E7pe+7YOkp8i9i9vQxIh4oo3tzXF9ukGMnwI9JdUCE4HPR8Rfk6G/yjZinRERZ2wqLitppZgXrc+3ud/tzeYPMIZcj+rAiFgrqZG28+eHEfGTzcRRkvwZVLp+D1RKOrfVtl6tHj8GnCupAkDSXpK23Ux7rwK1kvZInrdOgseAC1qNye+fT4ARcWhE1LVx21wSbk5fcon/d0m7AF9pY5+5wHBJeyax9pK0VyfPZ1ueUs6Lrv5uf5bccN9aSYcBA9vY5zHgf7b6bKu/pJ07cI4tlgtUiiI3YHwC8GVJb0r6IzCV3Lg0wG3AK8B8SS8DP2EzvdiIWENu6OK3yYfBf2718pVABfBS0taVaV9PPiLiRXJDDwuB24Gn29hnOblx+2mSXiKX1Pt0Y5hWRKWcFyn8bt8F1EuaR6439Wob53gcuBt4Jhlqv5+2e3slp/nDODMzs0xxD8rMzDLJBcrMzDLJBcrMzDLJBcrMzDKpWwvUqFGjgtzfL/jmWzncOsV54lsZ3trUrQVqxYoV3Xk6sy2S88Qsx0N8ZmaWSS5QZmaWSS5QZmaWSZ4s1sxK3tq1a2lqamLNmjXFDqWsVVZWUl1dTUVFRV77u0CZWclramqiT58+1NTUkMwja90sIli5ciVNTU3U1tbmdYyH+Mys5K1Zs4Ydd9zRxamIJLHjjjt2qBfrAmVlZWBVFZJSuQ2sqir25VgHuDgVX0f/DTzEZ2VlybJlNO1WnUpb1W83pdKOmbXNPSgzKztp9qTz7U336NGDuro69ttvP0455RQ+/PBDANatW8dOO+3EZZddtt7+I0aMYN683KLDNTU1DB06lKFDhzJ48GCuuOIKPvronwv0Lly4kJEjR7LXXnsxaNAgrrzySpqXUrrzzjvp168fdXV11NXV8bWvfQ2AcePGUVtb27L9xz/+cSo/2zTl1YOS9L+Br5ObkmIBcDa5FTHvBWqARuDUiPhrQaI0M0tRmj1pyK83vc0229DQ0ADAmDFjuOWWW7j44ot5/PHH2Xvvvbnvvvu46qqrNjkMNmvWLHbaaSdWrVrF+PHjGT9+PFOnTmX16tUcf/zx3HzzzRx11FF8+OGHnHTSSdx0002cd955AJx22mnccMMNG7U5efJkTj755C5ceWG124OS1B+4EKiPiP2AHsDpwKXAzIgYBMxMnpuZWTsOPfRQXn/9dQCmTZvGRRddxIABA5g7d267x/bu3ZtbbrmFhx56iPfee4+7776b4cOHc9RRRwHQq1cvbrjhBiZNmlTQa+gO+Q7x9QS2kdSTXM/pbWA0uWWbSe5PSD88M7PSsm7dOn73u98xdOhQVq9ezcyZMzn22GM544wzmDZtWl5t9O3bl9raWl577TUWLlzIgQceuN7re+yxB6tWreL9998H4N57720Zyrvjjjta9vv2t7/dsn3BggXpXWRK2i1QEfEXYAqwBFgK/D0iHgd2iYilyT5LgZ3bOl7SeEnzJM1bvnx5epGblRDnSelbvXo1dXV11NfXM2DAAM455xymT5/OYYcdRq9evTjppJN48MEH+eSTT/Jqr/kzpojY5LBg8/bTTjuNhoYGGhoaOPvss1tenzx5csv2oUOHdvEK09fuZ1CStifXW6oF/gb8StKZ+Z4gIm4FbgWor6/f5LTqZuXMeVL6Wn8G1WzatGk8/fTT1NTUALBy5UpmzZrFEUccsdm2PvjgAxobG9lrr70YMmQITz755Hqvv/HGG/Tu3Zs+ffqkeg3dLZ8hviOANyNieUSsBR4Avgi8I6kKILl/t3BhmpmVlvfff585c+awZMkSGhsbaWxs5MYbb2x3mG/VqlV885vf5IQTTmD77bdnzJgxzJkzhyeeeALI9dQuvPBCLrnkku64jILK51t8S4AvSOoFrAYOB+YB/wDGApOS+4cLFaSZWZoG7Lprqn/HNmDXXTt8zAMPPMDIkSPZeuutW7aNHj2aSy65ZL2vkDc77LDDiAg+/fRTTjzxRL773e8CuZ7Zww8/zAUXXMB5553HJ598wllnncX555/f+QvKCDWPY252J+k/gNOAdcAL5L5y3hu4DxhAroidEhHvba6d+vr6aP5ev1kxSEr1D3XbyZ9OTV3gPEnfokWL2HfffYsdhrHJf4s2cyWvv4OKiO8D399g80fkelNmZmap80wSZmaWSS5QZmaWSS5QZmaWSS5QZmaWSS5QZmaWSS5QZlZ2dqsekOpyG7tVD2j3nMuWLeP0009njz32YPDgwRx99NEsXry43aUy2vp7ppqaGlasWLHetg2X1airq+OVV14BYPHixRx99NHsueee7Lvvvpx66qnrzc/Xu3dv9t5775blOGbPns2xxx7b0vZDDz3EsGHD2GeffRg6dCgPPfRQy2vjxo2jf//+LX+7tWLFipaZMbrKCxaaWdlZ+pe3OOh7j6bW3rM/GLXZ1yOCE088kbFjx3LPPfcA0NDQwDvvvMO4ceM2u1RGR7S1rMaaNWs45phjuOaaazjuuOOA3NId/fr1a5l6acSIEUyZMoX6+noAZs+e3XL8iy++yMSJE5kxYwa1tbW8+eabHHnkkey+++4MGzYMyK11dfvtt3Puued2OObNcQ/KzKzAZs2aRUVFBd/4xjdattXV1bF48eKCL5Vx9913c/DBB7cUJ8jNSrHffvvldfyUKVO4/PLLqa2tBaC2tpbLLruMyZMnt+wzYcIErr32WtatW5da3OACZWZWcC+//PJGS2IAeS2V0RGth+3q6upYvXr1Js+dr7ZirK+vZ+HChS3PBwwYwCGHHMIvfvGLTp+nLR7iMzMrknyWyuiITa2c2xVtxdjWtssvv5zjjz+eY445JrVzuwdlZlZgQ4YM4fnnn29z+4bzLqa9VMamzt2R4zeMcf78+QwePHi9bXvuuSd1dXXcd999nT7XhlygzMwKbOTIkXz00Uf89Kc/bdn23HPPMWjQoIIvlfHVr36VP/zhD/z2t79t2fboo4/mvYLuxIkT+eEPf0hjYyMAjY2NXHXVVXzrW9/aaN/vfOc7TJkyJZW4wUN8ZlaGqvp/rt1v3nW0vc2RxIMPPsiECROYNGkSlZWV1NTUcN1117W7VMadd9653te6586dC8CwYcPYaqtcH+PUU09l2LBh3HvvvcyZM6dl35tuuokvfvGLTJ8+nQkTJjBhwgQqKioYNmwY119/fV7XVldXx49+9COOO+441q5dS0VFBVdffTV1dXUb7TtkyBAOOOAA5s+fn1fb7clruY20eBkBKzYvt1GevNxGdnRkuQ0P8ZmZWSZlrkANrKpK7a+7B1ZVFftyzMyskzL3GdSSZctSHYIxM4PNf6XbukdHP1LKXA/KzCxtlZWVrFy5ssP/QVp6IoKVK1dSWVmZ9zGZ60GZmaWturqapqYmli9fXuxQylplZSXV1fmPkLlAmVnJq6ioaJlLzrYcHuIzM7NMcoEyM7NMcoEyM7NMcoEyM7NMcoEyM7NMyqtASdpO0v2SXpW0SNLBknaQNEPSa8n99oUO1szMyke+PajrgUcjYh/gX4BFwKXAzIgYBMxMnpuZmaWi3QIlqS/wJeBnABHxcUT8DRgNTE12mwqcUKggzcys/OTTg9odWA7cIekFSbdJ2hbYJSKWAiT3O7d1sKTxkuZJmue/4jZrm/PEbGP5FKiewAHAzRGxP/APOjCcFxG3RkR9RNT369evk2GalTbnidnG8ilQTUBTRDybPL+fXMF6R1IVQHL/bmFCNDOzctRugYqIZcBbkvZONh0OvAI8AoxNto0FHi5IhGZmVpbynSz2AuAuSZ8B3gDOJlfc7pN0DrAEOKUwIZqlRz0qUlsnTD0qUmnHzNqWV4GKiAagvo2XDk83HLPCik/WctD3Hk2lrWd/MCqVdsysbZ5JwszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMskFyszMMinvAiWph6QXJE1Pnu8gaYak15L77QsXppmZlZuO9KAuAha1en4pMDMiBgEzk+dmZmapyKtASaoGjgFua7V5NDA1eTwVOCHd0MzMrJzl24O6DrgE+LTVtl0iYilAcr9zWwdKGi9pnqR5y5cv71KwZqXKeWK2sXYLlKRjgXcj4vnOnCAibo2I+oio79evX2eaMCt5zhOzjfXMY5/hwPGSjgYqgb6Sfgm8I6kqIpZKqgLeLWSgZmZWXtrtQUXEZRFRHRE1wOnA7yPiTOARYGyy21jg4YJFaWZmZacrfwc1CThS0mvAkclzMzOzVOQzxNciImYDs5PHK4HD0w/JzMzMM0mYmVlGuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUCZmVkmuUAVwcCqKiSlchtYVVXsyzEzK4gOrQdl6ViybBlNu1Wn0lb1202ptGNmljXuQZmZWSa5QJmZWSa5QJmZWSa5QJmZWSa5QJmZWSa5QJmZWSa5QJmZWSa5QJmZWSa5QJmZWSa1W6AkfU7SLEmLJC2UdFGyfQdJMyS9ltxvX/hwzcysXOTTg1oHfCsi9gW+AJwnaTBwKTAzIgYBM5PnZmZmqWi3QEXE0oiYnzz+AFgE9AdGA1OT3aYCJxQqSDMzKz8d+gxKUg2wP/AssEtELIVcEQN23sQx4yXNkzRv+fLlXYvWrEQ5T8w2lneBktQb+DUwISLez/e4iLg1Iuojor5fv36didGs5DlPzDaWV4GSVEGuON0VEQ8km9+RVJW8XgW8W5gQzcysHOXzLT4BPwMWRcQ1rV56BBibPB4LPJx+eGZmVq7yWbBwOHAWsEBSQ7LtcmAScJ+kc4AlwCmFCdHMzMpRuwUqIuYA2sTLh6cbjpmZFdvAqiqWLFuWSlsDdt2VPy9d2qljveS7mZmtZ8myZTTtVp1KW9VvN3X6WE91ZJk3sKoKSancSkWaP5OBVVXFvhyzNrkHZZmXlXdzWeKfiZUD96DMzCyTSroHtTWkNqzTlQ/6rGvUo8Lv8s3KUEkXqI/AwyAlID5Zy0HfezSVtp79wahU2jGzwvMQn5mZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZZILlJmZZVJJT3VkZmYdl+b8l+pR0eljXaDMzGw9WZn/0kN8ZmWuedZ/L35oWeMelFmZ86z/llXuQZmZWSa5QFlB7FY9ILVhIzMrTx7is4JY+pe3MvEhq5ltuTJXoLLy9UYzK66BVVUsWbYslbYG7Lorf166NJW2rPtkrkBl5euNW4rmb2ClwUlsWbJk2TJ/eaPMdalASRoFXA/0AG6LiEmpRGV58zewzKxUdfpLEpJ6ADcCXwEGA2dIGpxWYGZmacnq33oNrKpKLa5ePXqW3BeTutKD+h/A6xHxBoCke4DRwCtpBGZmlpasjjSkPYyZxWvsCkVE5w6UTgZGRcTXk+dnAQdFxPkb7DceGJ883Rv4UztN7wSs6FRQWw5fY2lo7xpXREReH4Q6T9rkaywN+Vxjm7nSlR5UW/3AjapdRNwK3Jp3o9K8iKjvQlyZ52ssDWleo/NkY77G0tCVa+zKH+o2AZ9r9bwaeLsL7ZmZmbXoSoF6DhgkqVbSZ4DTgUfSCcvMzMpdp4f4ImKdpPOBx8h9zfz2iFiYQkx5D3NswXyNpaGY1+ifb2nwNW5Gp78kYWZmVkieLNbMzDLJBcrMzDIpMwVK0ihJf5L0uqRLix1P2iR9TtIsSYskLZR0UbFjKhRJPSS9IGl6sWMpBEnbSbpf0qvJv+fB3Xjuks4TKJ9cKfU8ga7nSiY+g0qmTVoMHEnu6+vPAWdERMnMSiGpCqiKiPmS+gDPAyeU0jU2k3QxUA/0jYhjix1P2iRNBZ6KiNuSb7D2ioi/dcN5Sz5PoHxypdTzBLqeK1npQbVMmxQRHwPN0yaVjIhYGhHzk8cfAIuA/sWNKn2SqoFjgNuKHUshSOoLfAn4GUBEfNwdxSlR8nkC5ZErpZ4nkE6uZKVA9QfeavW8iRL7hWxNUg2wP/BscSMpiOuAS4BPix1IgewOLAfuSIZnbpO0bTedu6zyBEo6V0o9TyCFXMlKgcpr2qRSIKk38GtgQkS8X+x40iTpWODdiHi+2LEUUE/gAODmiNgf+AfQXZ8FlU2eQOnmSpnkCaSQK1kpUGUxbZKkCnIJd1dEPFDseApgOHC8pEZyw08jJf2yuCGlrgloiojmd/T3k0vC7jp3yecJlHyulEOeQAq5kpUCVfLTJim3yMrPgEURcU2x4ymEiLgsIqojoobcv+HvI+LMIoeVqohYBrwlae9k0+F03xIzJZ8nUPq5Ug55AunkSiaWfC/gtElZMhw4C1ggqSHZdnlE/L8ixmSdcwFwV1Ik3gDO7o6TlkmegHOllHQpVzLxNXMzM7MNZWWIz8zMbD0uUGZmlkkuUGZmlkkuUGZmlkkuUGZmlkkuUBki6f9Imphie/tIakimGdkjrXZbtd8oaae02zXbHOdJ+XCBKm0nAA9HxP4R8d/FDsYso5wnGeUCVWSSvpOs7/MEsHey7d8kPSfpRUm/ltRLUh9JbyZTwCCpb/LOrEJSnaS5kl6S9KCk7SUdDUwAvp6srXOTpOOTYx+UdHvy+BxJ/zd5fKakPybvJn+SLO+ApKMkPSNpvqRfJXOktb6GbSQ9Kunfuu0HZ2XFeVKeXKCKSNKB5KY62R/4V+DzyUsPRMTnI+JfyC01cE6y7MBsclP0kxz364hYC/wc+PeIGAYsAL6f/NX9LcC1EXEY8CRwaHJsf2Bw8vgQ4ClJ+wKnAcMjog74BBiTDE1cARwREQcA84CLW11Gb+A3wN0R8dOUfjRmLZwn5csFqrgOBR6MiA+T2Zqb51XbT9JTkhYAY4Ahyfbb+OdUIWeTm8b+s8B2EfFfyfap5NZg2dBTwKGSBpObD+sd5RaGOxj4A7l5sg4Enkumlzmc3HT5XyCXpE8n28cCA1u1+zBwR0T8vCs/CLPNcJ6UqUzMxVfm2ppr6k5yK4i+KGkcMAIgIp6WVCPpy0CPiHg5Sbz2TxLxF0nbA6PIvUvcATgVWBURH0gSMDUiLmt9nKTjgBkRccYmmn4a+Iqku8PzZlnhOE/KkHtQxfUkcGIyNt0HOC7Z3gdYmoyjj9ngmJ8D04A7ACLi78BfJTUPS5wF/Bdte4bcePuT5N4pTkzuAWYCJ0vaGUDSDpIGAnOB4ZL2TLb3krRXqza/B6wEburoxZvlyXlSplygiihZ1vpeoIHc2jfNSfBdciuIzgBe3eCwu4DtySVfs7HAZEkvAXXADzZxyqeAnhHxOjCf3LvDp5JYXiE3hv540s4MoCoilgPjgGnJ9rnAPhu0OwGolHR13hdvlifnSfnybOZbGEknA6Mj4qxix2KWVc6T0uDPoLYgkv4T+ApwdLFjMcsq50npcA/KzMwyyZ9BmZlZJrlAmZlZJrlAmZlZJrlAmZlZJrlAmZlZJv1/wof9+c/Zg1kAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['dayofweek'] = df['effective_date'].dt.dayofweek\n",
    "bins=np.linspace(df.dayofweek.min(), df.dayofweek.max(), 10)\n",
    "g = sns.FacetGrid(df, col=\"Gender\", hue=\"loan_status\", palette=\"Set1\", col_wrap=2)\n",
    "g.map(plt.hist, 'dayofweek', bins=bins, ec=\"k\")\n",
    "g.axes[-1].legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "We see that people who get the loan at the end of the week dont pay it off, so lets use Feature binarization to set a threshold values less then day 4 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>weekend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>male</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>female</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Unnamed: 0.1 loan_status  Principal  terms effective_date  \\\n",
       "0           0             0     PAIDOFF       1000     30     2016-09-08   \n",
       "1           2             2     PAIDOFF       1000     30     2016-09-08   \n",
       "2           3             3     PAIDOFF       1000     15     2016-09-08   \n",
       "3           4             4     PAIDOFF       1000     30     2016-09-09   \n",
       "4           6             6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  dayofweek  weekend  \n",
       "0 2016-10-07   45  High School or Below    male          3        0  \n",
       "1 2016-10-07   33              Bechalor  female          3        0  \n",
       "2 2016-09-22   27               college    male          3        0  \n",
       "3 2016-10-08   28               college  female          4        1  \n",
       "4 2016-10-08   29               college    male          4        1  "
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['weekend']= df['dayofweek'].apply(lambda x: 1 if (x>3)  else 0)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## Convert Categorical features to numerical values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Lets look at gender:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Gender  loan_status\n",
       "female  PAIDOFF        0.865385\n",
       "        COLLECTION     0.134615\n",
       "male    PAIDOFF        0.731293\n",
       "        COLLECTION     0.268707\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['Gender'])['loan_status'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "86 % of female pay there loans while only 73 % of males pay there loan\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Lets convert male to 0 and female to 1:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>weekend</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>45</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-10-07</td>\n",
       "      <td>33</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>2016-09-08</td>\n",
       "      <td>2016-09-22</td>\n",
       "      <td>27</td>\n",
       "      <td>college</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>28</td>\n",
       "      <td>college</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>2016-09-09</td>\n",
       "      <td>2016-10-08</td>\n",
       "      <td>29</td>\n",
       "      <td>college</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Unnamed: 0.1 loan_status  Principal  terms effective_date  \\\n",
       "0           0             0     PAIDOFF       1000     30     2016-09-08   \n",
       "1           2             2     PAIDOFF       1000     30     2016-09-08   \n",
       "2           3             3     PAIDOFF       1000     15     2016-09-08   \n",
       "3           4             4     PAIDOFF       1000     30     2016-09-09   \n",
       "4           6             6     PAIDOFF       1000     30     2016-09-09   \n",
       "\n",
       "    due_date  age             education  Gender  dayofweek  weekend  \n",
       "0 2016-10-07   45  High School or Below       0          3        0  \n",
       "1 2016-10-07   33              Bechalor       1          3        0  \n",
       "2 2016-09-22   27               college       0          3        0  \n",
       "3 2016-10-08   28               college       1          4        1  \n",
       "4 2016-10-08   29               college       0          4        1  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Gender'].replace(to_replace=['male','female'], value=[0,1],inplace=True)\n",
    "df.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## One Hot Encoding  \n",
    "#### How about education?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "education             loan_status\n",
       "Bechalor              PAIDOFF        0.750000\n",
       "                      COLLECTION     0.250000\n",
       "High School or Below  PAIDOFF        0.741722\n",
       "                      COLLECTION     0.258278\n",
       "Master or Above       COLLECTION     0.500000\n",
       "                      PAIDOFF        0.500000\n",
       "college               PAIDOFF        0.765101\n",
       "                      COLLECTION     0.234899\n",
       "Name: loan_status, dtype: float64"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.groupby(['education'])['loan_status'].value_counts(normalize=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Feature befor One Hot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>education</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>High School or Below</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>Bechalor</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>college</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender             education\n",
       "0       1000     30   45       0  High School or Below\n",
       "1       1000     30   33       1              Bechalor\n",
       "2       1000     15   27       0               college\n",
       "3       1000     30   28       1               college\n",
       "4       1000     30   29       0               college"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df[['Principal','terms','age','Gender','education']].head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "#### Use one hot encoding technique to conver categorical varables to binary variables and append them to the feature Data Frame "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>weekend</th>\n",
       "      <th>Bechalor</th>\n",
       "      <th>High School or Below</th>\n",
       "      <th>Master or Above</th>\n",
       "      <th>college</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender  weekend  Bechalor  High School or Below  \\\n",
       "0       1000     30   45       0        0         0                     1   \n",
       "1       1000     30   33       1        0         1                     0   \n",
       "2       1000     15   27       0        0         0                     0   \n",
       "3       1000     30   28       1        1         0                     0   \n",
       "4       1000     30   29       0        1         0                     0   \n",
       "\n",
       "   Master or Above  college  \n",
       "0                0        0  \n",
       "1                0        0  \n",
       "2                0        1  \n",
       "3                0        1  \n",
       "4                0        1  "
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Feature=df[['Principal','terms','age','Gender','weekend']]\n",
    "Feature=pd.concat([Feature,pd.get_dummies(df['education'])], axis=1)\n",
    "#Feature.drop(['Master or Above'], axis = 1,inplace=True)\n",
    "Feature.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Feature selection"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Lets defind feature sets, X:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>age</th>\n",
       "      <th>Gender</th>\n",
       "      <th>weekend</th>\n",
       "      <th>Bechalor</th>\n",
       "      <th>High School or Below</th>\n",
       "      <th>Master or Above</th>\n",
       "      <th>college</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>15</td>\n",
       "      <td>27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Principal  terms  age  Gender  weekend  Bechalor  High School or Below  \\\n",
       "0       1000     30   45       0        0         0                     1   \n",
       "1       1000     30   33       1        0         1                     0   \n",
       "2       1000     15   27       0        0         0                     0   \n",
       "3       1000     30   28       1        1         0                     0   \n",
       "4       1000     30   29       0        1         0                     0   \n",
       "\n",
       "   Master or Above  college  \n",
       "0                0        0  \n",
       "1                0        0  \n",
       "2                0        1  \n",
       "3                0        1  \n",
       "4                0        1  "
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X = Feature\n",
    "X[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "What are our lables?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = df['loan_status'].values\n",
    "y[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "## Normalize Data "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Data Standardization give data zero mean and unit variance (technically should be done after train test split )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.51578458,  0.92071769,  2.33152555, -0.42056004, -1.20577805,\n",
       "        -0.38170062,  1.13639374, -0.07624929, -0.86968108],\n",
       "       [ 0.51578458,  0.92071769,  0.34170148,  2.37778177, -1.20577805,\n",
       "         2.61985426, -0.87997669, -0.07624929, -0.86968108],\n",
       "       [ 0.51578458, -0.95911111, -0.65321055, -0.42056004, -1.20577805,\n",
       "        -0.38170062, -0.87997669, -0.07624929,  1.14984679],\n",
       "       [ 0.51578458,  0.92071769, -0.48739188,  2.37778177,  0.82934003,\n",
       "        -0.38170062, -0.87997669, -0.07624929,  1.14984679],\n",
       "       [ 0.51578458,  0.92071769, -0.3215732 , -0.42056004,  0.82934003,\n",
       "        -0.38170062, -0.87997669, -0.07624929,  1.14984679]])"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X= preprocessing.StandardScaler().fit(X).transform(X)\n",
    "X[0:5]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "# Classification "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "Now, it is your turn, use the training set to build an accurate model. Then use the test set to report the accuracy of the model\n",
    "You should use the following algorithm:\n",
    "- K Nearest Neighbor(KNN)\n",
    "- Decision Tree\n",
    "- Support Vector Machine\n",
    "- Logistic Regression\n",
    "\n",
    "\n",
    "\n",
    "__ Notice:__ \n",
    "- You can go above and change the pre-processing, feature selection, feature-extraction, and so on, to make a better model.\n",
    "- You should use either scikit-learn, Scipy or Numpy libraries for developing the classification algorithms.\n",
    "- You should include the code of the algorithm in the following cells."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# K Nearest Neighbor(KNN)\n",
    "Notice: You should find the best k to build the model with the best accuracy.  \n",
    "**warning:** You should not use the __loan_test.csv__ for finding the best k, however, you can split your train_loan.csv into train and test to find the best __k__."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set: (276, 9) (276,)\n",
      "Test set: (70, 9) (70,)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array(['COLLECTION', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split( X, y, test_size=0.2, random_state=0)\n",
    "print ('Train set:', X_train.shape,  y_train.shape)\n",
    "print ('Test set:', X_test.shape,  y_test.shape)\n",
    "\n",
    "k = 7\n",
    "#Train Model and Predict  \n",
    "knn = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)\n",
    "knn\n",
    "\n",
    "yhat = knn.predict(X_test)\n",
    "yhat[0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The most accurate was  0.7571428571428571 with k= 7\n"
     ]
    }
   ],
   "source": [
    "from sklearn import metrics\n",
    "Ks = 10\n",
    "mean_acc = np.zeros((Ks-1))\n",
    "std_acc = np.zeros((Ks-1))\n",
    "ConfustionMx = [];\n",
    "for n in range(1,Ks):\n",
    "    \n",
    "    #Train Model and Predict  \n",
    "    knn = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)\n",
    "    yhat=knn.predict(X_test)\n",
    "    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)\n",
    "\n",
    "    \n",
    "    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])\n",
    "\n",
    "mean_acc\n",
    "print( \"The most accurate was \", mean_acc.max(), \"with k=\", mean_acc.argmax()+1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set Accuracy:  0.8043478260869565\n",
      "Test set Accuracy:  0.7428571428571429\n"
     ]
    }
   ],
   "source": [
    "plt.plot(range(1,Ks),mean_acc,'g')\n",
    "plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)\n",
    "plt.legend(('Accuracy ', '+/- 3xstd'))\n",
    "plt.ylabel('Accuracy ')\n",
    "plt.xlabel('Number of Nabors (K)')\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "print(\"Train set Accuracy: \", metrics.accuracy_score(y_train, knn.predict(X_train)))\n",
    "print(\"Test set Accuracy: \", metrics.accuracy_score(y_test, yhat))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(criterion='entropy', max_depth=4)"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "dec_Tree = DecisionTreeClassifier(criterion=\"entropy\", max_depth = 4)\n",
    "dec_Tree # it shows the default parameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['COLLECTION' 'PAIDOFF' 'COLLECTION' 'PAIDOFF' 'PAIDOFF']\n",
      "['COLLECTION' 'PAIDOFF' 'COLLECTION' 'PAIDOFF' 'PAIDOFF']\n",
      "DecisionTrees's Accuracy:  0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "dec_Tree.fit(X_train,y_train)\n",
    "pred_Tree = dec_Tree.predict(X_test)\n",
    "\n",
    "print (pred_Tree [0:5])\n",
    "print (y_test [0:5])\n",
    "\n",
    "from sklearn import metrics\n",
    "import matplotlib.pyplot as plt\n",
    "print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_test, pred_Tree))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: - \n",
      "Found conflicts! Looking for incompatible packages.\n",
      "This can take several minutes.  Press CTRL-C to abort.\n",
      "                                                                                                     \\failed\n",
      "\n",
      "UnsatisfiableError: The following specifications were found\n",
      "to be incompatible with the existing python installation in your environment:\n",
      "\n",
      "Specifications:\n",
      "\n",
      "  - cffi -> python[version='2.7.*|3.5.*|3.6.*|3.6.12|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.9,<3.10.0a0|>=3.8,<3.9.0a0|3.6.9|3.6.9|3.6.9|>=2.7,<2.8.0a0|3.6.9|>=3.5,<3.6.0a0|3.4.*',build='1_73_pypy|4_73_pypy|3_73_pypy|2_73_pypy|0_73_pypy']\n",
      "  - rsa -> python[version='2.7.*|3.4.*|3.5.*|3.6.*']\n",
      "\n",
      "Your python: python=3.7\n",
      "\n",
      "If python is on the left-most side of the chain, that's the version you've asked for.\n",
      "When python appears to the right, that indicates that the thing on the left is somehow\n",
      "not available for the python version you are constrained to. Note that conda will not\n",
      "change your python version to a different minor version unless you explicitly specify\n",
      "that.\n",
      "\n",
      "The following specifications were found to be incompatible with each other:\n",
      "\n",
      "Output in format: Requested package -> Available versions\n",
      "\n",
      "Package keras-preprocessing conflicts for:\n",
      "tensorflow-base -> keras-preprocessing[version='>=1.0.3|>=1.0.5,<2.0a0|>=1.0.5|>=1.1.0']\n",
      "ibm-wsrt-py37main-main -> keras-preprocessing==1.1.0[build=*]\n",
      "\n",
      "Package bzip2 conflicts for:\n",
      "ibm-wsrt-py37main-main -> bzip2==1.0.8[build=*]\n",
      "pytables -> bzip2[version='1.0.*|>=1.0.6,<2.0a0|>=1.0.8,<2.0a0']\n",
      "python=3.7 -> bzip2[version='>=1.0.6,<2.0a0|>=1.0.8,<2.0a0']\n",
      "\n",
      "Package python-dateutil conflicts for:\n",
      "ibm-wsrt-py37main-main -> python-dateutil==2.8.1[build=*]\n",
      "matplotlib-base -> python-dateutil[version='>=2.1']\n",
      "botocore -> python-dateutil[version='>=2.1,<2.7.0|>=2.1,<2.8.1|>=2.1,<3.0.0']\n",
      "bokeh -> python-dateutil[version='>=2.1']\n",
      "jupyter_client -> python-dateutil[version='>=2.1']\n",
      "matplotlib -> python-dateutil\n",
      "pandas -> python-dateutil[version='>=2.5.*|>=2.6.1|>=2.7.3']\n",
      "\n",
      "Package libcurl conflicts for:\n",
      "tensorflow-base -> libcurl[version='>=7.64.1,<8.0a0|>=7.71.1,<8.0a0']\n",
      "hdf5 -> libcurl[version='>=7.71.1,<8.0a0']\n",
      "\n",
      "Package enum34 conflicts for:\n",
      "tensorflow-base -> enum34[version='>=1.1.6|>=1.1.6,<2.0a0']\n",
      "brotlipy -> enum34\n",
      "grpcio -> enum34[version='>=1.0.4']\n",
      "absl-py -> enum34\n",
      "pyqt -> enum34\n",
      "tensorflow-estimator -> enum34[version='>=1.1.6']\n",
      "cryptography -> enum34\n",
      "traitlets -> enum34\n",
      "imageio -> enum34\n",
      "\n",
      "Package libgcc-ng conflicts for:\n",
      "sqlalchemy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "aiohttp -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "bzip2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "freetds -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "regex -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pymssql -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "multidict -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "py-xgboost -> libgcc-ng[version='>=4.9|>=7.3.0|>=5.4.0|>=7.2.0']\n",
      "biopython -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyodbc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "fontconfig -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "brotlipy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "tk -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "zlib -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libxml2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "mkl-service -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "fastcache -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "freetype -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "cytoolz -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "lzo -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libuuid -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=9.3.0']\n",
      "expat -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "readline -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "zeromq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libprotobuf -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "glib -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "gst-plugins-base -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "grpcio -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "zstd -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "c-ares -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "sqlite -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyqt -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libxcb -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "pyrsistent -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "markupsafe -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pandas -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "astropy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cffi -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "jpeg -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "lz4-c -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pcre -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "scikit-image -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "matplotlib -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "mkl_fft -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "psycopg2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "protobuf -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "numpy-base -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "statsmodels -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "ninja -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "libedit -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyzmq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "mistune -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "sip -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numpy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxgboost -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=5.4.0|>=7.2.0']\n",
      "yaml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pillow -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "ncurses -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "openssl -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "lcms2 -> libgcc-ng[version='>=7.3.0|>=7.5.0']\n",
      "unixodbc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libpq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "h5py -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "yarl -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxslt -> libgcc-ng[version='>=4.9|>=7.3.0|>=9.3.0|>=7.2.0']\n",
      "numexpr -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "hdf5 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "xz -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyyaml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "krb5 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "ibm-wsrt-py37main-main -> libgcc-ng==9.1.0[build=*]\n",
      "scikit-learn -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "tensorflow-base -> libgcc-ng[version='>=5.4.0|>=7.2.0']\n",
      "blosc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "gstreamer -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pytorch -> libgcc-ng[version='>=5.4.0|>=7.3.0|>=7.5.0']\n",
      "libffi -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libpng -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libtiff -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "wrapt -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "qt -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "kiwisolver -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "pytables -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "snappy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "matplotlib-base -> libgcc-ng[version='>=7.3.0|>=7.5.0']\n",
      "scipy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cx_oracle -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "blas -> libgcc-ng[version='>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "libsodium -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "dbus -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "gmp -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "mkl_random -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "icu -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "tornado -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pywavelets -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "python=3.7 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cryptography -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "lxml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "tensorboard -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "\n",
      "Package python_abi conflicts for:\n",
      "notebook -> python_abi[version='3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp39|*_pypy36_pp73|*_cp38|*_cp36m|*_cp37m']\n",
      "traitlets -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m|*_cp27mu']\n",
      "sip -> python_abi[version='3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp36m|*_cp37m']\n",
      "mkl_random -> python_abi[version='3.6.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_cp36m']\n",
      "ipython -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp39|*_cp36m']\n",
      "cryptography -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.9.*|3.7.*',build='*_pypy36_pp73|*_cp39|*_cp38|*_cp36m|*_cp37m|*_cp27mu']\n",
      "pexpect -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*',build='*_pypy36_pp73|*_cp38|*_cp36m|*_cp27mu|*_cp37m']\n",
      "cffi -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "pysocks -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m|*_cp27mu']\n",
      "importlib-metadata -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp39|*_pypy36_pp73|*_cp36m|*_cp37m|*_cp27mu']\n",
      "mock -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp39|*_cp37m|*_cp27mu']\n",
      "secretstorage -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp36m|*_cp39|*_cp37m|*_pypy36_pp73|*_cp27mu']\n",
      "glib -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_pypy36_pp73|*_cp27mu']\n",
      "s3transfer -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp39|*_cp36m']\n",
      "mkl_fft -> python_abi[version='3.6.*|3.9.*|3.8.*|3.7.*',build='*_cp37m|*_cp38|*_cp36m|*_cp39']\n",
      "yarl -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp36m|*_cp39|*_cp37m|*_pypy36_pp73']\n",
      "soupsieve -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m|*_cp27mu']\n",
      "grpcio -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp36m|*_cp38|*_cp37m|*_cp39|*_cp27mu']\n",
      "sympy -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp37m|*_cp39|*_cp27mu']\n",
      "pillow -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp39|*_cp37m|*_pypy36_pp73']\n",
      "pyodbc -> python_abi[version='2.7.*|3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp38|*_cp39|*_cp36m|*_cp37m|*_cp27mu']\n",
      "setuptools -> python_abi[version='3.6.*|3.6|3.9.*|3.8.*|3.7.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "absl-py -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp37m|*_cp39|*_cp27mu']\n",
      "brotlipy -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp37m|*_cp39']\n",
      "dill -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp27mu|*_cp37m']\n",
      "tornado -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp39|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "nbconvert -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp36m|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "pytorch -> python_abi[version='3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp36m|*_cp37m']\n",
      "pytables -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39']\n",
      "numexpr -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp36m|*_cp37m|*_pypy36_pp73']\n",
      "pytest -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp36m|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "aiohttp -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp36m|*_pypy36_pp73|*_cp37m']\n",
      "fastcache -> python_abi[version='2.7.*|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39|*_cp27mu']\n",
      "urllib3 -> python_abi[version='2.7.*|3.8.*|3.6.*|3.6|3.7.*',build='*_pypy36_pp73|*_cp36m|*_cp38|*_cp27mu|*_cp37m']\n",
      "pyqt -> python_abi[version='3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp38|*_cp39|*_cp36m|*_cp37m']\n",
      "astropy -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_cp36m']\n",
      "kiwisolver -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_pypy36_pp73|*_cp38|*_cp36m|*_cp37m|*_cp27mu']\n",
      "jupyter_core -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp36m|*_cp39|*_cp27mu']\n",
      "sqlalchemy -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp39|*_pypy36_pp73|*_cp38|*_cp36m|*_cp37m|*_cp27mu']\n",
      "wrapt -> python_abi[version='2.7.*|3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp39|*_cp37m|*_cp27mu']\n",
      "python=3.7 -> python_abi==3.7[build=*_pypy37_pp73]\n",
      "matplotlib -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp39|*_cp37m|*_cp36m']\n",
      "pluggy -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp37m|*_cp39|*_pypy36_pp73|*_cp38']\n",
      "py-xgboost -> python_abi[version='3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp37m|*_cp38|*_cp36m|*_cp39']\n",
      "keyring -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "mistune -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp39|*_cp37m|*_cp38|*_pypy36_pp73|*_cp27mu']\n",
      "requests -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp36m|*_cp27mu']\n",
      "jsonschema -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*',build='*_cp36m|*_cp38|*_cp37m|*_pypy36_pp73|*_cp27mu']\n",
      "chardet -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp39|*_cp38|*_cp36m|*_cp37m|*_cp27mu']\n",
      "beautifulsoup4 -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m']\n",
      "certifi -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m|*_cp27mu']\n",
      "pywavelets -> python_abi[version='3.6.*|3.6|3.8.*|3.9.*|3.7.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "future -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp39|*_cp27mu']\n",
      "matplotlib-base -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp39|*_cp37m|*_cp36m|*_cp27mu']\n",
      "widgetsnbextension -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp37m|*_cp39']\n",
      "ninja -> python_abi[version='3.6|3.6.*|3.8.*|3.7.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp37m']\n",
      "pyrsistent -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp36m|*_cp38|*_cp37m|*_cp39|*_cp27mu']\n",
      "regex -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp39|*_cp37m|*_pypy36_pp73|*_cp27mu']\n",
      "terminado -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_pypy36_pp73|*_cp39|*_cp27mu']\n",
      "pickleshare -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp37m|*_pypy36_pp73|*_cp39|*_cp36m|*_cp27mu']\n",
      "lxml -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.8.*|3.7.*',build='*_pypy36_pp73|*_cp37m|*_cp38|*_cp36m|*_cp39|*_cp27mu']\n",
      "scikit-learn -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp37m|*_cp39']\n",
      "bokeh -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp39|*_cp37m|*_cp36m']\n",
      "ipykernel -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp39|*_pypy36_pp73|*_cp36m|*_cp37m']\n",
      "multidict -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp39|*_cp37m']\n",
      "scipy -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp39']\n",
      "pyzmq -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.8.*|3.7.*',build='*_pypy36_pp73|*_cp38|*_cp36m|*_cp39|*_cp37m|*_cp27mu']\n",
      "tensorflow-base -> python_abi[version='3.6.*|3.7.*',build='*_cp36m|*_cp37m']\n",
      "mkl-service -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39']\n",
      "cytoolz -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp39|*_cp37m|*_cp38']\n",
      "protobuf -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_pypy36_pp73|*_cp37m|*_cp36m']\n",
      "cx_oracle -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp37m|*_cp39|*_cp27mu']\n",
      "numpy -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "psycopg2 -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39|*_pypy36_pp73']\n",
      "docutils -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp27mu']\n",
      "h5py -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp39|*_cp37m|*_cp38']\n",
      "typing_extensions -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp36m|*_cp27mu']\n",
      "jedi -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp39|*_pypy36_pp73|*_cp37m|*_cp27mu']\n",
      "pymssql -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_cp36m']\n",
      "entrypoints -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp38|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp39|*_cp27mu']\n",
      "markupsafe -> python_abi[version='2.7.*|3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp39|*_cp37m|*_cp36m|*_cp27mu']\n",
      "statsmodels -> python_abi[version='3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp39|*_cp38|*_cp36m|*_cp37m']\n",
      "pandas -> python_abi[version='3.6|3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp38|*_pypy36_pp73|*_cp36m|*_cp39|*_cp37m']\n",
      "scikit-image -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "pyyaml -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp37m|*_cp38|*_cp36m|*_pypy36_pp73|*_cp39|*_cp27mu']\n",
      "biopython -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp39|*_cp37m']\n",
      "\n",
      "Package pypy3.6 conflicts for:\n",
      "biopython -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "cffi -> pypy3.6[version='7.3.0.*|7.3.1.*|7.3.2.*|7.3.3.*']\n",
      "scikit-image -> pypy3.6[version='>=7.3.2']\n",
      "pickleshare -> pypy3.6[version='>=7.3.2']\n",
      "aiohttp -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "pyrsistent -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "s3transfer -> pypy3.6[version='>=7.3.2']\n",
      "matplotlib -> pypy3.6[version='>=7.3.2']\n",
      "certifi -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "widgetsnbextension -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "psycopg2 -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "soupsieve -> pypy3.6[version='>=7.3.1']\n",
      "setuptools -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "numexpr -> pypy3.6[version='>=7.3.2']\n",
      "nbconvert -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "numpy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "importlib-metadata -> pypy3.6[version='>=7.3.1|>=7.3.3']\n",
      "pandas -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "mistune -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pillow -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "docutils -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "jupyter_core -> pypy3.6[version='>=7.3.2']\n",
      "kiwisolver -> pypy3.6[version='>=7.3.2']\n",
      "pytest -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "brotlipy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "keyring -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "ninja -> pypy3.6[version='>=7.3.1']\n",
      "pysocks -> pypy3.6[version='>=7.3.2']\n",
      "sqlalchemy -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "entrypoints -> pypy3.6[version='>=7.3.2']\n",
      "terminado -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "sympy -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "scipy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pyyaml -> pypy3.6[version='>=7.3.2']\n",
      "pyzmq -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "beautifulsoup4 -> pypy3.6[version='>=7.3.1']\n",
      "absl-py -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "tornado -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "multidict -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "scikit-learn -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "cx_oracle -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "ipython -> pypy3.6[version='>=7.3.1']\n",
      "pluggy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pywavelets -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "bokeh -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "matplotlib-base -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "regex -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "lxml -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "notebook -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "jedi -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "chardet -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "markupsafe -> pypy3.6[version='>=7.3.2']\n",
      "cryptography -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "future -> pypy3.6[version='>=7.3.2']\n",
      "secretstorage -> pypy3.6[version='>=7.3.2']\n",
      "ipykernel -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "wrapt -> pypy3.6[version='>=7.3.2']\n",
      "protobuf -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "mock -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "yarl -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "\n",
      "Package six conflicts for:\n",
      "keras-preprocessing -> six[version='>=1.9.0']\n",
      "python-dateutil -> six[version='>=1.5']\n",
      "pytest -> six[version='>=1.10.0']\n",
      "jsonschema -> six[version='>=1.11.0']\n",
      "plotly -> six\n",
      "arcgis=1.6.0 -> six\n",
      "tensorboard -> six[version='>=1.10.0|>=1.12']\n",
      "tensorflow-base -> six[version='>=1.10.0|>=1.12.0|>=1.12.0,<2.0a0']\n",
      "tensorflow-estimator -> six[version='>=1.10.0']\n",
      "protobuf -> six\n",
      "pyopenssl -> six[version='>=1.5.2']\n",
      "patsy -> six\n",
      "google-auth -> six[version='>=1.9.0|>=1.9.0,<2dev']\n",
      "h5py -> six\n",
      "html5lib -> six[version='>=1.9']\n",
      "scikit-image -> six[version='>=1.4|>=1.7.3']\n",
      "mock -> six\n",
      "mkl-service -> six\n",
      "google-pasta -> six\n",
      "bokeh -> six[version='>=1.5.2']\n",
      "packaging -> six\n",
      "pytables -> six\n",
      "more-itertools -> six[version='>=1.0.0,<2.0.0']\n",
      "cryptography -> six[version='>=1.4.1']\n",
      "prompt-toolkit -> six[version='>=1.9.0']\n",
      "cycler -> six\n",
      "bleach -> six\n",
      "traitlets -> six\n",
      "ibm-wsrt-py37main-main -> six==1.15.0[build=*]\n",
      "retrying -> six[version='>=1.7.0']\n",
      "nltk -> six\n",
      "pyrsistent -> six\n",
      "grpcio -> six[version='>=1.5.2']\n",
      "absl-py -> six\n",
      "\n",
      "Package packaging conflicts for:\n",
      "pytest -> packaging\n",
      "wheel -> packaging[version='>=20.2']\n",
      "bleach -> packaging\n",
      "ibm-wsrt-py37main-main -> packaging==20.4[build=*]\n",
      "jupyterlab_server -> packaging\n",
      "jupyterlab -> packaging\n",
      "bokeh -> packaging[version='>=16.8']\n",
      "\n",
      "Package ncurses conflicts for:\n",
      "ibm-wsrt-py37main-main -> ncurses==6.2[build=*]\n",
      "libedit -> ncurses[version='5.9|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0|>=6.1,<7.0a0|6.0.*']\n",
      "python=3.7 -> ncurses[version='>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0|>=6.1,<7.0a0']\n",
      "readline -> ncurses[version='5.9.*|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.1,<7.0a0|>=6.0,<7.0a0|6.0.*']\n",
      "sqlite -> ncurses[version='5.9|5.9.*|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0']\n",
      "\n",
      "Package jpeg conflicts for:\n",
      "qt -> jpeg[version='9.*|>=9c,<10a|>=9d,<10a|>=9b,<10a']\n",
      "ibm-wsrt-py37main-main -> jpeg==9b[build=*]\n",
      "pillow -> jpeg[version='8.*|9.*|>=9c,<10a|>=9d,<10a|>=9b,<10a']\n",
      "lcms2 -> jpeg[version='>=9b,<10a|>=9c,<10a|>=9d,<10a']\n",
      "libtiff -> jpeg[version='9.*|>=9b,<10a|>=9c,<10a|>=9d,<10a']\n",
      "\n",
      "Package brotlipy conflicts for:\n",
      "ibm-wsrt-py37main-main -> brotlipy==0.7.0[build=*]\n",
      "urllib3 -> brotlipy[version='>=0.6.0']\n",
      "\n",
      "Package freetype conflicts for:\n",
      "ibm-wsrt-py37main-main -> freetype==2.10.2[build=*]\n",
      "fontconfig -> freetype[version='2.6.*|2.7|2.7.*|2.7|2.8.1|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8.1,<2.9.0a0|>=2.9,<3.0a0|>=2.8,<2.9.0a0']\n",
      "qt -> freetype[version='2.7|2.7.*|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8,<2.9.0a0']\n",
      "matplotlib-base -> freetype[version='>=2.10.2,<3.0a0|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0']\n",
      "matplotlib -> freetype[version='2.6.*|>=2.9.1,<3.0a0|>=2.8,<2.9.0a0']\n",
      "pillow -> freetype[version='2.5.*|2.6.*|2.7|2.7.*|2.7|2.8.*|2.8.1|2.8.1.*|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8.1,<2.9.0a0|>=2.10.3,<3.0a0|>=2.8,<2.9.0a0']\n",
      "\n",
      "Package openmpi conflicts for:\n",
      "hdf5 -> openmpi[version='>=3.1,<3.2.0a0|>=4.0,<4.1.0a0']\n",
      "h5py -> openmpi[version='>=3.1,<3.2.0a0|>=3.1.4,<3.2.0a0|>=4.0.1,<4.1.0a0|>=4.0.2,<4.1.0a0|>=4.0.4,<4.1.0a0|>=4.0.5,<4.1.0a0']\n",
      "\n",
      "Package urllib3 conflicts for:\n",
      "ibm-wsrt-py37main-main -> urllib3==1.25.9[build=*]\n",
      "botocore -> urllib3[version='>=1.20,<1.24|>=1.20,<1.25|>=1.20,<1.26|>=1.25.4,<1.26|>=1.25.4,<1.27']\n",
      "\n",
      "Package libxgboost conflicts for:\n",
      "ibm-wsrt-py37main-main -> libxgboost==0.90[build=*]\n",
      "py-xgboost -> libxgboost[version='0.7|0.71|0.72|0.72|0.72|0.80|0.80|0.80|0.80|0.80|0.80|0.81|0.81|0.82|0.82|0.90|0.90|0.90|0.90|1.0.2|1.0.2|1.1.1|1.2.0|1.3.0|0.90|0.90|0.90|0.90|0.90|0.90',build='hf484d3e_0|h87a4715_0|he6710b0_0|he6710b0_0|h688424c_0|hf484d3e_1|hfc679d8_1|hf484d3e_1001|hfc679d8_0|he1b5a44_1|he1b5a44_1|he1b5a44_0|h9c3ff4c_0|h9c3ff4c_1|he1b5a44_0|he1b5a44_0|he1b5a44_4|he1b5a44_3|he1b5a44_2|he1b5a44_1|he1b5a44_0|hf484d3e_1000|he6710b0_1|h6edc907_0|h4d71fd4_0|h51060c3_0|h6edc907_0|h6cbba54_0|h83be7fe_0|hf484d3e_0|hf484d3e_0']\n",
      "\n",
      "Package pyopenssl conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyopenssl==19.1.0[build=*]\n",
      "urllib3 -> pyopenssl[version='>=0.14']\n",
      "\n",
      "Package nbformat conflicts for:\n",
      "ibm-wsrt-py37main-main -> nbformat==5.0.7[build=*]\n",
      "notebook -> nbformat\n",
      "plotly -> nbformat[version='>=4.2']\n",
      "nbconvert -> nbformat[version='>=4.4']\n",
      "widgetsnbextension -> nbformat[version='>=4.2.0']\n",
      "ipywidgets -> nbformat[version='>=4.2.0']\n",
      "\n",
      "Package libstdcxx-ng conflicts for:\n",
      "freetds -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "pymssql -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "libxgboost -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=5.4.0|>=7.2.0']\n",
      "krb5 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "scikit-image -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "grpcio -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "sip -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "kiwisolver -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libtiff -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "lz4-c -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "pyodbc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "glib -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyqt -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numpy -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "pcre -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "mkl_fft -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "unixodbc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "ncurses -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "matplotlib-base -> libstdcxx-ng[version='>=7.3.0|>=7.5.0']\n",
      "pytables -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "scikit-learn -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libprotobuf -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libffi -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "ninja -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "zeromq -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "expat -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "zstd -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "mkl_random -> libstdcxx-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "sqlite -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "blosc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "tensorflow-base -> libstdcxx-ng[version='>=5.4.0|>=7.2.0']\n",
      "icu -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pytorch -> libstdcxx-ng[version='>=5.4.0|>=7.3.0|>=7.5.0']\n",
      "qt -> libstdcxx-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "gmp -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numexpr -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "yaml -> libstdcxx-ng[version='>=7.3.0']\n",
      "ibm-wsrt-py37main-main -> libstdcxx-ng==9.1.0[build=*]\n",
      "matplotlib -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "tensorboard -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "snappy -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pandas -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "biopython -> libstdcxx-ng[version='>=7.2.0']\n",
      "protobuf -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "py-xgboost -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=5.4.0|>=7.2.0']\n",
      "scipy -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyzmq -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "python=3.7 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "gst-plugins-base -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "hdf5 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "freetype -> libstdcxx-ng[version='>=4.9']\n",
      "\n",
      "Package jupyterlab conflicts for:\n",
      "arcgis=1.6.0 -> jupyterlab\n",
      "ibm-wsrt-py37main-main -> jupyterlab==2.2.6[build=*]\n",
      "\n",
      "Package gstreamer conflicts for:\n",
      "ibm-wsrt-py37main-main -> gstreamer==1.14.0[build=*]\n",
      "qt -> gstreamer[version='>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.4,<1.15.0a0|>=1.18.2,<1.19.0a0|>=1.14.0,<1.15.0a0']\n",
      "gst-plugins-base -> gstreamer[version='1.8.*|>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.1,<2.0a0|>=1.14.4,<2.0a0|>=1.14.5,<2.0a0|>=1.18.1,<2.0a0|>=1.18.2,<2.0a0|>=1.14.0,<2.0a0|>=1.12.2,<1.13.0a0']\n",
      "\n",
      "Package webencodings conflicts for:\n",
      "html5lib -> webencodings\n",
      "tensorboard -> webencodings\n",
      "ibm-wsrt-py37main-main -> webencodings==0.5.1[build=*]\n",
      "bleach -> webencodings\n",
      "\n",
      "Package ipywidgets conflicts for:\n",
      "arcgis=1.6.0 -> ipywidgets[version='>=7']\n",
      "ibm-wsrt-py37main-main -> ipywidgets==7.5.1[build=*]\n",
      "\n",
      "Package sip conflicts for:\n",
      "pyqt -> sip[version='4.18|4.18.*|>=4.19.4,<=4.19.8|4.19.13.*|>=4.19.13,<=4.19.14']\n",
      "ibm-wsrt-py37main-main -> sip==4.19.8[build=*]\n",
      "\n",
      "Package libprotobuf conflicts for:\n",
      "ibm-wsrt-py37main-main -> libprotobuf==3.12.3[build=*]\n",
      "tensorflow-base -> libprotobuf[version='>=3.6.1,<3.7.0a0|>=3.8.0,<3.9.0a0|>=3.9.1,<3.10.0a0']\n",
      "protobuf -> libprotobuf[version='3.10.0.*|3.10.1.*|3.11.0.*|3.11.1.*|3.11.2.*|3.11.3.*|3.11.4.*|3.12.1.*|3.12.3.*|3.12.4.*|3.13.0.*|3.13.0.1.*|3.14.0.*|>=3.14.0,<3.15.0a0|>=3.13.0.1,<3.14.0a0|>=3.13.0,<3.14.0a0|>=3.12.4,<3.13.0a0|>=3.12.3,<3.13.0a0|>=3.12.1,<3.13.0a0|>=3.11.4,<3.12.0a0|>=3.11.3,<3.12.0a0|>=3.11.2,<3.12.0a0|>=3.11.1,<3.12.0a0|>=3.11.0,<3.12.0a0|>=3.10.1,<3.11.0a0|>=3.10.0,<3.11.0a0|3.9.2.*|>=3.9.2,<3.10.0a0|3.9.1.*|>=3.9.1,<3.10.0a0|3.9.0.*|>=3.9.0,<3.10.0a0|3.8.0.*|>=3.8.0,<3.9.0a0|3.7.1.*|>=3.7.1,<3.8.0a0|3.7.0.*|>=3.7.0,<3.7.1.0a0|3.6.1.*|>=3.6.1,<3.6.2.0a0|3.6.0.*|>=3.6.0,<3.6.1.0a0|3.5.2.*|3.5.2|3.5.1.1|3.5.1|>=3.5.2,<3.6.0a0|>=3.5.1,<3.6.0a0|>=3.4.1,<3.5.0a0']\n",
      "\n",
      "Package dbus conflicts for:\n",
      "pyqt -> dbus[version='>=1.10.22,<2.0a0|>=1.12.2,<2.0a0|>=1.13.12,<2.0a0|>=1.13.6,<2.0a0|>=1.13.2,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> dbus==1.13.16[build=*]\n",
      "secretstorage -> dbus\n",
      "qt -> dbus[version='>=1.10.22,<2.0a0|>=1.12.2,<2.0a0|>=1.13.0,<2.0a0|>=1.13.6,<2.0a0|>=1.13.2,<2.0a0']\n",
      "\n",
      "Package fontconfig conflicts for:\n",
      "qt -> fontconfig[version='2.12.*|>=2.13.1,<3.0a0|>=2.13.0,<3.0a0|>=2.12.6,<3.0a0|>=2.12.4,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> fontconfig==2.13.0[build=*]\n",
      "\n",
      "Package cryptography conflicts for:\n",
      "oauthlib -> cryptography\n",
      "pyopenssl -> cryptography[version='>=1.3|>=1.3.4|>=1.9|>=2.1.4|>=2.2.1|>=2.8|>=3.2']\n",
      "pyjwt -> cryptography[version='>=1.0|>=1.4|>=2.6,<3.0.0']\n",
      "secretstorage -> cryptography\n",
      "ibm-wsrt-py37main-main -> cryptography==3.2.1[build=*]\n",
      "urllib3 -> cryptography[version='>=1.3.4']\n",
      "\n",
      "Package future conflicts for:\n",
      "pytorch -> future\n",
      "ibm-wsrt-py37main-main -> future==0.18.2[build=*]\n",
      "tensorflow-base -> future\n",
      "\n",
      "Package mkl conflicts for:\n",
      "tensorflow-base -> mkl[version='>=2018.0.2,<2019.0a0']\n",
      "scikit-learn -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "mkl_random -> mkl[version='>=2018.0.3,<2019.0a0|>=2019.1,<2020.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.0,<2021.0a0|>=2020.2,<2021.0a0|>=2020.1,<2021.0a0|>=2019.4,<2021.0a0|>=2019.1,<2021.0a0']\n",
      "numpy-base -> mkl[version='>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "scipy -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "mkl-service -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.2,<2021.0a0|>=2019.4,<2021.0a0|>=2019.3,<2021.0a0']\n",
      "ibm-wsrt-py37main-main -> mkl==2020.1[build=*]\n",
      "numexpr -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.1,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "pytorch -> mkl[version='2019.*|>=2020.4,<2021.0a0|>=2019.4,<2021.0a0|>=2019.1,<2021.0a0|>=2018.0.3,<2019.0a0|>=2018.0.2,<2019.0a0']\n",
      "blas -> mkl\n",
      "mkl_fft -> mkl[version='>=2018.0.3,<2019.0a0|>=2019.1,<2020.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.2,<2021.0a0|>=2019.4,<2021.0a0|>=2019.3,<2021.0a0|>=2019.1,<2021.0a0']\n",
      "numpy -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.1,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "\n",
      "Package setuptools conflicts for:\n",
      "ibm-wsrt-py37main-main -> setuptools==47.3.1[build=*]\n",
      "joblib -> setuptools\n",
      "pytest -> setuptools[version='>=40.0']\n",
      "matplotlib -> setuptools\n",
      "matplotlib-base -> setuptools\n",
      "plotly -> setuptools\n",
      "pygments -> setuptools\n",
      "markdown -> setuptools[version='>=36']\n",
      "ipython -> setuptools[version='>=18.5']\n",
      "wheel -> setuptools\n",
      "pip -> setuptools\n",
      "google-auth -> setuptools[version='>=40.3.0']\n",
      "grpcio -> setuptools\n",
      "jinja2 -> setuptools\n",
      "numexpr -> setuptools\n",
      "tensorboard -> setuptools[version='>=41.0.0|>=41.4']\n",
      "jsonschema -> setuptools\n",
      "bleach -> setuptools\n",
      "networkx -> setuptools\n",
      "sympy -> setuptools\n",
      "astropy -> setuptools\n",
      "protobuf -> setuptools\n",
      "\n",
      "Package libedit conflicts for:\n",
      "krb5 -> libedit[version='>=3.1,<4.0a0|>=3.1.20170329,<3.2.0a0|>=3.1.20170329,<4.0a0|>=3.1.20191231,<3.2.0a0|>=3.1.20191231,<4.0a0|>=3.1.20181209,<3.2.0a0|>=3.1.20181209,<4.0a0']\n",
      "unixodbc -> libedit[version='>=3.1.20170329,<3.2.0a0|>=3.1.20191231,<3.2.0a0']\n",
      "sqlite -> libedit[version='>=3.1.20170329,<3.2.0a0|>=3.1.20181209,<3.2.0a0|>=3.1.20191231,<3.2.0a0']\n",
      "ibm-wsrt-py37main-main -> libedit==3.1.20191231[build=*]\n",
      "\n",
      "Package libffi conflicts for:\n",
      "gstreamer -> libffi[version='>=3.2.1,<3.3.0a0|>=3.2.1,<3.3a0']\n",
      "python=3.7 -> libffi[version='>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "glib -> libffi[version='<3.3.0.a0|>=3.0.0|>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "ibm-wsrt-py37main-main -> libffi==3.3[build=*]\n",
      "cffi -> libffi[version='<3.3.0.a0|>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "\n",
      "Package matplotlib conflicts for:\n",
      "nltk -> matplotlib\n",
      "bokeh -> matplotlib\n",
      "seaborn -> matplotlib[version='>=1.4.3|>=2.1.2']\n",
      "ibm-wsrt-py37main-main -> matplotlib==3.2.2[build=*]\n",
      "scikit-image -> matplotlib[version='>=1.1|>=1.3.1|>=2.0.0']\n",
      "arcgis=1.6.0 -> matplotlib\n",
      "\n",
      "Package openssl conflicts for:\n",
      "krb5 -> openssl[version='1.0.*|>=1.0.2l,<1.0.3a|>=1.0.2m,<1.0.3a|>=1.0.2n,<1.0.3a|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1d,<1.1.2a']\n",
      "ibm-wsrt-py37main-main -> openssl==1.1.1i[build=*]\n",
      "hdf5 -> openssl[version='>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a']\n",
      "freetds -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1e,<1.1.2a|>=1.0.2n,<1.0.3a']\n",
      "cryptography -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.1.1c,<1.1.2a|>=1.1.1b,<1.1.2a|>=1.0.2n,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "psycopg2 -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1f,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.0.2n,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "libpq -> openssl[version='1.0.*|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1f,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1b,<1.1.2a|>=1.0.2o,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "qt -> openssl[version='1.0.*|1.1.*|>=1.1.1g,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.0.2p,<1.0.3a|>=1.0.2r,<1.0.3a|>=1.0.2o,<1.0.3a|>=1.0.2n,<1.0.3a']\n",
      "python=3.7 -> openssl[version='>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1e,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1c,<1.1.2a|>=1.1.1b,<1.1.2a']\n",
      "grpcio -> openssl[version='>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a']\n",
      "\n",
      "Package jupyter_client conflicts for:\n",
      "nbconvert -> jupyter_client[version='>=4.2']\n",
      "ipykernel -> jupyter_client\n",
      "ibm-wsrt-py37main-main -> jupyter_client==6.1.3[build=*]\n",
      "notebook -> jupyter_client[version='>=5.2.0|>=5.3.1|>=5.3.4']\n",
      "\n",
      "Package zlib conflicts for:\n",
      "protobuf -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "matplotlib -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "tk -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "pytables -> zlib[version='1.2.*|1.2.11.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "hdf5 -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "grpcio -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "pandoc -> zlib[version='1.2.*|1.2.11|1.2.11.*']\n",
      "python=3.7 -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "sqlite -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "libxml2 -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "blosc -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "libprotobuf -> zlib[version='1.2.11|>=1.2.11,<1.3.0a0']\n",
      "tensorflow-base -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "glib -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "gst-plugins-base -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "ibm-wsrt-py37main-main -> zlib==1.2.11[build=*]\n",
      "libpng -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "libtiff -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "qt -> zlib[version='1.2.*|>=1.2.11,<1.3.0a0']\n",
      "freetype -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "zstd -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "pillow -> zlib[version='1.2.*|1.2.11|1.2.11.*|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "libpq -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "\n",
      "Package contextlib2 conflicts for:\n",
      "importlib_metadata -> contextlib2\n",
      "importlib-metadata -> contextlib2\n",
      "\n",
      "Package matplotlib-base conflicts for:\n",
      "scikit-image -> matplotlib-base[version='>=2.0.0']\n",
      "matplotlib -> matplotlib-base[version='2.1.2|2.1.2|2.1.2|2.2.3|2.2.3|2.2.3|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|3.0.1|3.0.2|3.0.2|3.0.2|3.0.2|3.0.2|3.0.3|3.0.3|3.0.3|3.0.3|3.1.0|3.1.0|3.1.0|3.1.0|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.2|3.1.2|3.1.2|3.1.2|3.1.2|3.1.2|3.1.3|3.1.3|3.1.3|>=3.2.0,<3.2.1.0a0|>=3.2.1,<3.2.2.0a0|>=3.2.2,<3.2.3.0a0|>=3.3.0,<3.3.1.0a0|>=3.3.1,<3.3.2.0a0|>=3.3.2,<3.3.3.0a0|>=3.3.3,<3.3.4.0a0|>=2.2.5,<2.2.6.0a0|3.1.3|3.1.3|3.1.3|3.1.2|3.1.2|3.1.2',build='py37hef1b27d_1|py38hef1b27d_0|py37hef1b27d_0|py36hef1b27d_0|py36h250f245_1|py27h60b886d_1|py36h60b886d_1|py36hfd891ef_0|py36h250f245_1|py38h250f245_2|py37hc2fb212_1001|py37h167e16e_1002|py37h167e16e_0|py37h5f35d83_0|py37hfd891ef_1|py36hfd891ef_0|py37hfd891ef_0|py37he7580a8_1|py38h250f245_1|py38h250f245_2|py36h250f245_0|py38h250f245_0|py36h250f245_1|py38h250f245_1|py36h250f245_0|py37h250f245_0|py38h250f245_0|py37h250f245_1|py37h250f245_0|py36h250f245_2|py37h250f245_2|py36he7580a8_1|py36hfd891ef_1|py36h5f35d83_0|py36h5f35d83_1|py37h5f35d83_1|py36h167e16e_0|py36h167e16e_1002|py36h167e16e_1001|py37h167e16e_1001|py36h167e16e_1000|py36h250f245_2|py37h250f245_2|py27h250f245_2|py27h250f245_1|py37h250f245_1|py27hfd891ef_0|py37hfd891ef_0|py37h60b886d_1|py27h250f245_1|py37h250f245_1|py36hef1b27d_1|py38hef1b27d_1']\n",
      "ibm-wsrt-py37main-main -> matplotlib-base==3.2.2[build=*]\n",
      "seaborn -> matplotlib-base[version='>=2.1.2']\n",
      "\n",
      "Package json5 conflicts for:\n",
      "ibm-wsrt-py37main-main -> json5==0.9.5[build=*]\n",
      "jupyterlab_server -> json5\n",
      "\n",
      "Package protobuf conflicts for:\n",
      "tensorflow-estimator -> protobuf[version='>=3.6.1']\n",
      "tensorboard -> protobuf[version='>=3.3.0|>=3.4.0|>=3.6.0|>=3.8.0|>=3.6.1']\n",
      "grpcio -> protobuf[version='>=3.5.0']\n",
      "tensorflow-base -> protobuf[version='>=3.3.0|>=3.4.0|>=3.6.0|>=3.6.1,<4.0a0|>=3.6.1|>=3.8.0|>=3.9.2']\n",
      "ibm-wsrt-py37main-main -> protobuf==3.12.3[build=*]\n",
      "\n",
      "Package ipython conflicts for:\n",
      "ibm-wsrt-py37main-main -> ipython==7.15.0[build=*]\n",
      "ipywidgets -> ipython[version='>=4.0.0']\n",
      "ipykernel -> ipython[version='>=4.0.0|>=4.0|>=5.0']\n",
      "\n",
      "Package libxml2 conflicts for:\n",
      "lxml -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|2.9.3|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "qt -> libxml2[version='>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0']\n",
      "libxslt -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "ibm-wsrt-py37main-main -> libxml2==2.9.10[build=*]\n",
      "fontconfig -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "\n",
      "Package regex conflicts for:\n",
      "nltk -> regex\n",
      "ibm-wsrt-py37main-main -> regex==2020.6.8[build=*]\n",
      "\n",
      "Package mkl-service conflicts for:\n",
      "ibm-wsrt-py37main-main -> mkl-service==2.3.0[build=*]\n",
      "scipy -> mkl-service[version='>=2,<3.0a0']\n",
      "numexpr -> mkl-service[version='>=2,<3.0a0']\n",
      "scikit-learn -> mkl-service[version='>=2,<3.0a0']\n",
      "mkl_fft -> mkl-service[version='>=2,<3.0a0']\n",
      "numpy-base -> mkl-service[version='>=2,<3.0a0']\n",
      "pytorch -> mkl-service[version='>=2,<3.0a0']\n",
      "mkl_random -> mkl-service[version='>=2,<3.0a0']\n",
      "numpy -> mkl-service[version='>=2,<3.0a0']\n",
      "\n",
      "Package traitlets conflicts for:\n",
      "notebook -> traitlets[version='>=4.2.1|>=4.3']\n",
      "nbformat -> traitlets[version='>=4.1']\n",
      "ipykernel -> traitlets[version='>=4.1']\n",
      "nbconvert -> traitlets[version='>=4.2']\n",
      "ipython -> traitlets[version='>=4.2']\n",
      "ibm-wsrt-py37main-main -> traitlets==4.3.3[build=*]\n",
      "ipywidgets -> traitlets[version='>=4.2.1|>=4.3.1|>=4.3.1,<5.0.0|>=4.3.1,<6.0.0']\n",
      "jupyter_core -> traitlets\n",
      "jupyter_client -> traitlets\n",
      "widgetsnbextension -> traitlets[version='>=4.3.1']\n",
      "\n",
      "Package numpy conflicts for:\n",
      "numexpr -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0|>=1.16.4,<2.0a0|>=1.15.4,<2.0a0']\n",
      "opt_einsum -> numpy\n",
      "scikit-image -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.16.6,<2.0a0|>=1.19.4,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.13.3,<2.0a0']\n",
      "mkl_random -> numpy[version='>=1.11.3,<2.0a0|>=1.11|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.9.3,<2.0a0|>=1.14,<2.0a0']\n",
      "pytables -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "tensorflow-estimator -> numpy[version='>=1.13.3|>=1.16.1']\n",
      "seaborn -> numpy[version='>=1.13.3|>=1.9.3']\n",
      "astropy -> numpy[version='1.11.*|1.12.*|1.13.*|>=1.10|>=1.11|>=1.13|>=1.14|>=1.16.5,<2.0a0|>=1.16|>=1.19.4,<2.0a0|>=1.19|>=1.17|>=1.9|>=1.16.6,<2.0a0|>=1.19.2,<2.0a0|>=1.17.0,<2.0a0|>=1.17.4,<2.0a0|>=1.13.3,<2.0a0|>=1.14.6,<2.0a0|>=1.11.3,<2.0a0|>=1.10.4,<2.0a0|>=1.9.3,<2.0a0|>=1.14.1,<2.0a0|>=1.14.0,<2.0a0']\n",
      "arcgis=1.6.0 -> numpy\n",
      "pywavelets -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "keras-preprocessing -> numpy[version='>=1.9.1']\n",
      "mkl-service -> numpy[version='>=1.11.3,<2.0a0']\n",
      "tensorflow-base -> numpy[version='>=1.12.1,<2.0a0|>=1.13.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.1,<2.0a0|>=1.16.6,<2.0a0|>=1.16.5,<2.0a0']\n",
      "nltk -> numpy\n",
      "patsy -> numpy[version='>=1.4.0']\n",
      "h5py -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.8,<1.14|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "statsmodels -> numpy[version='1.10.*|1.11.*|>=1.11|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.17.5,<2.0a0|>=1.9.3,<2.0a0|>=1.17.0,<2.0a0|>=1.19.1,<2.0a0|>=1.11.3,<2.0a0']\n",
      "pandas -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.*|>=1.12.1,<2.0a0|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.18.4,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.9.*|>=1.9|>=1.8|>=1.7|>=1.16.6,<2.0a0|>=1.13.3,<2.0a0|>=1.11.3,<2.0a0']\n",
      "pytorch -> numpy[version='>=1.11|>=1.11.3,<2.0a0|>=1.16.6,<2.0a0|>=1.19.4,<2.0a0|>=1.14.6,<2.0a0|>=1.9.3,<2.0a0|>=1.9']\n",
      "biopython -> numpy[version='1.11.*|1.12.*|1.13.*|>=1.8|>=1.11.3,<2.0a0|>=1.9.3,<2.0a0|>=1.14.1,<2.0a0']\n",
      "py-xgboost -> numpy\n",
      "matplotlib -> numpy[version='1.10.*|1.11.*|>=1.14.6,<2.0a0']\n",
      "scipy -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.9|>=1.16.6,<2.0a0|>=1.15.1,<2.0a0']\n",
      "imageio -> numpy\n",
      "keras-applications -> numpy[version='>=1.9.1']\n",
      "tensorboard -> numpy[version='>=1.12|>=1.12.0|>=1.16']\n",
      "mkl_fft -> numpy[version='>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0']\n",
      "scikit-learn -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.16.6,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.9']\n",
      "matplotlib-base -> numpy[version='>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.19.4,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.16.6,<2.0a0']\n",
      "bokeh -> numpy[version='>=1.11.3|>=1.7.1']\n",
      "ibm-wsrt-py37main-main -> numpy==1.18.5[build=*]\n",
      "\n",
      "Package multidict conflicts for:\n",
      "aiohttp -> multidict[version='>=2.1.4|>=4.0,<5.0|>=4.5,<5.0|>=4.5,<7.0|>=3.0.0']\n",
      "yarl -> multidict[version='>=2.0|>=4.0']\n",
      "ibm-wsrt-py37main-main -> multidict==4.7.6[build=*]\n",
      "\n",
      "Package krb5 conflicts for:\n",
      "ibm-wsrt-py37main-main -> krb5==1.17.1[build=*]\n",
      "libpq -> krb5[version='>=1.14.2,<1.15.0a0|>=1.16,<1.17.0a0|>=1.16.1,<1.17.0a0|>=1.16.2,<1.17.0a0|>=1.16.3,<1.17.0a0|>=1.16.4,<1.17.0a0|>=1.17.1,<1.18.0a0']\n",
      "\n",
      "Package blas conflicts for:\n",
      "mkl_fft -> blas[version='*|1.0',build=mkl]\n",
      "pytorch -> blas==1.0=mkl\n",
      "mkl-service -> blas==1.0=mkl\n",
      "mkl_random -> blas[version='*|1.0',build=mkl]\n",
      "ibm-wsrt-py37main-main -> blas==1.0[build=*]\n",
      "scikit-learn -> blas[version='*|*|1.1|1.0|1.0',build='mkl|mkl|openblas|openblas']\n",
      "scipy -> blas[version='*|*|1.0|1.1|1.0',build='mkl|mkl|openblas|openblas|openblas']\n",
      "numexpr -> blas[version='*|*|1.0|1.0',build='mkl|mkl|openblas|openblas']\n",
      "numpy -> blas[version='*|*|1.1|1.0|1.0',build='mkl|mkl|openblas|openblas']\n",
      "numpy-base -> blas[version='*|*|1.0|1.0',build='mkl|mkl|openblas|openblas']\n",
      "\n",
      "Package xz conflicts for:\n",
      "gst-plugins-base -> xz[version='>=5.2.3,<6.0a0|>=5.2.4,<5.3.0a0']\n",
      "libtiff -> xz[version='5.0.*|5.2.*|>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0|>=5.2.3,<6.0a0']\n",
      "libxml2 -> xz[version='5.0.*|5.2.*|>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0|>=5.2.3,<6.0a0']\n",
      "gstreamer -> xz[version='>=5.2.3,<6.0a0|>=5.2.4,<5.3.0a0']\n",
      "python=3.7 -> xz[version='>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0']\n",
      "ibm-wsrt-py37main-main -> xz==5.2.5[build=*]\n",
      "zstd -> xz[version='>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0']\n",
      "\n",
      "Package sqlite conflicts for:\n",
      "qt -> sqlite[version='>=3.20.1,<4.0a0|>=3.22.0,<4.0a0|>=3.23.1,<4.0a0|>=3.24.0,<4.0a0|>=3.25.3,<4.0a0|>=3.26.0,<4.0a0|>=3.28.0,<4.0a0|>=3.29.0,<4.0a0|>=3.30.1,<4.0a0|>=3.33.0,<4.0a0|>=3.34.0,<4.0a0']\n",
      "python=3.7 -> sqlite[version='>=3.24.0,<4.0a0|>=3.25.1,<4.0a0|>=3.25.2,<4.0a0|>=3.25.3,<4.0a0|>=3.26.0,<4.0a0|>=3.28.0,<4.0a0|>=3.30.1,<4.0a0|>=3.32.3,<4.0a0|>=3.33.0,<4.0a0|>=3.34.0,<4.0a0|>=3.31.1,<4.0a0|>=3.29.0,<4.0a0|>=3.27.2,<4.0a0']\n",
      "ibm-wsrt-py37main-main -> sqlite==3.33.0[build=*]\n",
      "\n",
      "Package libiconv conflicts for:\n",
      "unixodbc -> libiconv[version='>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "glib -> libiconv[version='1.15|>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "libxml2 -> libiconv[version='1.15|>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "fontconfig -> libiconv[version='1.15|>=1.15,<1.17.0a0']\n",
      "\n",
      "Package tk conflicts for:\n",
      "matplotlib -> tk[version='8.5.*|8.6.*|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "ibm-wsrt-py37main-main -> tk==8.6.10[build=*]\n",
      "matplotlib-base -> tk[version='>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0']\n",
      "python=3.7 -> tk[version='>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "krb5 -> tk[version='8.6.*|>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "pillow -> tk[version='8.6.*|>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "\n",
      "Package backports.functools_lru_cache conflicts for:\n",
      "matplotlib -> backports.functools_lru_cache\n",
      "matplotlib-base -> backports.functools_lru_cache\n",
      "wcwidth -> backports.functools_lru_cache\n",
      "soupsieve -> backports.functools_lru_cache\n",
      "\n",
      "Package pyasn1 conflicts for:\n",
      "google-auth -> pyasn1[version='>=0.1.7,<1dev']\n",
      "rsa -> pyasn1[version='>=0.1.3']\n",
      "ibm-wsrt-py37main-main -> pyasn1==0.4.8[build=*]\n",
      "pyasn1-modules -> pyasn1[version='0.3.3|>=0.3.4,<0.4.0|>=0.4.1,<0.5.0|>=0.4.6,<0.5.0|>=0.1.8']\n",
      "\n",
      "Package notebook conflicts for:\n",
      "widgetsnbextension -> notebook[version='>=4.2.0|>=4.4.1']\n",
      "jupyterlab_server -> notebook[version='>=4.2.0']\n",
      "arcgis=1.6.0 -> notebook\n",
      "ibm-wsrt-py37main-main -> notebook==6.0.3[build=*]\n",
      "jupyterlab -> notebook[version='>=4.2|>=4.3|>=4.3.1']\n",
      "ipywidgets -> notebook\n",
      "\n",
      "Package readline conflicts for:\n",
      "ibm-wsrt-py37main-main -> readline==8.0[build=*]\n",
      "freetds -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "libpq -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "python=3.7 -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "sqlite -> readline[version='6.2.*|7.0|7.0.*|>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "\n",
      "Package certifi conflicts for:\n",
      "urllib3 -> certifi\n",
      "ibm-wsrt-py37main-main -> certifi==2020.12.5[build=*]\n",
      "matplotlib-base -> certifi[version='>=2020.06.20']\n",
      "setuptools -> certifi[version='>=2016.09|>=2016.9.26']\n",
      "tornado -> certifi\n",
      "\n",
      "Package pcre conflicts for:\n",
      "glib -> pcre[version='>=8.41,<9.0a0|>=8.43,<9.0a0|>=8.44,<9.0a0|>=8.42,<9.0a0']\n",
      "gstreamer -> pcre[version='>=8.41,<9.0a0|>=8.43,<9.0a0|>=8.42,<9.0a0']\n",
      "ibm-wsrt-py37main-main -> pcre==8.44[build=*]\n",
      "\n",
      "Package more-itertools conflicts for:\n",
      "ibm-wsrt-py37main-main -> more-itertools==8.4.0[build=*]\n",
      "zipp -> more-itertools\n",
      "pytest -> more-itertools[version='>=4.0,<6.0|>=4.0|>=4.0.0']\n",
      "\n",
      "Package jupyter_core conflicts for:\n",
      "nbformat -> jupyter_core\n",
      "notebook -> jupyter_core[version='>=4.4.0|>=4.6.0|>=4.6.1']\n",
      "jupyter_client -> jupyter_core[version='>=4.6.0']\n",
      "jupyterlab -> jupyter_core\n",
      "nbconvert -> jupyter_core\n",
      "ibm-wsrt-py37main-main -> jupyter_core==4.6.3[build=*]\n",
      "\n",
      "Package html5lib conflicts for:\n",
      "ibm-wsrt-py37main-main -> html5lib==1.1.0[build=*]\n",
      "tensorboard -> html5lib[version='0.9999999|>=0.9999999,<0.10000000.0a0']\n",
      "bleach -> html5lib[version='>=0.999,!=0.9999,!=0.99999,<0.99999999|>=0.99999999|>=0.99999999pre,!=1.0b1,!=1.0b2,!=1.0b3,!=1.0b4,!=1.0b5,!=1.0b6,!=1.0b7,!=1.0b8']\n",
      "\n",
      "Package ld_impl_linux-64 conflicts for:\n",
      "ibm-wsrt-py37main-main -> ld_impl_linux-64==2.33.1[build=*]\n",
      "python=3.7 -> ld_impl_linux-64[version='>=2.34']\n",
      "\n",
      "Package libglib conflicts for:\n",
      "glib -> libglib[version='2.64.6|2.66.1|2.66.2|2.66.2|2.66.3|2.66.3|2.66.4',build='hbe7bbb4_0|h164308a_0|hf9edacf_0|hdb14261_1|hf9edacf_1|h164308a_1|h748fe8e_1|hdb14261_0|h748fe8e_0|h1f3bc88_1|hbe7bbb4_0|h0dae87d_0|h0dae87d_1|h0dae87d_0']\n",
      "qt -> libglib[version='>=2.66.4,<3.0a0']\n",
      "dbus -> libglib[version='>=2.64.6,<3.0a0']\n",
      "gstreamer -> libglib[version='>=2.64.6,<3.0a0']\n",
      "gst-plugins-base -> libglib[version='>=2.64.6,<3.0a0']\n",
      "\n",
      "Package google-auth conflicts for:\n",
      "google-auth-oauthlib -> google-auth\n",
      "ibm-wsrt-py37main-main -> google-auth==1.22.0[build=*]\n",
      "tensorboard -> google-auth[version='>=1.6.3,<2']\n",
      "\n",
      "Package libopenblas conflicts for:\n",
      "scipy -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "numpy-base -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "numexpr -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "scikit-learn -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.3,<1.0a0']\n",
      "numpy -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "\n",
      "Package libxcb conflicts for:\n",
      "qt -> libxcb[version='>=1.12,<2.0a0|>=1.13,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> libxcb==1.14[build=*]\n",
      "gst-plugins-base -> libxcb[version='>=1.12,<2.0a0|>=1.13,<2.0a0']\n",
      "\n",
      "Package networkx conflicts for:\n",
      "scikit-image -> networkx[version='>=1.8,<2.0|>=1.8|>=2.0']\n",
      "ibm-wsrt-py37main-main -> networkx==2.4[build=*]\n",
      "\n",
      "Package werkzeug conflicts for:\n",
      "ibm-wsrt-py37main-main -> werkzeug==1.0.1[build=*]\n",
      "tensorflow-base -> werkzeug[version='>=0.14.1,<1.0a0']\n",
      "tensorboard -> werkzeug[version='>=0.11.10|>=0.11.15|>=0.14']\n",
      "\n",
      "Package numpy-base conflicts for:\n",
      "numpy -> numpy-base[version='1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.4|1.14.4|1.14.4|1.14.4|1.14.4|1.14.4|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.3|1.15.3|1.15.3|1.15.3|1.15.3|1.15.3|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.2|1.16.2|1.16.2|1.16.2|1.16.2|1.16.2|1.16.3|1.16.3|1.16.3|1.16.3|1.16.3|1.16.3|1.16.4|1.16.4|1.16.4|1.16.4|1.16.4|1.16.4|1.16.5|1.16.5|1.16.5|1.16.5|1.16.5|1.16.5|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.17.2.*|1.17.3.*|1.17.4.*|1.18.1.*|1.18.5.*|1.19.1|1.19.1|1.19.1|1.19.1|1.19.1|1.19.1|1.19.2|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|>=1.9.3,<2.0a0',build='py36h2b20989_6|py27hdbf6ddf_6|py27hdbf6ddf_7|py27h2b20989_7|py36hdbf6ddf_7|py37h2b20989_7|py27h2b20989_7|py36h2b20989_7|py27hdbf6ddf_7|py36hdbf6ddf_7|py36hdbf6ddf_8|py36h2b20989_8|py37hdbf6ddf_8|py37h2b20989_8|py27hdbf6ddf_8|py35hdbf6ddf_8|py27h7cdd4dd_9|py37h7cdd4dd_9|py37h3dfced4_9|py36h3dfced4_9|py35h3dfced4_9|py37h74e8950_9|py36h74e8950_9|py27h81de0dd_9|py36h74e8950_10|py37h81de0dd_10|py36h81de0dd_10|py35h81de0dd_10|py37h2f8d375_10|py36h2f8d375_10|py27h2f8d375_10|py36h2f8d375_11|py37hde5b4d6_12|py38h2f8d375_12|py35h9be14a7_1|py27h2b20989_0|py36h2b20989_0|py35h2b20989_0|py35hdbf6ddf_0|py35hdbf6ddf_0|py27hdbf6ddf_1|py36h2b20989_2|py27hdbf6ddf_2|py36hdbf6ddf_2|py27hdbf6ddf_3|py27h2b20989_4|py27hdbf6ddf_4|py36h2b20989_4|py36hdbf6ddf_4|py35h2b20989_4|py37h2f8d375_4|py27h2f8d375_4|py37h81de0dd_4|py36h81de0dd_4|py38h2f8d375_4|py38hde5b4d6_4|py36h2f8d375_5|py37h2f8d375_5|py27h2f8d375_5|py27hde5b4d6_5|py36hde5b4d6_5|py36h7cdd4dd_0|py37h7cdd4dd_0|py35h3dfced4_0|py36h74e8950_0|py37h74e8950_0|py36h81de0dd_0|py37h81de0dd_0|py35h81de0dd_0|py27h2f8d375_0|py36h2f8d375_0|py37h81de0dd_0|py36h2f8d375_0|py36h81de0dd_0|py36h2f8d375_1|py27h2f8d375_1|py36h2f8d375_0|py27h81de0dd_0|py36h81de0dd_0|py37h81de0dd_0|py36h2f8d375_0|py36h81de0dd_0|py37hde5b4d6_0|py36h2f8d375_0|py36h2f8d375_1|py37hde5b4d6_1|py27hde5b4d6_1|py27h2f8d375_0|py36h2f8d375_0|py37hde5b4d6_0|py27h2f8d375_1|py37h2f8d375_1|py36h2f8d375_1|py37hde5b4d6_1|py27hde5b4d6_1|py36h2f8d375_0|py37hde5b4d6_0|py27hde5b4d6_0|py36h2f8d375_0|py37hde5b4d6_0|py27hde5b4d6_0|py36h2f8d375_0|py37hde5b4d6_0|py36h2f8d375_0|py36h2f8d375_0|py37hde5b4d6_0|py38hde5b4d6_0|py39hfb011de_1|py38hfa32c7d_0|py36h75fe3a5_0|py38h75fe3a5_0|py36h75fe3a5_0|py39h0f7b65f_0|py39h2ae0177_0|py38hfa32c7d_0|py36hfa32c7d_0|py37h75fe3a5_0|py37hfa32c7d_0|py37h75fe3a5_0|py36hfa32c7d_0|py38h75fe3a5_0|py37hfa32c7d_0|py39h76555f2_1|py27hde5b4d6_0|py27h2f8d375_0|py38h2f8d375_0|py36hde5b4d6_0|py37h2f8d375_0|py36hde5b4d6_0|py37hde5b4d6_0|py27hde5b4d6_0|py37h2f8d375_0|py27h2f8d375_0|py36hde5b4d6_0|py27hde5b4d6_0|py37h2f8d375_0|py27h2f8d375_0|py36hde5b4d6_0|py37h2f8d375_0|py27h2f8d375_0|py36hde5b4d6_0|py27h2f8d375_0|py37h2f8d375_0|py36hde5b4d6_1|py27hde5b4d6_0|py36hde5b4d6_0|py37h2f8d375_0|py36hde5b4d6_1|py27h2f8d375_1|py37h2f8d375_1|py36hde5b4d6_0|py27hde5b4d6_0|py37hde5b4d6_0|py37h2f8d375_0|py27h2f8d375_0|py36hde5b4d6_0|py27hde5b4d6_0|py27h81de0dd_0|py37h81de0dd_0|py27h2f8d375_0|py37h2f8d375_0|py37h2f8d375_0|py27h2f8d375_0|py37h2f8d375_1|py37h81de0dd_1|py36h81de0dd_1|py27h81de0dd_1|py35h2f8d375_0|py35h81de0dd_0|py27h81de0dd_0|py27h2f8d375_0|py37h2f8d375_0|py37h2f8d375_0|py35h2f8d375_0|py27h81de0dd_0|py27h74e8950_0|py35h74e8950_0|py37h3dfced4_0|py36h3dfced4_0|py27h3dfced4_0|py35h7cdd4dd_0|py27h7cdd4dd_0|py37hde5b4d6_5|py35h81de0dd_4|py36h2f8d375_4|py27h81de0dd_4|py35h2f8d375_4|py35hdbf6ddf_4|py37hdbf6ddf_4|py37h2b20989_4|py27h2b20989_3|py36hdbf6ddf_3|py37hdbf6ddf_3|py37h2b20989_3|py36h2b20989_3|py37hdbf6ddf_2|py37h2b20989_2|py27h2b20989_2|py27h2b20989_1|py37hdbf6ddf_1|py36hdbf6ddf_1|py37h2b20989_1|py36h2b20989_1|py27hdbf6ddf_0|py36hdbf6ddf_0|py27h2b20989_0|py36h2b20989_0|py36hdbf6ddf_0|py27hdbf6ddf_0|py27h9be14a7_1|py36h9be14a7_1|py35h0ea5e3f_1|py27h0ea5e3f_1|py36h0ea5e3f_1|py38hde5b4d6_12|py36hde5b4d6_12|py27hde5b4d6_12|py36h2f8d375_12|py27h2f8d375_12|py37h2f8d375_12|py27hde5b4d6_11|py37hde5b4d6_11|py36hde5b4d6_11|py27h2f8d375_11|py37h2f8d375_11|py35h2f8d375_10|py27h81de0dd_10|py27h74e8950_10|py35h74e8950_10|py37h74e8950_10|py35h81de0dd_9|py35h74e8950_9|py27h74e8950_9|py37h81de0dd_9|py36h81de0dd_9|py27h3dfced4_9|py35h7cdd4dd_9|py36h7cdd4dd_9|py35h2b20989_8|py27h2b20989_8|py37hdbf6ddf_7|py37h2b20989_7|py37hdbf6ddf_7|py35h2b20989_7|py35hdbf6ddf_7|py36h2b20989_7|py36hdbf6ddf_6|py37hdbf6ddf_6|py37h2b20989_6|py27h2b20989_6']\n",
      "mkl_fft -> numpy-base[version='>=1.0.6,<2.0a0']\n",
      "mkl_random -> numpy-base[version='>=1.0.2,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> numpy-base==1.18.5[build=*]\n",
      "numexpr -> numpy-base[version='>=1.17.3,<2.0a0']\n",
      "\n",
      "Package cudatoolkit conflicts for:\n",
      "tensorflow-base -> cudatoolkit[version='8.0.*|9.0.*|9.2.*|>=10.0.130,<10.1.0a0|>=10.1.243,<10.2.0a0|>=10.1.168,<10.2.0a0|>=9.2,<9.3.0a0|>=9.0,<9.1.0a0']\n",
      "py-xgboost -> cudatoolkit[version='8.0.*|>=10.0.130,<10.1.0a0|>=9.0,<9.1.0a0|>=9.2,<9.3.0a0|9.0.*|9.2.*']\n",
      "libxgboost -> cudatoolkit[version='8.0.*|>=10.0.130,<10.1.0a0|>=9.0,<9.1.0a0|>=9.2,<9.3.0a0|9.0.*|9.2.*']\n",
      "pytorch -> cudatoolkit[version='10.0.*|10.0|10.0.*|10.2|10.2.*|10.1|10.1.*|9.2|9.2.*|>=10.1.243,<10.2.0a0|>=9.2,<9.3.0a0|>=10.0.130,<10.1.0a0|9.2.*|>=9.0,<9.1.0a0|>=8.0,<8.1.0a0|9.0.*|8.0.*|7.5.*']\n",
      "\n",
      "Package markdown conflicts for:\n",
      "tensorboard -> markdown[version='>=2.6.11|>=2.6.8']\n",
      "tensorflow-base -> markdown[version='>=2.6.11']\n",
      "ibm-wsrt-py37main-main -> markdown==3.1.1[build=*]\n",
      "\n",
      "Package liblapack conflicts for:\n",
      "numpy -> liblapack[version='>=3.8.0,<4.0.0a0|>=3.8.0,<4.0a0']\n",
      "scipy -> liblapack[version='>=3.8.0,<4.0.0a0|>=3.8.0,<4.0a0']\n",
      "blas -> liblapack[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_h6e990d7_netlib|0_openblas|1_h6e990d7_netlib|3_openblas|4_openblas|4_mkl|5_h6e990d7_netlib|6_openblas|6_h6e990d7_netlib|7_openblas|7_mkl|8_mkl|9_mkl|10_mkl|11_mkl|11_h86c2bf4_netlib|15_openblas|16_openblas|*netlib|16_mkl|18_mkl|19_mkl|20_mkl|21_mkl|17_openblas|15_mkl|14_mkl|14_openblas|13_mkl|13_openblas|12_mkl|12_openblas|11_openblas|10_h86c2bf4_netlib|10_openblas|9_openblas|8_h6e990d7_netlib|8_openblas|7_h6e990d7_netlib|6_mkl|5_mkl|5_openblas|4_h6e990d7_netlib|*netlib|2_openblas']\n",
      "\n",
      "Package decorator conflicts for:\n",
      "ipython -> decorator\n",
      "ibm-wsrt-py37main-main -> decorator==4.4.2[build=*]\n",
      "networkx -> decorator[version='>=3.4.0|>=4.3.0|>=4.1.0']\n",
      "plotly -> decorator[version='>=4.0.6']\n",
      "traitlets -> decorator\n",
      "\n",
      "Package expat conflicts for:\n",
      "ibm-wsrt-py37main-main -> expat==2.2.9[build=*]\n",
      "qt -> expat[version='>=2.2.5,<2.3.0a0|>=2.2.9,<2.3.0a0|>=2.2.6,<3.0a0|>=2.2.5,<3.0a0']\n",
      "dbus -> expat[version='>=2.2.10,<3.0a0|>=2.2.5,<2.3.0a0|>=2.2.9,<2.3.0a0|>=2.2.6,<3.0a0|>=2.2.5,<3.0a0']\n",
      "\n",
      "Package jmespath conflicts for:\n",
      "boto3 -> jmespath[version='>=0.7.1,<1.0.0']\n",
      "botocore -> jmespath[version='>=0.7.1,<1.0.0']\n",
      "ibm-wsrt-py37main-main -> jmespath==0.9.4[build=*]\n",
      "\n",
      "Package pip conflicts for:\n",
      "ibm-wsrt-py37main-main -> pip==20.1.1[build=*]\n",
      "python=3.7 -> pip\n",
      "\n",
      "Package pillow conflicts for:\n",
      "scikit-image -> pillow[version='>=1.7.8|>=2.1.0|>=4.3.0']\n",
      "imageio -> pillow\n",
      "ibm-wsrt-py37main-main -> pillow==7.2.0[build=*]\n",
      "matplotlib-base -> pillow[version='>=6.2.0']\n",
      "bokeh -> pillow[version='>=4.0|>=7.1.0']\n",
      "\n",
      "Package lz4-c conflicts for:\n",
      "blosc -> lz4-c[version='>=1.8.1.2,<1.9.0a0|>=1.9.2,<1.10.0a0']\n",
      "ibm-wsrt-py37main-main -> lz4-c==1.9.2[build=*]\n",
      "zstd -> lz4-c[version='>=1.8.1.2,<1.8.2.0a0|>=1.8.3,<1.8.4.0a0|>=1.9.2,<1.9.3.0a0|>=1.9.2,<1.10.0a0']\n",
      "\n",
      "Package retrying conflicts for:\n",
      "ibm-wsrt-py37main-main -> retrying==1.3.3[build=*]\n",
      "plotly -> retrying[version='>=1.3.3']\n",
      "\n",
      "Package libxslt conflicts for:\n",
      "lxml -> libxslt[version='>=1.1.32,<2.0a0|>=1.1.33,<2.0a0|>=1.1.34,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> libxslt==1.1.34[build=*]\n",
      "\n",
      "Package unixodbc conflicts for:\n",
      "pyodbc -> unixodbc[version='2.3.4.*|2.3.4|>=2.3.5,<2.4.0a0|>=2.3.7,<2.4.0a0|>=2.3.9,<2.4.0a0|>=2.3.6,<2.4.0a0']\n",
      "ibm-wsrt-py37main-main -> unixodbc==2.3.7[build=*]\n",
      "freetds -> unixodbc[version='>=2.3.5,<2.4.0a0|>=2.3.7,<2.4.0a0|>=2.3.6,<2.4.0a0']\n",
      "\n",
      "Package termcolor conflicts for:\n",
      "ibm-wsrt-py37main-main -> termcolor==1.1.0[build=*]\n",
      "tensorflow-estimator -> termcolor[version='>=1.1.0']\n",
      "tensorflow-base -> termcolor[version='>=1.1.0|>=1.1.0,<2.0a0']\n",
      "\n",
      "Package pyzmq conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyzmq==19.0.1[build=*]\n",
      "jupyter_client -> pyzmq[version='>=13']\n",
      "notebook -> pyzmq[version='>=17']\n",
      "\n",
      "Package zstd conflicts for:\n",
      "ibm-wsrt-py37main-main -> zstd==1.4.4[build=*]\n",
      "libtiff -> zstd[version='>=1.3.3,<1.3.4.0a0|>=1.4.0,<1.5.0.0a0|>=1.4.3,<1.5.0.0a0|>=1.4.4,<1.5.0.0a0|>=1.4.5,<1.5.0a0|>=1.4|>=1.4.4,<1.5.0a0|>=1.3.7,<1.3.8.0a0']\n",
      "blosc -> zstd[version='>=1.3.7,<1.3.8.0a0|>=1.4.4,<1.5.0a0|>=1.4.5,<1.4.6.0a0']\n",
      "\n",
      "Package ipython_genutils conflicts for:\n",
      "traitlets -> ipython_genutils\n",
      "notebook -> ipython_genutils\n",
      "nbformat -> ipython_genutils\n",
      "ibm-wsrt-py37main-main -> ipython_genutils==0.2.0[build=*]\n",
      "\n",
      "Package libpng conflicts for:\n",
      "freetype -> libpng[version='1.6.*|>=1.6.21,<1.7|>=1.6.22,<1.6.31|>=1.6.32,<1.6.35|>=1.6.34,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.28,<1.7|>=1.6.23,<1.7|>=1.6.32,<1.7.0a0']\n",
      "fontconfig -> libpng[version='>=1.6.21,<1.7|>=1.6.22,<1.6.31|>=1.6.32,<1.6.35|>=1.6.34,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.28,<1.7|>=1.6.23,<1.7|>=1.6.32,<1.7.0a0']\n",
      "matplotlib-base -> libpng[version='>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0']\n",
      "gst-plugins-base -> libpng[version='>=1.6.37,<1.7.0a0']\n",
      "matplotlib -> libpng[version='>=1.6.23,<1.7|>=1.6.37,<1.7.0a0|>=1.6.36,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.34,<1.7.0a0|>=1.6.32,<1.7.0a0']\n",
      "tensorflow-base -> libpng[version='>=1.6.37,<1.7.0a0']\n",
      "qt -> libpng[version='>=1.6.28,<1.7|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.36,<1.7.0a0|>=1.6.34,<1.7.0a0|>=1.6.32,<1.7.0a0']\n",
      "ibm-wsrt-py37main-main -> libpng==1.6.37[build=*]\n",
      "\n",
      "Package icu conflicts for:\n",
      "libxslt -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "fontconfig -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "matplotlib -> icu[version='>=58.2,<59.0a0']\n",
      "qt -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "libxml2 -> icu[version='56.*|58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "matplotlib-base -> icu[version='>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0']\n",
      "ibm-wsrt-py37main-main -> icu==58.2[build=*]\n",
      "\n",
      "Package py conflicts for:\n",
      "pytest -> py[version='>=1.4.29|>=1.4.33|>=1.5.0|>=1.8.2']\n",
      "pyzmq -> py\n",
      "ibm-wsrt-py37main-main -> py==1.8.2[build=*]\n",
      "\n",
      "Package gettext conflicts for:\n",
      "gstreamer -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "gst-plugins-base -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "glib -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "\n",
      "Package tornado conflicts for:\n",
      "jupyterlab -> tornado[version='!=6.0.0,!=6.0.1,!=6.0.2|>=6.1']\n",
      "matplotlib-base -> tornado\n",
      "terminado -> tornado[version='>=4']\n",
      "ipykernel -> tornado[version='>=4.0|>=4.2']\n",
      "ibm-wsrt-py37main-main -> tornado==6.0.4[build=*]\n",
      "matplotlib -> tornado\n",
      "bokeh -> tornado[version='>=4.3,<4.5|>=4.3|>=5|>=5.1']\n",
      "notebook -> tornado[version='>=4|>=4,<6|>=4.1,<7|>=5.0|>=5.0,<7']\n",
      "jupyter_client -> tornado[version='>=4.1|>=4.1,<6']\n",
      "\n",
      "Package mpmath conflicts for:\n",
      "ibm-wsrt-py37main-main -> mpmath==1.1.0[build=*]\n",
      "sympy -> mpmath[version='>=0.19']\n",
      "\n",
      "Package wrapt conflicts for:\n",
      "tensorflow-base -> wrapt[version='>=1.11.1|>=1.11.2|>=1.12.1|>=1.11.2,<2.0a0']\n",
      "tensorflow-estimator -> wrapt[version='>=1.11.1']\n",
      "ibm-wsrt-py37main-main -> wrapt==1.12.1[build=*]\n",
      "\n",
      "Package libblas conflicts for:\n",
      "blas -> libblas[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_h6e990d7_netlib|0_blis|2_blis|3_blis|4_openblas|4_mkl|4_h6e990d7_netlib|5_h6e990d7_netlib|5_openblas|6_mkl|6_h6e990d7_netlib|7_blis|7_openblas|8_mkl|9_openblas|9_mkl|10_blis|11_blis|11_mkl|12_openblas|13_blis|13_openblas|13_mkl|14_mkl|15_mkl|15_openblas|16_openblas|16_blis|16_mkl|18_mkl|19_mkl|20_mkl|21_mkl|17_openblas|15_blis|14_openblas|14_blis|12_mkl|12_blis|11_h86c2bf4_netlib|11_openblas|10_h86c2bf4_netlib|10_mkl|10_openblas|9_blis|8_h6e990d7_netlib|8_openblas|8_blis|7_h6e990d7_netlib|7_mkl|6_openblas|6_blis|5_mkl|5_blis|4_blis|3_openblas|2_openblas|1_h6e990d7_netlib|0_openblas']\n",
      "pytorch -> libblas[version='*|>=3.8.0,<4.0a0',build=*_mkl]\n",
      "numpy -> libblas[version='>=3.8.0,<4.0a0']\n",
      "scipy -> libblas[version='>=3.8.0,<4.0a0']\n",
      "\n",
      "Package libcblas conflicts for:\n",
      "numpy -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "blas -> libcblas[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_h6e990d7_netlib|0_blis|2_blis|3_blis|4_openblas|4_mkl|4_h6e990d7_netlib|5_h6e990d7_netlib|5_openblas|6_mkl|6_h6e990d7_netlib|7_blis|7_openblas|8_mkl|9_openblas|9_mkl|10_blis|11_blis|11_mkl|12_openblas|13_blis|13_openblas|13_mkl|14_mkl|15_mkl|15_openblas|16_openblas|16_blis|16_mkl|18_mkl|19_mkl|20_mkl|21_mkl|17_openblas|15_blis|14_openblas|14_blis|12_mkl|12_blis|11_h86c2bf4_netlib|11_openblas|10_h86c2bf4_netlib|10_mkl|10_openblas|9_blis|8_h6e990d7_netlib|8_openblas|8_blis|7_h6e990d7_netlib|7_mkl|6_openblas|6_blis|5_mkl|5_blis|4_blis|3_openblas|2_openblas|1_h6e990d7_netlib|0_openblas']\n",
      "scikit-learn -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "scipy -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "\n",
      "Package _openmp_mutex conflicts for:\n",
      "blas -> _openmp_mutex[version='*|>=4.5',build=*_llvm]\n",
      "mkl -> _openmp_mutex[version='*|>=4.5',build=*_llvm]\n",
      "pytorch -> _openmp_mutex[version='>=4.5']\n",
      "libgcc-ng -> _openmp_mutex[version='>=4.5']\n",
      "\n",
      "Package patsy conflicts for:\n",
      "statsmodels -> patsy[version='>=0.4.0|>=0.5.1']\n",
      "seaborn -> patsy\n",
      "ibm-wsrt-py37main-main -> patsy==0.5.1[build=*]\n",
      "\n",
      "Package pluggy conflicts for:\n",
      "ibm-wsrt-py37main-main -> pluggy==0.13.1[build=*]\n",
      "pytest -> pluggy[version='>=0.12,<1.0|>=0.12,<1.0.0a1|>=0.9,!=0.10,<1.0|>=0.9|>=0.7|>=0.5,<0.7']\n",
      "\n",
      "Package pandocfilters conflicts for:\n",
      "nbconvert -> pandocfilters[version='>=1.4.1']\n",
      "ibm-wsrt-py37main-main -> pandocfilters==1.4.2[build=*]\n",
      "\n",
      "Package ninja conflicts for:\n",
      "pytorch -> ninja\n",
      "ibm-wsrt-py37main-main -> ninja==1.9.0[build=*]\n",
      "\n",
      "Package subprocess32 conflicts for:\n",
      "jupyterlab -> subprocess32\n",
      "matplotlib-base -> subprocess32\n",
      "matplotlib -> subprocess32\n",
      "\n",
      "Package entrypoints conflicts for:\n",
      "jupyter_client -> entrypoints\n",
      "nbconvert -> entrypoints[version='>=0.2.2']\n",
      "keyring -> entrypoints\n",
      "ibm-wsrt-py37main-main -> entrypoints==0.3[build=*]\n",
      "\n",
      "Package functools32 conflicts for:\n",
      "tensorflow-base -> functools32[version='>=3.2.3.2']\n",
      "jsonschema -> functools32\n",
      "matplotlib-base -> functools32\n",
      "matplotlib -> functools32\n",
      "\n",
      "Package gmp conflicts for:\n",
      "pandoc -> gmp\n",
      "ibm-wsrt-py37main-main -> gmp==6.1.2[build=*]\n",
      "\n",
      "Package requests-oauthlib conflicts for:\n",
      "google-auth-oauthlib -> requests-oauthlib[version='>=0.7.0|>=0.7.0,<1dev']\n",
      "ibm-wsrt-py37main-main -> requests-oauthlib==1.3.0[build=*]\n",
      "\n",
      "Package nbconvert conflicts for:\n",
      "notebook -> nbconvert[version='<6.0']\n",
      "ibm-wsrt-py37main-main -> nbconvert==5.6.1[build=*]\n",
      "\n",
      "Package tqdm conflicts for:\n",
      "ibm-wsrt-py37main-main -> tqdm==4.47.0[build=*]\n",
      "nltk -> tqdm\n",
      "\n",
      "Package async-timeout conflicts for:\n",
      "aiohttp -> async-timeout[version='<4.0,>=3.0|>=3.0,<4.0|>=1.2,<3.0|>=1.2.0']\n",
      "ibm-wsrt-py37main-main -> async-timeout==3.0.1[build=*]\n",
      "\n",
      "Package numexpr conflicts for:\n",
      "ibm-wsrt-py37main-main -> numexpr==2.7.1[build=*]\n",
      "pytables -> numexpr\n",
      "\n",
      "Package typing_extensions conflicts for:\n",
      "aiohttp -> typing_extensions[version='>=3.6.5']\n",
      "bokeh -> typing_extensions[version='>=3.7.4']\n",
      "ibm-wsrt-py37main-main -> typing_extensions==3.7.4.2[build=*]\n",
      "importlib-metadata -> typing_extensions[version='>=3.6.4']\n",
      "\n",
      "Package lcms2 conflicts for:\n",
      "pillow -> lcms2[version='>=2.11,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> lcms2==2.11[build=*]\n",
      "\n",
      "Package jedi conflicts for:\n",
      "ipython -> jedi[version='>=0.10|>=0.16']\n",
      "ibm-wsrt-py37main-main -> jedi==0.17.1[build=*]\n",
      "\n",
      "Package pytz conflicts for:\n",
      "ibm-wsrt-py37main-main -> pytz==2020.1[build=*]\n",
      "matplotlib -> pytz\n",
      "pandas -> pytz[version='>=2017.2']\n",
      "plotly -> pytz\n",
      "matplotlib-base -> pytz\n",
      "\n",
      "Package glib conflicts for:\n",
      "gst-plugins-base -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.58.2,<2.59.0a0|>=2.58.3,<3.0a0']\n",
      "qt -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.56.2,<3.0a0|>=2.58.3,<3.0a0']\n",
      "gstreamer -> glib[version='2.51.*|>=2.55.0,<2.56.0a0|>=2.56.2,<2.57.0a0|>=2.58.2,<2.59.0a0|>=2.58.3,<3.0a0|>=2.56.1,<3.0a0|>=2.53.6,<3.0a0']\n",
      "dbus -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.56.2,<3.0a0|>=2.58.3,<3.0a0|>=2.63.1,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> glib==2.65.0[build=*]\n",
      "\n",
      "Package pygments conflicts for:\n",
      "nbconvert -> pygments[version='>=2.4.1']\n",
      "ipython -> pygments\n",
      "prompt-toolkit -> pygments\n",
      "ibm-wsrt-py37main-main -> pygments==2.6.1[build=*]\n",
      "\n",
      "Package typing-extensions conflicts for:\n",
      "yarl -> typing-extensions[version='>=3.7.4']\n",
      "aiohttp -> typing-extensions[version='>=3.6.5']\n",
      "\n",
      "Package prometheus_client conflicts for:\n",
      "ibm-wsrt-py37main-main -> prometheus_client==0.8.0[build=*]\n",
      "notebook -> prometheus_client\n",
      "\n",
      "Package libgfortran4 conflicts for:\n",
      "libgfortran-ng -> libgfortran4=7.5.0\n",
      "blas -> libgfortran4[version='>=7.5.0']\n",
      "hdf5 -> libgfortran4[version='>=7.5.0']\n",
      "scipy -> libgfortran4[version='>=7.5.0']\n",
      "\n",
      "Package defusedxml conflicts for:\n",
      "ibm-wsrt-py37main-main -> defusedxml==0.6.0[build=*]\n",
      "nbconvert -> defusedxml\n",
      "\n",
      "Package c-ares conflicts for:\n",
      "ibm-wsrt-py37main-main -> c-ares==1.15.0[build=*]\n",
      "grpcio -> c-ares[version='>=1.14.0,<2.0a0|>=1.15.0,<2.0a0|>=1.16.1,<2.0a0|>=1.17.1,<2.0a0']\n",
      "\n",
      "Package libgfortran-ng conflicts for:\n",
      "numpy -> libgfortran-ng[version='>=4.9|>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "ibm-wsrt-py37main-main -> libgfortran-ng==7.3.0[build=*]\n",
      "blas -> libgfortran-ng[version='>=7,<8.0a0']\n",
      "scipy -> libgfortran-ng[version='>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "numpy-base -> libgfortran-ng[version='>=7,<8.0a0']\n",
      "hdf5 -> libgfortran-ng[version='>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "\n",
      "Package cffi conflicts for:\n",
      "cryptography -> cffi[version='!=1.11.3,>=1.8|>=1.8,!=1.11.3|>=1.7|>=1.8']\n",
      "pytorch -> cffi\n",
      "brotlipy -> cffi[version='>=1.0.0']\n",
      "ibm-wsrt-py37main-main -> cffi==1.14.0[build=*]\n",
      "\n",
      "Package pyparsing conflicts for:\n",
      "nltk -> pyparsing\n",
      "ibm-wsrt-py37main-main -> pyparsing==2.4.7[build=*]\n",
      "matplotlib-base -> pyparsing[version='>=2.0.3,!=2.0.4,!=2.1.2,!=2.1.6']\n",
      "packaging -> pyparsing[version='>=2.0.2']\n",
      "matplotlib -> pyparsing\n",
      "pydotplus -> pyparsing[version='>=2.0.1']\n",
      "\n",
      "Package libtiff conflicts for:\n",
      "qt -> libtiff[version='4.0.*|>=4.0.10,<5.0a0']\n",
      "ibm-wsrt-py37main-main -> libtiff==4.1.0[build=*]\n",
      "pillow -> libtiff[version='4.*|4.0.*|>=4.0.10,<5.0a0|>=4.1.0,<5.0a0|>=4.0.9,<5.0a0|>=4.0.8,<4.0.10|>=4.0.3,<4.0.8|4.0.6|>=4.0.8,<5.0a0']\n",
      "lcms2 -> libtiff[version='>=4.0.10,<5.0a0|>=4.1.0,<5.0a0']\n",
      "\n",
      "Package prompt-toolkit conflicts for:\n",
      "ibm-wsrt-py37main-main -> prompt-toolkit==3.0.5[build=*]\n",
      "ipython -> prompt-toolkit[version='!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0']\n",
      "\n",
      "Package pysocks conflicts for:\n",
      "ibm-wsrt-py37main-main -> pysocks==1.7.1[build=*]\n",
      "urllib3 -> pysocks[version='>=1.5.6,<2.0,!=1.5.7']\n",
      "\n",
      "Package jupyterlab_server conflicts for:\n",
      "ibm-wsrt-py37main-main -> jupyterlab_server==1.1.0[build=*]\n",
      "jupyterlab -> jupyterlab_server[version='>=0.2.0,<0.3.0|>=1.0.0,<2.0.0|>=1.1.0,<2.0.0|>=2.0.0,<3.0.0']\n",
      "\n",
      "Package jeepney conflicts for:\n",
      "ibm-wsrt-py37main-main -> jeepney==0.4.0[build=*]\n",
      "keyring -> jeepney[version='>=0.4.2']\n",
      "secretstorage -> jeepney[version='>=0.6']\n",
      "\n",
      "Package ipykernel conflicts for:\n",
      "ibm-wsrt-py37main-main -> ipykernel==5.3.0[build=*]\n",
      "notebook -> ipykernel\n",
      "ipywidgets -> ipykernel[version='>=4.2.2|>=4.5.1']\n",
      "widgetsnbextension -> ipykernel[version='>=4.5.1']\n",
      "\n",
      "Package toolz conflicts for:\n",
      "scikit-image -> toolz[version='>=0.7.3|>=0.7.4']\n",
      "cytoolz -> toolz[version='>=0.10.0|>=0.8.0']\n",
      "ibm-wsrt-py37main-main -> toolz==0.10.0[build=*]\n",
      "\n",
      "Package google-pasta conflicts for:\n",
      "ibm-wsrt-py37main-main -> google-pasta==0.2.0[build=*]\n",
      "tensorflow-base -> google-pasta[version='>=0.1.6|>=0.1.8|>=0.1.7|>=0.1.7,<1.0a0']\n",
      "\n",
      "Package scipy conflicts for:\n",
      "ibm-wsrt-py37main-main -> scipy==1.5.0[build=*]\n",
      "scikit-learn -> scipy\n",
      "keras-preprocessing -> scipy[version='>=0.14']\n",
      "seaborn -> scipy[version='>=0.15.2|>=1.0.1']\n",
      "tensorflow-base -> scipy[version='>=1.2.1|>=1.4.1']\n",
      "patsy -> scipy\n",
      "nltk -> scipy\n",
      "py-xgboost -> scipy\n",
      "scikit-image -> scipy[version='>=0.17|>=0.19|>=0.9']\n",
      "statsmodels -> scipy[version='>=0.14|>=1.0|>=1.2']\n",
      "\n",
      "Package pathlib2 conflicts for:\n",
      "testpath -> pathlib2\n",
      "ipython -> pathlib2\n",
      "pickleshare -> pathlib2\n",
      "importlib_metadata -> pathlib2\n",
      "importlib-metadata -> pathlib2\n",
      "pytest -> pathlib2[version='>=2.2.0']\n",
      "\n",
      "Package yarl conflicts for:\n",
      "aiohttp -> yarl[version='>=0.10.0,<0.11|>=1.0,<1.6.0|>=1.0,<2.0|>=0.11']\n",
      "ibm-wsrt-py37main-main -> yarl==1.5.1[build=*]\n",
      "\n",
      "Package pandoc conflicts for:\n",
      "nbconvert -> pandoc[version='>=1.12.1|>=1.12.1,<2.0.0']\n",
      "ibm-wsrt-py37main-main -> pandoc==2.9.2.1[build=*]\n",
      "\n",
      "Package requests conflicts for:\n",
      "tensorboard -> requests[version='>=2.21.0,<3']\n",
      "plotly -> requests\n",
      "bokeh -> requests[version='>=1.2.3']\n",
      "nltk -> requests\n",
      "ibm-wsrt-py37main-main -> requests==2.24.0[build=*]\n",
      "requests-oauthlib -> requests[version='>=2.0.0']\n",
      "jupyterlab_server -> requests\n",
      "\n",
      "Package libgfortran conflicts for:\n",
      "hdf5 -> libgfortran[version='>=3.0']\n",
      "numpy -> libgfortran[version='>=3.0']\n",
      "scipy -> libgfortran[version='>=3.0']\n",
      "\n",
      "Package gst-plugins-base conflicts for:\n",
      "qt -> gst-plugins-base[version='>=1.12.2,<1.13.0a0|>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.4,<1.15.0a0|>=1.14.0,<1.15.0a0']\n",
      "ibm-wsrt-py37main-main -> gst-plugins-base==1.14.0[build=*]\n",
      "\n",
      "Package pandas conflicts for:\n",
      "ibm-wsrt-py37main-main -> pandas==1.0.5[build=*]\n",
      "bokeh -> pandas\n",
      "seaborn -> pandas[version='>=0.14.0|>=0.22.0']\n",
      "statsmodels -> pandas[version='>=0.14|>=0.21|>=0.23']\n",
      "arcgis=1.6.0 -> pandas[version='>=0.23']\n",
      "\n",
      "Package pyshp conflicts for:\n",
      "arcgis=1.6.0 -> pyshp\n",
      "ibm-wsrt-py37main-main -> pyshp==2.1.0[build=*]\n",
      "\n",
      "Package gast conflicts for:\n",
      "tensorflow-base -> gast[version='>=0.2.0|>=0.3.3,<0.3.4.0a0|>=0.2.2,<0.2.3.0a0']\n",
      "ibm-wsrt-py37main-main -> gast==0.2.2[build=*]\n",
      "tensorflow-estimator -> gast[version='>=0.2.0']\n",
      "\n",
      "Package ipaddress conflicts for:\n",
      "cryptography -> ipaddress\n",
      "notebook -> ipaddress\n",
      "urllib3 -> ipaddress\n",
      "\n",
      "Package google-auth-oauthlib conflicts for:\n",
      "ibm-wsrt-py37main-main -> google-auth-oauthlib==0.4.1[build=*]\n",
      "tensorboard -> google-auth-oauthlib[version='0.4.1|>=0.4.1,<0.5']\n",
      "\n",
      "Package idna conflicts for:\n",
      "ibm-wsrt-py37main-main -> idna==2.9[build=*]\n",
      "yarl -> idna[version='>=2.0']\n",
      "cryptography -> idna[version='>=2.1']\n",
      "urllib3 -> idna[version='>=2.0.0']\n",
      "\n",
      "Package _py-xgboost-mutex conflicts for:\n",
      "ibm-wsrt-py37main-main -> _py-xgboost-mutex==2.0=cpu_0\n",
      "py-xgboost -> _py-xgboost-mutex[version='1.0|2.0',build='gpu_0|cpu_0']\n",
      "\n",
      "Package joblib conflicts for:\n",
      "nltk -> joblib\n",
      "ibm-wsrt-py37main-main -> joblib==0.16.0[build=*]\n",
      "scikit-learn -> joblib[version='>=0.11']\n",
      "\n",
      "Package botocore conflicts for:\n",
      "ibm-wsrt-py37main-main -> botocore==1.16.11[build=*]\n",
      "s3transfer -> botocore[version='>=1.12.36,<2.0.0|>=1.12.36,<2.0a.0|>=1.3.0,<2.0.0']\n",
      "boto3 -> botocore[version='>=1.10.0,<1.11.0|>=1.10.1,<1.11.0|>=1.10.10,<1.11.0|>=1.10.11,<1.11.0|>=1.10.12,<1.11.0|>=1.10.13,<1.11.0|>=1.10.14,<1.11.0|>=1.10.15,<1.11.0|>=1.10.16,<1.11.0|>=1.10.17,<1.11.0|>=1.10.18,<1.11.0|>=1.10.19,<1.11.0|>=1.10.20,<1.11.0|>=1.10.21,<1.11.0|>=1.10.22,<1.11.0|>=1.10.23,<1.11.0|>=1.10.24,<1.11.0|>=1.10.25,<1.11.0|>=1.10.26,<1.11.0|>=1.10.27,<1.11.0|>=1.10.28,<1.11.0|>=1.10.29,<1.11.0|>=1.10.30,<1.11.0|>=1.10.31,<1.11.0|>=1.10.32,<1.11.0|>=1.10.33,<1.11.0|>=1.10.34,<1.11.0|>=1.10.35,<1.11.0|>=1.10.36,<1.11.0|>=1.10.37,<1.11.0|>=1.10.38,<1.11.0|>=1.10.39,<1.11.0|>=1.10.40,<1.11.0|>=1.10.41,<1.11.0|>=1.10.42,<1.11.0|>=1.10.43,<1.11.0|>=1.10.44,<1.11.0|>=1.10.45,<1.11.0|>=1.10.46,<1.11.0|>=1.10.47,<1.11.0|>=1.10.48,<1.11.0|>=1.10.49,<1.11.0|>=1.10.50,<1.11.0|>=1.10.51,<1.11.0|>=1.10.52,<1.11.0|>=1.10.53,<1.11.0|>=1.10.54,<1.11.0|>=1.10.55,<1.11.0|>=1.10.56,<1.11.0|>=1.10.57,<1.11.0|>=1.10.58,<1.11.0|>=1.10.59,<1.11.0|>=1.10.60,<1.11.0|>=1.10.61,<1.11.0|>=1.10.62,<1.11.0|>=1.10.63,<1.11.0|>=1.10.64,<1.11.0|>=1.10.65,<1.11.0|>=1.10.66,<1.11.0|>=1.10.67,<1.11.0|>=1.10.68,<1.11.0|>=1.10.69,<1.11.0|>=1.10.70,<1.11.0|>=1.10.71,<1.11.0|>=1.10.72,<1.11.0|>=1.10.73,<1.11.0|>=1.10.74,<1.11.0|>=1.10.75,<1.11.0|>=1.10.76,<1.11.0|>=1.10.77,<1.11.0|>=1.10.78,<1.11.0|>=1.10.79,<1.11.0|>=1.10.80,<1.11.0|>=1.10.81,<1.11.0|>=1.10.82,<1.11.0|>=1.10.83,<1.11.0|>=1.10.84,<1.11.0|>=1.11.0,<1.12.0|>=1.11.1,<1.12.0|>=1.11.2,<1.12.0|>=1.11.3,<1.12.0|>=1.11.4,<1.12.0|>=1.11.5,<1.12.0|>=1.11.6,<1.12.0|>=1.11.7,<1.12.0|>=1.11.8,<1.12.0|>=1.11.9,<1.12.0|>=1.12.0,<1.13.0|>=1.12.1,<1.13.0|>=1.12.10,<1.13.0|>=1.12.100,<1.13.0|>=1.12.101,<1.13.0|>=1.12.102,<1.13.0|>=1.12.103,<1.13.0|>=1.12.104,<1.13.0|>=1.12.105,<1.13.0|>=1.12.106,<1.13.0|>=1.12.107,<1.13.0|>=1.12.108,<1.13.0|>=1.12.109,<1.13.0|>=1.12.110,<1.13.0|>=1.12.111,<1.13.0|>=1.12.112,<1.13.0|>=1.12.113,<1.13.0|>=1.12.114,<1.13.0|>=1.12.115,<1.13.0|>=1.12.116,<1.13.0|>=1.12.117,<1.13.0|>=1.12.118,<1.13.0|>=1.12.119,<1.13.0|>=1.12.120,<1.13.0|>=1.12.121,<1.13.0|>=1.12.122,<1.13.0|>=1.12.123,<1.13.0|>=1.12.124,<1.13.0|>=1.12.125,<1.13.0|>=1.12.126,<1.13.0|>=1.12.127,<1.13.0|>=1.12.128,<1.13.0|>=1.12.129,<1.13.0|>=1.12.130,<1.13.0|>=1.12.131,<1.13.0|>=1.12.132,<1.13.0|>=1.12.133,<1.13.0|>=1.12.134,<1.13.0|>=1.12.135,<1.13.0|>=1.12.136,<1.13.0|>=1.12.137,<1.13.0|>=1.12.138,<1.13.0|>=1.12.139,<1.13.0|>=1.12.140,<1.13.0|>=1.12.141,<1.13.0|>=1.12.142,<1.13.0|>=1.12.143,<1.13.0|>=1.12.144,<1.13.0|>=1.12.145,<1.13.0|>=1.12.146,<1.13.0|>=1.12.147,<1.13.0|>=1.12.148,<1.13.0|>=1.12.149,<1.13.0|>=1.12.150,<1.13.0|>=1.12.151,<1.13.0|>=1.12.152,<1.13.0|>=1.12.153,<1.13.0|>=1.12.154,<1.13.0|>=1.12.155,<1.13.0|>=1.12.156,<1.13.0|>=1.12.157,<1.13.0|>=1.12.158,<1.13.0|>=1.12.159,<1.13.0|>=1.12.160,<1.13.0|>=1.12.161,<1.13.0|>=1.12.162,<1.13.0|>=1.12.163,<1.13.0|>=1.12.164,<1.13.0|>=1.12.165,<1.13.0|>=1.12.166,<1.13.0|>=1.12.167,<1.13.0|>=1.12.168,<1.13.0|>=1.12.169,<1.13.0|>=1.12.170,<1.13.0|>=1.12.171,<1.13.0|>=1.12.172,<1.13.0|>=1.12.173,<1.13.0|>=1.12.174,<1.13.0|>=1.12.175,<1.13.0|>=1.12.176,<1.13.0|>=1.12.177,<1.13.0|>=1.12.178,<1.13.0|>=1.12.179,<1.13.0|>=1.12.180,<1.13.0|>=1.12.181,<1.13.0|>=1.12.182,<1.13.0|>=1.12.183,<1.13.0|>=1.12.184,<1.13.0|>=1.12.185,<1.13.0|>=1.12.186,<1.13.0|>=1.12.187,<1.13.0|>=1.12.188,<1.13.0|>=1.12.189,<1.13.0|>=1.12.190,<1.13.0|>=1.12.191,<1.13.0|>=1.12.192,<1.13.0|>=1.12.193,<1.13.0|>=1.12.194,<1.13.0|>=1.12.195,<1.13.0|>=1.12.196,<1.13.0|>=1.12.197,<1.13.0|>=1.12.198,<1.13.0|>=1.12.199,<1.13.0|>=1.12.200,<1.13.0|>=1.12.201,<1.13.0|>=1.12.202,<1.13.0|>=1.12.203,<1.13.0|>=1.12.204,<1.13.0|>=1.12.205,<1.13.0|>=1.12.206,<1.13.0|>=1.12.207,<1.13.0|>=1.12.208,<1.13.0|>=1.12.209,<1.13.0|>=1.12.210,<1.13.0|>=1.12.211,<1.13.0|>=1.12.212,<1.13.0|>=1.12.213,<1.13.0|>=1.12.214,<1.13.0|>=1.12.215,<1.13.0|>=1.12.216,<1.13.0|>=1.12.217,<1.13.0|>=1.12.218,<1.13.0|>=1.12.219,<1.13.0|>=1.12.220,<1.13.0|>=1.12.221,<1.13.0|>=1.12.222,<1.13.0|>=1.12.223,<1.13.0|>=1.12.224,<1.13.0|>=1.12.225,<1.13.0|>=1.12.226,<1.13.0|>=1.12.227,<1.13.0|>=1.12.228,<1.13.0|>=1.12.229,<1.13.0|>=1.12.230,<1.13.0|>=1.12.231,<1.13.0|>=1.12.232,<1.13.0|>=1.12.233,<1.13.0|>=1.12.234,<1.13.0|>=1.12.235,<1.13.0|>=1.12.236,<1.13.0|>=1.12.237,<1.13.0|>=1.12.238,<1.13.0|>=1.12.239,<1.13.0|>=1.12.240,<1.13.0|>=1.12.241,<1.13.0|>=1.12.242,<1.13.0|>=1.12.243,<1.13.0|>=1.12.244,<1.13.0|>=1.12.245,<1.13.0|>=1.12.246,<1.13.0|>=1.12.247,<1.13.0|>=1.12.248,<1.13.0|>=1.12.249,<1.13.0|>=1.12.250,<1.13.0|>=1.12.251,<1.13.0|>=1.12.252,<1.13.0|>=1.12.253,<1.13.0|>=1.13.0,<1.14.0|>=1.13.1,<1.14.0|>=1.13.10,<1.14.0|>=1.13.11,<1.14.0|>=1.13.12,<1.14.0|>=1.13.13,<1.14.0|>=1.13.14,<1.14.0|>=1.13.15,<1.14.0|>=1.13.16,<1.14.0|>=1.13.17,<1.14.0|>=1.13.18,<1.14.0|>=1.13.19,<1.14.0|>=1.13.20,<1.14.0|>=1.13.21,<1.14.0|>=1.13.22,<1.14.0|>=1.13.23,<1.14.0|>=1.13.24,<1.14.0|>=1.13.25,<1.14.0|>=1.13.26,<1.14.0|>=1.13.27,<1.14.0|>=1.13.28,<1.14.0|>=1.13.29,<1.14.0|>=1.13.30,<1.14.0|>=1.13.31,<1.14.0|>=1.13.32,<1.14.0|>=1.13.33,<1.14.0|>=1.13.34,<1.14.0|>=1.13.35,<1.14.0|>=1.13.36,<1.14.0|>=1.13.37,<1.14.0|>=1.13.38,<1.14.0|>=1.13.39,<1.14.0|>=1.13.40,<1.14.0|>=1.13.41,<1.14.0|>=1.13.42,<1.14.0|>=1.13.43,<1.14.0|>=1.13.44,<1.14.0|>=1.13.45,<1.14.0|>=1.13.46,<1.14.0|>=1.13.47,<1.14.0|>=1.13.48,<1.14.0|>=1.13.49,<1.14.0|>=1.13.50,<1.14.0|>=1.14.0,<1.15.0|>=1.14.1,<1.15.0|>=1.14.10,<1.15.0|>=1.14.11,<1.15.0|>=1.14.12,<1.15.0|>=1.14.13,<1.15.0|>=1.14.14,<1.15.0|>=1.14.15,<1.15.0|>=1.14.16,<1.15.0|>=1.14.17,<1.15.0|>=1.15.0,<1.16.0|>=1.15.1,<1.16.0|>=1.15.10,<1.16.0|>=1.15.11,<1.16.0|>=1.15.12,<1.16.0|>=1.15.13,<1.16.0|>=1.15.14,<1.16.0|>=1.15.15,<1.16.0|>=1.15.16,<1.16.0|>=1.15.17,<1.16.0|>=1.15.18,<1.16.0|>=1.15.19,<1.16.0|>=1.15.20,<1.16.0|>=1.15.21,<1.16.0|>=1.15.22,<1.16.0|>=1.15.23,<1.16.0|>=1.15.24,<1.16.0|>=1.15.25,<1.16.0|>=1.15.26,<1.16.0|>=1.15.27,<1.16.0|>=1.15.28,<1.16.0|>=1.15.29,<1.16.0|>=1.15.30,<1.16.0|>=1.15.31,<1.16.0|>=1.15.32,<1.16.0|>=1.15.33,<1.16.0|>=1.15.34,<1.16.0|>=1.15.35,<1.16.0|>=1.15.36,<1.16.0|>=1.15.37,<1.16.0|>=1.15.38,<1.16.0|>=1.15.39,<1.16.0|>=1.15.40,<1.16.0|>=1.15.41,<1.16.0|>=1.15.42,<1.16.0|>=1.15.43,<1.16.0|>=1.15.44,<1.16.0|>=1.15.45,<1.16.0|>=1.15.46,<1.16.0|>=1.15.47,<1.16.0|>=1.15.48,<1.16.0|>=1.15.49,<1.16.0|>=1.16.0,<1.17.0|>=1.16.1,<1.17.0|>=1.16.10,<1.17.0|>=1.16.11,<1.17.0|>=1.16.12,<1.17.0|>=1.16.13,<1.17.0|>=1.16.14,<1.17.0|>=1.16.15,<1.17.0|>=1.16.16,<1.17.0|>=1.16.17,<1.17.0|>=1.16.18,<1.17.0|>=1.16.19,<1.17.0|>=1.16.20,<1.17.0|>=1.16.21,<1.17.0|>=1.16.22,<1.17.0|>=1.16.23,<1.17.0|>=1.16.24,<1.17.0|>=1.16.25,<1.17.0|>=1.16.26,<1.17.0|>=1.17.0,<1.18.0|>=1.17.1,<1.18.0|>=1.17.10,<1.18.0|>=1.17.11,<1.18.0|>=1.17.12,<1.18.0|>=1.17.13,<1.18.0|>=1.17.14,<1.18.0|>=1.17.15,<1.18.0|>=1.17.16,<1.18.0|>=1.17.17,<1.18.0|>=1.17.18,<1.18.0|>=1.17.19,<1.18.0|>=1.17.20,<1.18.0|>=1.17.21,<1.18.0|>=1.17.22,<1.18.0|>=1.17.23,<1.18.0|>=1.17.24,<1.18.0|>=1.17.25,<1.18.0|>=1.17.26,<1.18.0|>=1.17.27,<1.18.0|>=1.17.28,<1.18.0|>=1.17.29,<1.18.0|>=1.17.30,<1.18.0|>=1.17.31,<1.18.0|>=1.17.32,<1.18.0|>=1.17.33,<1.18.0|>=1.17.34,<1.18.0|>=1.17.35,<1.18.0|>=1.17.36,<1.18.0|>=1.17.37,<1.18.0|>=1.17.38,<1.18.0|>=1.17.39,<1.18.0|>=1.17.40,<1.18.0|>=1.17.41,<1.18.0|>=1.17.42,<1.18.0|>=1.17.43,<1.18.0|>=1.17.44,<1.18.0|>=1.17.45,<1.18.0|>=1.17.46,<1.18.0|>=1.17.47,<1.18.0|>=1.17.48,<1.18.0|>=1.17.49,<1.18.0|>=1.17.50,<1.18.0|>=1.17.51,<1.18.0|>=1.17.52,<1.18.0|>=1.17.53,<1.18.0|>=1.17.54,<1.18.0|>=1.17.55,<1.18.0|>=1.17.56,<1.18.0|>=1.17.57,<1.18.0|>=1.17.58,<1.18.0|>=1.17.59,<1.18.0|>=1.17.60,<1.18.0|>=1.17.61,<1.18.0|>=1.17.62,<1.18.0|>=1.17.63,<1.18.0|>=1.18.0,<1.19.0|>=1.18.1,<1.19.0|>=1.18.10,<1.19.0|>=1.18.11,<1.19.0|>=1.18.12,<1.19.0|>=1.18.13,<1.19.0|>=1.18.14,<1.19.0|>=1.18.15,<1.19.0|>=1.18.16,<1.19.0|>=1.18.17,<1.19.0|>=1.18.18,<1.19.0|>=1.19.0,<1.20.0|>=1.19.1,<1.20.0|>=1.19.10,<1.20.0|>=1.19.11,<1.20.0|>=1.19.12,<1.20.0|>=1.19.13,<1.20.0|>=1.19.14,<1.20.0|>=1.19.15,<1.20.0|>=1.19.16,<1.20.0|>=1.19.17,<1.20.0|>=1.19.18,<1.20.0|>=1.19.19,<1.20.0|>=1.19.20,<1.20.0|>=1.19.21,<1.20.0|>=1.19.22,<1.20.0|>=1.19.23,<1.20.0|>=1.19.24,<1.20.0|>=1.19.25,<1.20.0|>=1.19.26,<1.20.0|>=1.19.27,<1.20.0|>=1.19.28,<1.20.0|>=1.19.29,<1.20.0|>=1.19.30,<1.20.0|>=1.19.31,<1.20.0|>=1.19.32,<1.20.0|>=1.19.33,<1.20.0|>=1.19.34,<1.20.0|>=1.19.35,<1.20.0|>=1.19.36,<1.20.0|>=1.19.37,<1.20.0|>=1.19.38,<1.20.0|>=1.19.39,<1.20.0|>=1.19.40,<1.20.0|>=1.19.41,<1.20.0|>=1.19.42,<1.20.0|>=1.19.43,<1.20.0|>=1.19.9,<1.20.0|>=1.19.8,<1.20.0|>=1.19.7,<1.20.0|>=1.19.6,<1.20.0|>=1.19.5,<1.20.0|>=1.19.4,<1.20.0|>=1.19.3,<1.20.0|>=1.19.2,<1.20.0|>=1.18.9,<1.19.0|>=1.18.8,<1.19.0|>=1.18.7,<1.19.0|>=1.18.6,<1.19.0|>=1.18.5,<1.19.0|>=1.18.4,<1.19.0|>=1.18.3,<1.19.0|>=1.18.2,<1.19.0|>=1.17.9,<1.18.0|>=1.17.8,<1.18.0|>=1.17.7,<1.18.0|>=1.17.6,<1.18.0|>=1.17.5,<1.18.0|>=1.17.4,<1.18.0|>=1.17.3,<1.18.0|>=1.17.2,<1.18.0|>=1.16.9,<1.17.0|>=1.16.8,<1.17.0|>=1.16.7,<1.17.0|>=1.16.6,<1.17.0|>=1.16.5,<1.17.0|>=1.16.4,<1.17.0|>=1.16.3,<1.17.0|>=1.16.2,<1.17.0|>=1.15.9,<1.16.0|>=1.15.8,<1.16.0|>=1.15.7,<1.16.0|>=1.15.6,<1.16.0|>=1.15.5,<1.16.0|>=1.15.4,<1.16.0|>=1.15.3,<1.16.0|>=1.15.2,<1.16.0|>=1.14.9,<1.15.0|>=1.14.8,<1.15.0|>=1.14.7,<1.15.0|>=1.14.6,<1.15.0|>=1.14.5,<1.15.0|>=1.14.4,<1.15.0|>=1.14.3,<1.15.0|>=1.14.2,<1.15.0|>=1.13.9,<1.14.0|>=1.13.8,<1.14.0|>=1.13.7,<1.14.0|>=1.13.6,<1.14.0|>=1.13.5,<1.14.0|>=1.13.4,<1.14.0|>=1.13.3,<1.14.0|>=1.13.2,<1.14.0|>=1.12.99,<1.13.0|>=1.12.98,<1.13.0|>=1.12.97,<1.13.0|>=1.12.96,<1.13.0|>=1.12.95,<1.13.0|>=1.12.94,<1.13.0|>=1.12.93,<1.13.0|>=1.12.92,<1.13.0|>=1.12.91,<1.13.0|>=1.12.90,<1.13.0|>=1.12.89,<1.13.0|>=1.12.88,<1.13.0|>=1.12.87,<1.13.0|>=1.12.86,<1.13.0|>=1.12.85,<1.13.0|>=1.12.84,<1.13.0|>=1.12.83,<1.13.0|>=1.12.82,<1.13.0|>=1.12.81,<1.13.0|>=1.12.80,<1.13.0|>=1.12.79,<1.13.0|>=1.12.78,<1.13.0|>=1.12.77,<1.13.0|>=1.12.76,<1.13.0|>=1.12.75,<1.13.0|>=1.12.74,<1.13.0|>=1.12.73,<1.13.0|>=1.12.72,<1.13.0|>=1.12.71,<1.13.0|>=1.12.70,<1.13.0|>=1.12.69,<1.13.0|>=1.12.68,<1.13.0|>=1.12.67,<1.13.0|>=1.12.66,<1.13.0|>=1.12.65,<1.13.0|>=1.12.64,<1.13.0|>=1.12.63,<1.13.0|>=1.12.62,<1.13.0|>=1.12.61,<1.13.0|>=1.12.60,<1.13.0|>=1.12.59,<1.13.0|>=1.12.58,<1.13.0|>=1.12.57,<1.13.0|>=1.12.56,<1.13.0|>=1.12.55,<1.13.0|>=1.12.54,<1.13.0|>=1.12.53,<1.13.0|>=1.12.52,<1.13.0|>=1.12.51,<1.13.0|>=1.12.50,<1.13.0|>=1.12.49,<1.13.0|>=1.12.48,<1.13.0|>=1.12.47,<1.13.0|>=1.12.46,<1.13.0|>=1.12.45,<1.13.0|>=1.12.44,<1.13.0|>=1.12.43,<1.13.0|>=1.12.42,<1.13.0|>=1.12.41,<1.13.0|>=1.12.40,<1.13.0|>=1.12.39,<1.13.0|>=1.12.38,<1.13.0|>=1.12.37,<1.13.0|>=1.12.36,<1.13.0|>=1.12.35,<1.13.0|>=1.12.34,<1.13.0|>=1.12.33,<1.13.0|>=1.12.32,<1.13.0|>=1.12.31,<1.13.0|>=1.12.30,<1.13.0|>=1.12.29,<1.13.0|>=1.12.28,<1.13.0|>=1.12.27,<1.13.0|>=1.12.26,<1.13.0|>=1.12.25,<1.13.0|>=1.12.24,<1.13.0|>=1.12.23,<1.13.0|>=1.12.22,<1.13.0|>=1.12.21,<1.13.0|>=1.12.20,<1.13.0|>=1.12.19,<1.13.0|>=1.12.18,<1.13.0|>=1.12.17,<1.13.0|>=1.12.16,<1.13.0|>=1.12.15,<1.13.0|>=1.12.14,<1.13.0|>=1.12.13,<1.13.0|>=1.12.12,<1.13.0|>=1.12.11,<1.13.0|>=1.12.9,<1.13.0|>=1.12.8,<1.13.0|>=1.12.7,<1.13.0|>=1.12.6,<1.13.0|>=1.12.5,<1.13.0|>=1.12.4,<1.13.0|>=1.12.3,<1.13.0|>=1.12.2,<1.13.0|>=1.10.9,<1.11.0|>=1.10.8,<1.11.0|>=1.10.7,<1.11.0|>=1.10.6,<1.11.0|>=1.10.5,<1.11.0|>=1.10.4,<1.11.0|>=1.10.3,<1.11.0|>=1.10.2,<1.11.0|>=1.9.23,<1.10.0|>=1.9.22,<1.10.0|>=1.9.21,<1.10.0|>=1.9.20,<1.10.0|>=1.9.19,<1.10.0|>=1.9.18,<1.10.0|>=1.9.17,<1.10.0|>=1.9.16,<1.10.0|>=1.9.15,<1.10.0|>=1.9.14,<1.10.0|>=1.9.13,<1.10.0|>=1.9.12,<1.10.0|>=1.9.11,<1.10.0|>=1.9.10,<1.10.0|>=1.9.9,<1.10.0|>=1.9.8,<1.10.0|>=1.9.7,<1.10.0|>=1.9.6,<1.10.0|>=1.9.5,<1.10.0|>=1.9.4,<1.10.0|>=1.9.3,<1.10.0|>=1.9.2,<1.10.0|>=1.9.1,<1.10.0|>=1.9.0,<1.10.0|>=1.8.50,<1.9.0|>=1.8.49,<1.9.0|>=1.8.48,<1.9.0|>=1.8.47,<1.9.0|>=1.8.46,<1.9.0|>=1.8.45,<1.9.0|>=1.8.44,<1.9.0|>=1.8.43,<1.9.0|>=1.8.42,<1.9.0|>=1.8.41,<1.9.0|>=1.8.40,<1.9.0|>=1.8.39,<1.9.0|>=1.8.38,<1.9.0|>=1.8.37,<1.9.0|>=1.8.36,<1.9.0|>=1.8.32,<1.9.0|>=1.8.28,<1.9.0|>=1.5.0,<1.6.0|>=1.4.1,<1.5.0|>=1.8.0,<1.9.0|>=1.7.0,<1.8.0']\n",
      "\n",
      "Package importlib_metadata conflicts for:\n",
      "jsonschema -> importlib_metadata\n",
      "pytest -> importlib_metadata[version='>=0.12']\n",
      "ibm-wsrt-py37main-main -> importlib_metadata==1.6.1[build=*]\n",
      "keyring -> importlib_metadata[version='>=1']\n",
      "pluggy -> importlib_metadata[version='>=0.12|>=0.9']\n",
      "\n",
      "Package yaml conflicts for:\n",
      "pyyaml -> yaml[version='>=0.1.7,<0.2.0a0|>=0.2.2,<0.3.0a0|>=0.2.5,<0.3.0a0']\n",
      "ibm-wsrt-py37main-main -> yaml==0.2.5[build=*]\n",
      "\n",
      "Package mkl_fft conflicts for:\n",
      "ibm-wsrt-py37main-main -> mkl_fft==1.1.0[build=*]\n",
      "numpy -> mkl_fft[version='>=1.0.4|>=1.0.6,<2.0a0']\n",
      "\n",
      "Package pexpect conflicts for:\n",
      "ipython -> pexpect[version='>4.3']\n",
      "ibm-wsrt-py37main-main -> pexpect==4.8.0[build=*]\n",
      "\n",
      "Package wheel conflicts for:\n",
      "pip -> wheel\n",
      "ibm-wsrt-py37main-main -> wheel==0.34.2[build=*]\n",
      "tensorboard -> wheel[version='>=0.26']\n",
      "\n",
      "Package mistune conflicts for:\n",
      "nbconvert -> mistune[version='>0.6|>=0.7.4|>=0.8.1']\n",
      "ibm-wsrt-py37main-main -> mistune==0.8.4[build=*]\n",
      "\n",
      "Package futures conflicts for:\n",
      "tensorboard -> futures[version='>=3.1.1']\n",
      "tornado -> futures\n",
      "jupyterlab -> futures\n",
      "bokeh -> futures[version='>=3.0.3']\n",
      "grpcio -> futures[version='>=2.2.0']\n",
      "imageio -> futures\n",
      "s3transfer -> futures[version='>=2.2.0,<4.0.0']\n",
      "\n",
      "Package attrs conflicts for:\n",
      "ibm-wsrt-py37main-main -> attrs==19.3.0[build=*]\n",
      "pytest -> attrs[version='>=17.2.0|>=17.4.0,<=19.1.0|>=17.4.0|>=19.2.0']\n",
      "aiohttp -> attrs[version='>=17.3.0|>=17.4.0']\n",
      "jsonschema -> attrs[version='>=17.4.0']\n",
      "\n",
      "Package keras conflicts for:\n",
      "keras-applications -> keras[version='>=2.1.6']\n",
      "keras-preprocessing -> keras[version='>=2.1.6']\n",
      "\n",
      "Package libgcc conflicts for:\n",
      "pyqt -> libgcc\n",
      "pytorch -> libgcc\n",
      "scipy -> libgcc\n",
      "\n",
      "Package send2trash conflicts for:\n",
      "notebook -> send2trash\n",
      "ibm-wsrt-py37main-main -> send2trash==1.5.0[build=*]\n",
      "\n",
      "Package blosc conflicts for:\n",
      "ibm-wsrt-py37main-main -> blosc==1.19.0[build=*]\n",
      "pytables -> blosc[version='>=1.14.3,<2.0a0|>=1.14.4,<2.0a0|>=1.15.0,<2.0a0|>=1.16.3,<2.0a0|>=1.17.0,<2.0a0|>=1.18.1,<2.0a0|>=1.20.1,<2.0a0']\n",
      "\n",
      "Package importlib-metadata conflicts for:\n",
      "markdown -> importlib-metadata\n",
      "importlib_metadata -> importlib-metadata[version='>=1.1.3,<1.1.4.0a0|>=1.5.0,<1.5.1.0a0|>=1.5.2,<1.5.3.0a0|>=1.6.0,<1.6.1.0a0|>=1.6.1,<1.6.2.0a0|>=1.7.0,<1.7.1.0a0|>=2.0.0,<2.0.1.0a0|>=3.0.0,<3.0.1.0a0|>=3.1.0,<3.1.1.0a0|>=3.1.1,<3.1.2.0a0|>=3.3.0,<3.3.1.0a0']\n",
      "ibm-wsrt-py37main-main -> importlib-metadata==1.6.1[build=*]\n",
      "keyring -> importlib-metadata\n",
      "pytest -> importlib-metadata[version='>=0.12']\n",
      "\n",
      "Package wcwidth conflicts for:\n",
      "pytest -> wcwidth\n",
      "prompt-toolkit -> wcwidth\n",
      "ibm-wsrt-py37main-main -> wcwidth==0.2.4[build=*]\n",
      "\n",
      "Package mock conflicts for:\n",
      "ibm-wsrt-py37main-main -> mock==4.0.2[build=*]\n",
      "tensorflow-base -> mock[version='>=2.0.0|>=2.0.0,<3.0a0']\n",
      "tensorflow-estimator -> mock[version='>=2.0.0']\n",
      "pytables -> mock\n",
      "\n",
      "Package parso conflicts for:\n",
      "jedi -> parso[version='0.1.0|>=0.1.0,<0.2|>=0.2.0,<0.8.0|>=0.3.0,<0.8.0|>=0.5.0,<0.8.0|>=0.5.2,<0.8.0|>=0.7.0,<0.8.0|>=0.7.0|>=0.5.2|>=0.5.0|>=0.3.0|>=0.2.0']\n",
      "ibm-wsrt-py37main-main -> parso==0.7.0[build=*]\n",
      "\n",
      "Package aiohttp conflicts for:\n",
      "google-auth -> aiohttp[version='>=3.6.2,<4.0.0dev']\n",
      "ibm-wsrt-py37main-main -> aiohttp==3.6.2[build=*]\n",
      "\n",
      "Package scikit-learn conflicts for:\n",
      "py-xgboost -> scikit-learn\n",
      "ibm-wsrt-py37main-main -> scikit-learn==0.23.1[build=*]\n",
      "nltk -> scikit-learn\n",
      "\n",
      "Package singledispatch conflicts for:\n",
      "tornado -> singledispatch\n",
      "nltk -> singledispatch\n",
      "\n",
      "Package pywavelets conflicts for:\n",
      "ibm-wsrt-py37main-main -> pywavelets==1.1.1[build=*]\n",
      "scikit-image -> pywavelets[version='>=0.4.0']\n",
      "\n",
      "Package keyring conflicts for:\n",
      "ibm-wsrt-py37main-main -> keyring==18.0.0[build=*]\n",
      "arcgis=1.6.0 -> keyring\n",
      "\n",
      "Package tensorflow-base conflicts for:\n",
      "ibm-wsrt-py37main-main -> tensorflow-base==2.1.0[build=*]\n",
      "tensorflow-estimator -> tensorflow-base[version='>=1.14.0,<1.15.0a0|>=1.15.0,<1.16.0a0|>=2.0.0,<2.1.0a0|>=2.1.0,<2.2.0a0|>=2.2.0,<2.3.0a0|>=2.3.0,<2.4.0a0']\n",
      "\n",
      "Package absl-py conflicts for:\n",
      "tensorboard -> absl-py[version='>=0.4|>=0.8.0|>=0.7']\n",
      "tensorflow-estimator -> absl-py[version='>=0.1.6|>=0.7.0']\n",
      "tensorflow-base -> absl-py[version='>=0.1.6|>=0.7.0|>=0.7.1|>=0.8.1|>=0.7.1,<1.0a0']\n",
      "ibm-wsrt-py37main-main -> absl-py==0.9.0[build=*]\n",
      "\n",
      "Package fastcache conflicts for:\n",
      "ibm-wsrt-py37main-main -> fastcache==1.1.0[build=*]\n",
      "sympy -> fastcache\n",
      "\n",
      "Package zipp conflicts for:\n",
      "importlib-metadata -> zipp[version='>=0.5']\n",
      "importlib_metadata -> zipp[version='>=0.3.2|>=0.5']\n",
      "ibm-wsrt-py37main-main -> zipp==3.1.0[build=*]\n",
      "\n",
      "Package jsonschema conflicts for:\n",
      "nbformat -> jsonschema[version='>=2.0,!=2.5.0|>=2.4,!=2.5.0']\n",
      "jupyterlab_server -> jsonschema[version='>=3.0.1']\n",
      "ibm-wsrt-py37main-main -> jsonschema==3.2.0[build=*]\n",
      "\n",
      "Package libpq conflicts for:\n",
      "psycopg2 -> libpq[version='>=10.3,<11.0a0|>=10.5,<11.0a0|>=10.6,<11.0a0|>=11.2,<12.0a0|>=11.3,<12.0a0|>=11.5,<12.0a0|>=12.1,<13.0a0|>=12.2,<13.0a0|>=12.3,<13.0a0|>=11.1,<12.0a0|>=9.6.6']\n",
      "qt -> libpq[version='>=12.3,<13.0a0']\n",
      "ibm-wsrt-py37main-main -> libpq==12.2[build=*]\n",
      "\n",
      "Package _libgcc_mutex conflicts for:\n",
      "libgcc-ng -> _libgcc_mutex[version='*|0.1',build='main|conda_forge']\n",
      "ibm-wsrt-py37main-main -> _libgcc_mutex==0.1[build=*]\n",
      "\n",
      "Package funcsigs conflicts for:\n",
      "mock -> funcsigs\n",
      "pytest -> funcsigs[version='>=1.0']\n",
      "\n",
      "Package secretstorage conflicts for:\n",
      "ibm-wsrt-py37main-main -> secretstorage==3.1.0[build=*]\n",
      "keyring -> secretstorage[version='>=3|>=3.2']\n",
      "\n",
      "Package pyrsistent conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyrsistent==0.16.0[build=*]\n",
      "jsonschema -> pyrsistent[version='>=0.14.0']\n",
      "\n",
      "Package ptyprocess conflicts for:\n",
      "ibm-wsrt-py37main-main -> ptyprocess==0.6.0[build=*]\n",
      "terminado -> ptyprocess\n",
      "pexpect -> ptyprocess[version='>=0.5']\n",
      "\n",
      "Package jinja2 conflicts for:\n",
      "ibm-wsrt-py37main-main -> jinja2==2.11.2[build=*]\n",
      "bokeh -> jinja2[version='>=2.7']\n",
      "jupyterlab -> jinja2[version='>=2.10']\n",
      "jupyterlab_server -> jinja2[version='>2.10*|>=2.10']\n",
      "nbconvert -> jinja2[version='>=2.4']\n",
      "notebook -> jinja2\n",
      "\n",
      "Package gmpy2 conflicts for:\n",
      "sympy -> gmpy2[version='>=2.0.8']\n",
      "mpmath -> gmpy2\n",
      "\n",
      "Package rsa conflicts for:\n",
      "google-auth -> rsa[version='>=3.1.4,<4.1|>=3.1.4,<5|>=3.1.4,<4dev']\n",
      "ibm-wsrt-py37main-main -> rsa==4.6[build=*]\n",
      "\n",
      "Package terminado conflicts for:\n",
      "ibm-wsrt-py37main-main -> terminado==0.8.3[build=*]\n",
      "notebook -> terminado[version='>=0.3.3|>=0.8.1|>=0.8.3']\n",
      "\n",
      "Package hdf5 conflicts for:\n",
      "pytables -> hdf5[version='1.10.1.*|1.10.1|>=1.10.3,<1.10.4.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.6,<1.10.7.0a0|>=1.10.2,<1.10.3.0a0|1.8.18|1.8.18.*|1.8.17|1.8.17.*|>=1.8.20,<1.9.0a0|>=1.8.18,<1.8.19.0a0|>=1.10.1,<1.10.2.0a0']\n",
      "h5py -> hdf5[version='1.10.1|1.10.1.*|1.10.2.*|>=1.10.3,<1.10.4.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.6,<1.10.7.0a0|>=1.10.2,<1.10.3.0a0|1.8.18|1.8.18.*|1.8.17|1.8.17.*|1.8.17.*|1.8.15.*|>=1.8.20,<1.9.0a0|>=1.8.18,<1.8.19.0a0|>=1.10.1,<1.10.2.0a0',build='mpi_openmpi_*|mpi_openmpi_*|mpi_mpich_*|mpi_mpich_*|mpi_openmpi_*|mpi_mpich_*']\n",
      "ibm-wsrt-py37main-main -> hdf5==1.10.4[build=*]\n",
      "\n",
      "Package pyqt conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyqt==5.9.2[build=*]\n",
      "matplotlib -> pyqt[version='4.11.*|>=5.12.3,<5.13.0a0|>=5.6.0,<5.7.0a0|>=5.9.2,<5.10.0a0|5.9.*|>=5.6,<6.0a0|5.*|5.6.*']\n",
      "\n",
      "Package click conflicts for:\n",
      "nltk -> click\n",
      "google-auth-oauthlib -> click\n",
      "ibm-wsrt-py37main-main -> click==7.1.2[build=*]\n",
      "\n",
      "Package oauthlib conflicts for:\n",
      "requests-oauthlib -> oauthlib[version='>=0.6.2|>=3.0.0|>=2.1.0,<3.0.0']\n",
      "ibm-wsrt-py37main-main -> oauthlib==3.1.0[build=*]\n",
      "\n",
      "Package bleach conflicts for:\n",
      "tensorboard -> bleach[version='1.5.0|>=1.5.0,<1.5.1.0a0']\n",
      "ibm-wsrt-py37main-main -> bleach==3.1.5[build=*]\n",
      "nbconvert -> bleach\n",
      "\n",
      "Package backports.weakref conflicts for:\n",
      "tensorflow-base -> backports.weakref[version='>=1.0.0inf.1,<2.0a0|>=1.0|>=1.0rc1']\n",
      "tensorflow-estimator -> backports.weakref[version='>=1.0rc1']\n",
      "\n",
      "Package olefile conflicts for:\n",
      "ibm-wsrt-py37main-main -> olefile==0.46[build=*]\n",
      "pillow -> olefile\n",
      "\n",
      "Package pycparser conflicts for:\n",
      "ibm-wsrt-py37main-main -> pycparser==2.20[build=*]\n",
      "cffi -> pycparser\n",
      "\n",
      "Package pyjwt conflicts for:\n",
      "oauthlib -> pyjwt[version='>=1.0.0']\n",
      "ibm-wsrt-py37main-main -> pyjwt==1.7.1[build=*]\n",
      "\n",
      "Package threadpoolctl conflicts for:\n",
      "ibm-wsrt-py37main-main -> threadpoolctl==2.1.0[build=*]\n",
      "scikit-learn -> threadpoolctl\n",
      "\n",
      "Package cachetools conflicts for:\n",
      "google-auth -> cachetools[version='>=2.0.0,<3.2|>=2.0.0,<5.0|>=2.0.0,<3dev']\n",
      "ibm-wsrt-py37main-main -> cachetools==4.1.1[build=*]\n",
      "\n",
      "Package chardet conflicts for:\n",
      "ibm-wsrt-py37main-main -> chardet==3.0.4[build=*]\n",
      "aiohttp -> chardet[version='>=2.0,<4.0']\n",
      "\n",
      "Package _pytorch_select conflicts for:\n",
      "ibm-wsrt-py37main-main -> _pytorch_select==0.1[build=*]\n",
      "pytorch -> _pytorch_select[version='0.1|0.2']\n",
      "\n",
      "Package lzo conflicts for:\n",
      "ibm-wsrt-py37main-main -> lzo==2.10[build=*]\n",
      "pytables -> lzo[version='2.*|>=2.10,<3.0a0|2.06']\n",
      "\n",
      "Package statsmodels conflicts for:\n",
      "ibm-wsrt-py37main-main -> statsmodels==0.11.1[build=*]\n",
      "seaborn -> statsmodels[version='>=0.5.0|>=0.8.0']\n",
      "\n",
      "Package blinker conflicts for:\n",
      "oauthlib -> blinker\n",
      "ibm-wsrt-py37main-main -> blinker==1.4[build=*]\n",
      "\n",
      "Package grpcio conflicts for:\n",
      "tensorboard -> grpcio[version='>=1.14|>=1.24.3|>=1.6.3']\n",
      "tensorflow-base -> grpcio[version='>=1.14.1,<2.0a0|>=1.14.1|>=1.16.1|>=1.8.6']\n",
      "ibm-wsrt-py37main-main -> grpcio==1.27.2[build=*]\n",
      "tensorflow-estimator -> grpcio[version='>=1.8.6']\n",
      "\n",
      "Package pickleshare conflicts for:\n",
      "ibm-wsrt-py37main-main -> pickleshare==0.7.5[build=*]\n",
      "ipython -> pickleshare\n",
      "\n",
      "Package intel-openmp conflicts for:\n",
      "mkl -> intel-openmp\n",
      "ibm-wsrt-py37main-main -> intel-openmp==2020.1[build=*]\n",
      "\n",
      "Package configparser conflicts for:\n",
      "importlib-metadata -> configparser[version='>=3.5']\n",
      "entrypoints -> configparser[version='>=3.5']\n",
      "importlib_metadata -> configparser[version='>=3.5']\n",
      "\n",
      "Package libuuid conflicts for:\n",
      "fontconfig -> libuuid[version='>=1.0.3,<2.0a0|>=2.32.1,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> libuuid==1.0.3[build=*]\n",
      "\n",
      "Package cycler conflicts for:\n",
      "matplotlib-base -> cycler[version='>=0.10']\n",
      "ibm-wsrt-py37main-main -> cycler==0.10.0[build=*]\n",
      "matplotlib -> cycler[version='>=0.10']\n",
      "\n",
      "Package kiwisolver conflicts for:\n",
      "matplotlib-base -> kiwisolver[version='>=1.0.1']\n",
      "ibm-wsrt-py37main-main -> kiwisolver==1.2.0[build=*]\n",
      "matplotlib -> kiwisolver\n",
      "\n",
      "Package libsodium conflicts for:\n",
      "zeromq -> libsodium[version='>=1.0.16,<1.0.17.0a0|>=1.0.17,<1.0.18.0a0|>=1.0.18,<1.0.19.0a0']\n",
      "pyzmq -> libsodium[version='>=1.0.16,<1.0.17.0a0|>=1.0.17,<1.0.18.0a0|>=1.0.18,<1.0.19.0a0']\n",
      "ibm-wsrt-py37main-main -> libsodium==1.0.18[build=*]\n",
      "\n",
      "Package cudnn conflicts for:\n",
      "tensorflow-base -> cudnn[version='>=7.0.0,<=8.0a0|>=7.1.0,<=8.0a0|>=7.2.0,<=8.0a0|>=7.3.1,<8.0a0|>=7.6,<8.0a0|>=7.6.5,<8.0a0|>=7.6.0,<8.0a0|>=7.6.4,<8.0a0|>=7.1.2,<=8.0a0|>=7.0.5,<=8.0a0']\n",
      "pytorch -> cudnn[version='5.1.*|6.0.*|>=7.0.0,<=8.0a0|>=7.0.5,<=8.0a0|>=7.1.0,<=8.0a0|>=7.1.3,<8.0a0|>=7.3.0,<=8.0a0|>=7.6,<8.0a0|>=7.6.5,<8.0a0|>=7.6.4,<8.0a0|>=7.3.1,<8.0a0|>=7.1.2,<=8.0a0']\n",
      "\n",
      "Package soupsieve conflicts for:\n",
      "ibm-wsrt-py37main-main -> soupsieve==2.0.1[build=*]\n",
      "beautifulsoup4 -> soupsieve[version='>=1.2']\n",
      "\n",
      "Package astor conflicts for:\n",
      "ibm-wsrt-py37main-main -> astor==0.8.0[build=*]\n",
      "tensorflow-base -> astor[version='>=0.6.0|>=0.6.2|>=0.6.2,<1.0a0']\n",
      "tensorflow-estimator -> astor[version='>=0.6.0']\n",
      "\n",
      "Package imageio conflicts for:\n",
      "ibm-wsrt-py37main-main -> imageio==2.9.0[build=*]\n",
      "scikit-image -> imageio[version='>=2.1.0|>=2.3.0']\n",
      "\n",
      "Package zeromq conflicts for:\n",
      "pyzmq -> zeromq[version='4.1.*|4.2.1|>=4.2.3,<4.3|>=4.2.5,<4.3|>=4.2.5,<4.3.0a0|>=4.3.1,<4.4.0a0|>=4.3.2,<4.4.0a0|>=4.3.3,<4.4.0a0|>=4.2.5,<4.2.6.0a0|4.2.*']\n",
      "ibm-wsrt-py37main-main -> zeromq==4.3.2[build=*]\n",
      "\n",
      "Package cytoolz conflicts for:\n",
      "ibm-wsrt-py37main-main -> cytoolz==0.10.1[build=*]\n",
      "scikit-image -> cytoolz[version='>=0.7.3']\n",
      "\n",
      "Package cloudpickle conflicts for:\n",
      "scikit-image -> cloudpickle[version='>=0.2.1']\n",
      "ibm-wsrt-py37main-main -> cloudpickle==1.5.0[build=*]\n",
      "\n",
      "Package pyyaml conflicts for:\n",
      "bokeh -> pyyaml[version='>=3.10']\n",
      "ibm-wsrt-py37main-main -> pyyaml==5.3.1[build=*]\n",
      "dask-core -> pyyaml\n",
      "\n",
      "Package llvm-openmp conflicts for:\n",
      "blas -> llvm-openmp[version='>=10.0.0|>=11.0.0|>=9.0.1']\n",
      "mkl -> llvm-openmp[version='>=10.0.0|>=11.0.0|>=9.0.1']\n",
      "\n",
      "Package mkl_random conflicts for:\n",
      "ibm-wsrt-py37main-main -> mkl_random==1.1.1[build=*]\n",
      "numpy -> mkl_random[version='>=1.0.2,<2.0a0']\n",
      "\n",
      "Package keras-applications conflicts for:\n",
      "ibm-wsrt-py37main-main -> keras-applications==1.0.8[build=*]\n",
      "tensorflow-base -> keras-applications[version='>=1.0.5|>=1.0.6|>=1.0.8|>=1.0.8,<2.0a0']\n",
      "\n",
      "Package markupsafe conflicts for:\n",
      "ibm-wsrt-py37main-main -> markupsafe==1.1.1[build=*]\n",
      "jinja2 -> markupsafe[version='>=0.23']\n",
      "\n",
      "Package docutils conflicts for:\n",
      "ibm-wsrt-py37main-main -> docutils==0.15.2[build=*]\n",
      "botocore -> docutils[version='>=0.10|>=0.10,<0.15|>=0.10,<0.16']\n",
      "\n",
      "Package typing conflicts for:\n",
      "pytorch -> typing\n",
      "typing_extensions -> typing[version='>=3.6.2|>=3.7.4']\n",
      "\n",
      "Package widgetsnbextension conflicts for:\n",
      "arcgis=1.6.0 -> widgetsnbextension[version='>=3']\n",
      "ipywidgets -> widgetsnbextension[version='>=1.2.2|>=1.2.3|>=1.2.6|>=1.2.6,<2|>=2.0.0|>=2.0.0,<3.0.0|>=3.0.0|>=3.0.0,<3.1.0|>=3.1.0,<3.2.0|>=3.2.0,<3.3.0|>=3.3.0,<3.4.0|>=3.4.0,<3.5.0|>=3.5.0,<3.6.0|>=3.2.0,<4.0.0|>=3.1.0,<4.0.0|>=3.0.0,<4.0.0|>=3.1.0,<4.0']\n",
      "ibm-wsrt-py37main-main -> widgetsnbextension==3.5.1[build=*]\n",
      "\n",
      "Package qt conflicts for:\n",
      "ibm-wsrt-py37main-main -> qt==5.9.7[build=*]\n",
      "pyqt -> qt[version='4.8.*|5.6.*|5.9.*|>=5.12.5,<5.13.0a0|>=5.12.9,<5.13.0a0|>=5.9.7,<5.10.0a0|>=5.6.2,<5.7.0a0|>=4.8.6,<5.0|>=5.9.6,<5.10.0a0|>=5.9.4,<5.10.0a0|>=5.6.3,<5.7.0a0']\n",
      "\n",
      "Package s3transfer conflicts for:\n",
      "ibm-wsrt-py37main-main -> s3transfer==0.3.3[build=*]\n",
      "boto3 -> s3transfer[version='>=0.1.0,<0.2.0|>=0.1.10,<0.2.0|>=0.2.0,<0.3.0|>=0.3.0,<0.4.0']\n",
      "\n",
      "Package jupyter_server conflicts for:\n",
      "jupyterlab -> jupyter_server[version='>=1.1.0,<2.0.0']\n",
      "jupyterlab_server -> jupyter_server[version='>=1.1.0,<2.0.0']\n",
      "\n",
      "Package snappy conflicts for:\n",
      "blosc -> snappy[version='1.1.6|>=1.1.8,<2.0a0|>=1.1.7,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> snappy==1.1.8[build=*]\n",
      "\n",
      "Package testpath conflicts for:\n",
      "nbconvert -> testpath\n",
      "ibm-wsrt-py37main-main -> testpath==0.4.4[build=*]\n",
      "\n",
      "Package dask-core conflicts for:\n",
      "ibm-wsrt-py37main-main -> dask-core==2.20.0[build=*]\n",
      "scikit-image -> dask-core[version='>=0.15|>=0.15.0|>=0.9.0']\n",
      "\n",
      "Package pyasn1-modules conflicts for:\n",
      "google-auth -> pyasn1-modules[version='>=0.0.5,<1dev|>=0.2.1']\n",
      "ibm-wsrt-py37main-main -> pyasn1-modules==0.2.8[build=*]\n",
      "\n",
      "Package opt_einsum conflicts for:\n",
      "ibm-wsrt-py37main-main -> opt_einsum==3.1.0[build=*]\n",
      "tensorflow-base -> opt_einsum[version='>=2.3.2,<3.0a0|>=2.3.2|>=3.1.0|>=3.1.0,<4.0a0']\n",
      "\n",
      "Package tensorboard conflicts for:\n",
      "ibm-wsrt-py37main-main -> tensorboard==2.1.0[build=*]\n",
      "tensorflow-base -> tensorboard[version='>=1.13.0,<1.14.0a0|>=1.14.0,<1.15.0a0']\n",
      "\n",
      "Package h5py conflicts for:\n",
      "keras-applications -> h5py\n",
      "tensorflow-base -> h5py[version='>=2.10.0,<2.11.0a0']\n",
      "ibm-wsrt-py37main-main -> h5py==2.10.0[build=*]\n",
      "\n",
      "Package freetds conflicts for:\n",
      "ibm-wsrt-py37main-main -> freetds==1.00.97[build=*]\n",
      "pymssql -> freetds[version='>=1.0.91,<2.0a0|>=1.0.97,<2.0a0']\n",
      "\n",
      "Package ca-certificates conflicts for:\n",
      "ibm-wsrt-py37main-main -> ca-certificates==2020.10.14[build=*]\n",
      "openssl -> ca-certificates\n",
      "\n",
      "Package pytest conflicts for:\n",
      "ibm-wsrt-py37main-main -> pytest==5.4.3[build=*]\n",
      "astropy -> pytest[version='<3.7|<4']\n",
      "\n",
      "Package backcall conflicts for:\n",
      "ibm-wsrt-py37main-main -> backcall==0.2.0[build=*]\n",
      "ipython -> backcall\n",
      "Note that strict channel priority may have removed packages required for satisfiability.\n",
      "\n",
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.\n",
      "Collecting package metadata (repodata.json): done\n",
      "Solving environment: failed with initial frozen solve. Retrying with flexible solve.\n",
      "Solving environment: \\ \n",
      "Found conflicts! Looking for incompatible packages.\n",
      "This can take several minutes.  Press CTRL-C to abort.\n",
      "                                                                                                               \\failed\n",
      "\n",
      "UnsatisfiableError: The following specifications were found\n",
      "to be incompatible with the existing python installation in your environment:\n",
      "\n",
      "Specifications:\n",
      "\n",
      "  - cffi -> python[version='2.7.*|3.5.*|3.6.*|3.6.12|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.9,<3.10.0a0|>=3.8,<3.9.0a0|3.6.9|3.6.9|3.6.9|>=2.7,<2.8.0a0|3.6.9|>=3.5,<3.6.0a0|3.4.*',build='4_73_pypy|3_73_pypy|2_73_pypy|1_73_pypy|0_73_pypy']\n",
      "  - rsa -> python[version='2.7.*|3.4.*|3.5.*|3.6.*']\n",
      "\n",
      "Your python: python=3.7\n",
      "\n",
      "If python is on the left-most side of the chain, that's the version you've asked for.\n",
      "When python appears to the right, that indicates that the thing on the left is somehow\n",
      "not available for the python version you are constrained to. Note that conda will not\n",
      "change your python version to a different minor version unless you explicitly specify\n",
      "that.\n",
      "\n",
      "The following specifications were found to be incompatible with each other:\n",
      "\n",
      "Output in format: Requested package -> Available versions\n",
      "\n",
      "Package numpy conflicts for:\n",
      "h5py -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.8,<1.14|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "opt_einsum -> numpy\n",
      "statsmodels -> numpy[version='1.10.*|1.11.*|>=1.11|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.17.5,<2.0a0|>=1.9.3,<2.0a0|>=1.17.0,<2.0a0|>=1.19.1,<2.0a0|>=1.11.3,<2.0a0']\n",
      "biopython -> numpy[version='1.11.*|1.12.*|1.13.*|>=1.8|>=1.11.3,<2.0a0|>=1.9.3,<2.0a0|>=1.14.1,<2.0a0']\n",
      "tensorboard -> numpy[version='>=1.12|>=1.12.0|>=1.16']\n",
      "py-xgboost -> numpy\n",
      "astropy -> numpy[version='1.11.*|1.12.*|1.13.*|>=1.10|>=1.11|>=1.13|>=1.14|>=1.16.5,<2.0a0|>=1.16|>=1.19.4,<2.0a0|>=1.19|>=1.17|>=1.9|>=1.16.6,<2.0a0|>=1.19.2,<2.0a0|>=1.17.0,<2.0a0|>=1.17.4,<2.0a0|>=1.13.3,<2.0a0|>=1.14.6,<2.0a0|>=1.11.3,<2.0a0|>=1.10.4,<2.0a0|>=1.9.3,<2.0a0|>=1.14.1,<2.0a0|>=1.14.0,<2.0a0']\n",
      "pandas -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.*|>=1.12.1,<2.0a0|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.18.4,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.9.*|>=1.9|>=1.8|>=1.7|>=1.16.6,<2.0a0|>=1.13.3,<2.0a0|>=1.11.3,<2.0a0']\n",
      "nltk -> numpy\n",
      "pytables -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "matplotlib-base -> numpy[version='>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.15.4,<2.0a0|>=1.16.5,<2.0a0|>=1.19.4,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.16.6,<2.0a0']\n",
      "numexpr -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0|>=1.16.4,<2.0a0|>=1.15.4,<2.0a0']\n",
      "pywavelets -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.8|>=1.16.6,<2.0a0|>=1.11.3,<2.0a0']\n",
      "mkl_random -> numpy[version='>=1.11.3,<2.0a0|>=1.11|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.9.3,<2.0a0|>=1.14,<2.0a0']\n",
      "patsy -> numpy[version='>=1.4.0']\n",
      "ibm-wsrt-py37main-main -> numpy==1.18.5[build=*]\n",
      "mkl-service -> numpy[version='>=1.11.3,<2.0a0']\n",
      "scikit-image -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.16.6,<2.0a0|>=1.19.4,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.13.3,<2.0a0']\n",
      "arcgis=1.6.0 -> numpy\n",
      "bokeh -> numpy[version='>=1.11.3|>=1.7.1']\n",
      "scikit-learn -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.16.6,<2.0a0|>=1.18.5,<2.0a0|>=1.19.4,<2.0a0|>=1.19.2,<2.0a0|>=1.9.3,<2.0a0|>=1.9']\n",
      "matplotlib -> numpy[version='1.10.*|1.11.*|>=1.14.6,<2.0a0']\n",
      "keras-applications -> numpy[version='>=1.9.1']\n",
      "scipy -> numpy[version='1.10.*|1.11.*|1.12.*|1.13.*|>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.18.5,<2.0a0|>=1.19.2,<2.0a0|>=1.18.1,<2.0a0|>=1.9.3,<2.0a0|>=1.9|>=1.16.6,<2.0a0|>=1.15.1,<2.0a0']\n",
      "mkl_fft -> numpy[version='>=1.11|>=1.11.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.5,<2.0a0|>=1.19.2,<2.0a0']\n",
      "pytorch -> numpy[version='>=1.11|>=1.11.3,<2.0a0|>=1.16.6,<2.0a0|>=1.19.4,<2.0a0|>=1.14.6,<2.0a0|>=1.9.3,<2.0a0|>=1.9']\n",
      "seaborn -> numpy[version='>=1.13.3|>=1.9.3']\n",
      "imageio -> numpy\n",
      "tensorflow-estimator -> numpy[version='>=1.13.3|>=1.16.1']\n",
      "keras-preprocessing -> numpy[version='>=1.9.1']\n",
      "tensorflow-base -> numpy[version='>=1.12.1,<2.0a0|>=1.13.3,<2.0a0|>=1.14.6,<2.0a0|>=1.16.1,<2.0a0|>=1.16.6,<2.0a0|>=1.16.5,<2.0a0']\n",
      "\n",
      "Package pypy3.6 conflicts for:\n",
      "jedi -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "scipy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "matplotlib-base -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "docutils -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "importlib-metadata -> pypy3.6[version='>=7.3.1|>=7.3.3']\n",
      "wrapt -> pypy3.6[version='>=7.3.2']\n",
      "bokeh -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "notebook -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "s3transfer -> pypy3.6[version='>=7.3.2']\n",
      "multidict -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "future -> pypy3.6[version='>=7.3.2']\n",
      "secretstorage -> pypy3.6[version='>=7.3.2']\n",
      "certifi -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pyzmq -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "keyring -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "pluggy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "numexpr -> pypy3.6[version='>=7.3.2']\n",
      "cryptography -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "ipykernel -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "pyyaml -> pypy3.6[version='>=7.3.2']\n",
      "brotlipy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "biopython -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "entrypoints -> pypy3.6[version='>=7.3.2']\n",
      "markupsafe -> pypy3.6[version='>=7.3.2']\n",
      "widgetsnbextension -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "absl-py -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "regex -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "lxml -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "soupsieve -> pypy3.6[version='>=7.3.1']\n",
      "pickleshare -> pypy3.6[version='>=7.3.2']\n",
      "tornado -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "yarl -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "cx_oracle -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "protobuf -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "chardet -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "beautifulsoup4 -> pypy3.6[version='>=7.3.1']\n",
      "sqlalchemy -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "pysocks -> pypy3.6[version='>=7.3.2']\n",
      "cffi -> pypy3.6[version='7.3.0.*|7.3.1.*|7.3.2.*|7.3.3.*']\n",
      "sympy -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "numpy -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pyrsistent -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "ninja -> pypy3.6[version='>=7.3.1']\n",
      "terminado -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "setuptools -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "mock -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pytest -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "jupyter_core -> pypy3.6[version='>=7.3.2']\n",
      "kiwisolver -> pypy3.6[version='>=7.3.2']\n",
      "nbconvert -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "pillow -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "matplotlib -> pypy3.6[version='>=7.3.2']\n",
      "psycopg2 -> pypy3.6[version='>=7.3.1|>=7.3.2|>=7.3.3']\n",
      "pywavelets -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "scikit-learn -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "mistune -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "scikit-image -> pypy3.6[version='>=7.3.2']\n",
      "pandas -> pypy3.6[version='>=7.3.1|>=7.3.2']\n",
      "ipython -> pypy3.6[version='>=7.3.1']\n",
      "aiohttp -> pypy3.6[version='>=7.3.2|>=7.3.3']\n",
      "\n",
      "Package blas conflicts for:\n",
      "numpy-base -> blas[version='*|*|1.0|1.0',build='mkl|openblas|openblas|mkl']\n",
      "numexpr -> blas[version='*|*|1.0|1.0',build='mkl|openblas|openblas|mkl']\n",
      "pytorch -> blas==1.0=mkl\n",
      "scikit-learn -> blas[version='*|*|1.1|1.0|1.0',build='mkl|openblas|openblas|mkl']\n",
      "ibm-wsrt-py37main-main -> blas==1.0[build=*]\n",
      "mkl_random -> blas[version='*|1.0',build=mkl]\n",
      "mkl-service -> blas==1.0=mkl\n",
      "numpy -> blas[version='*|*|1.1|1.0|1.0',build='mkl|openblas|openblas|mkl']\n",
      "mkl_fft -> blas[version='*|1.0',build=mkl]\n",
      "scipy -> blas[version='*|*|1.0|1.1|1.0',build='mkl|openblas|openblas|openblas|mkl']\n",
      "\n",
      "Package python_abi conflicts for:\n",
      "beautifulsoup4 -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*',build='*_pypy36_pp73|*_cp36m|*_cp38|*_cp37m']\n",
      "traitlets -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_cp27mu|*_pypy36_pp73|*_cp36m|*_cp38|*_cp37m']\n",
      "protobuf -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "dill -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp37m|*_cp27mu|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "soupsieve -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_cp27mu|*_pypy36_pp73|*_cp36m|*_cp38|*_cp37m']\n",
      "wrapt -> python_abi[version='2.7.*|3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp27mu|*_cp36m|*_cp38|*_cp39|*_pypy36_pp73|*_cp37m']\n",
      "py-xgboost -> python_abi[version='3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp39|*_cp38|*_cp36m|*_cp37m']\n",
      "pandas -> python_abi[version='3.6|3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp37m|*_cp39|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "kiwisolver -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m']\n",
      "ninja -> python_abi[version='3.6|3.6.*|3.8.*|3.7.*',build='*_cp37m|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "sip -> python_abi[version='3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp37m|*_cp36m']\n",
      "chardet -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "glib -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*',build='*_cp27mu|*_cp38|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "mkl-service -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp36m|*_cp39']\n",
      "jedi -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp36m|*_cp39|*_cp37m|*_pypy36_pp73']\n",
      "matplotlib -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp39|*_cp36m']\n",
      "markupsafe -> python_abi[version='2.7.*|3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp27mu|*_cp38|*_cp39|*_pypy36_pp73|*_cp37m|*_cp36m']\n",
      "ipython -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73']\n",
      "entrypoints -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "biopython -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp36m|*_cp38|*_pypy36_pp73|*_cp37m|*_cp39']\n",
      "notebook -> python_abi[version='3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp37m|*_cp38|*_cp36m|*_pypy36_pp73|*_cp39']\n",
      "jsonschema -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*',build='*_cp27mu|*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m']\n",
      "scikit-learn -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73']\n",
      "mkl_fft -> python_abi[version='3.6.*|3.9.*|3.8.*|3.7.*',build='*_cp37m|*_cp38|*_cp39|*_cp36m']\n",
      "urllib3 -> python_abi[version='2.7.*|3.8.*|3.6.*|3.6|3.7.*',build='*_cp37m|*_pypy36_pp73|*_cp36m|*_cp27mu|*_cp38']\n",
      "importlib-metadata -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp27mu|*_cp38|*_cp37m|*_cp39|*_pypy36_pp73|*_cp36m']\n",
      "grpcio -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "statsmodels -> python_abi[version='3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp38|*_cp36m|*_cp39|*_cp37m']\n",
      "scipy -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "certifi -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp38|*_cp39']\n",
      "secretstorage -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp27mu|*_cp38|*_cp37m|*_cp39|*_cp36m|*_pypy36_pp73']\n",
      "aiohttp -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "regex -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp36m|*_cp37m|*_cp39|*_pypy36_pp73']\n",
      "docutils -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "sympy -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "mkl_random -> python_abi[version='3.6.*|3.7.*|3.8.*',build='*_cp36m|*_cp38|*_cp37m']\n",
      "psycopg2 -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m|*_cp39']\n",
      "python=3.7 -> python_abi==3.7[build=*_pypy37_pp73]\n",
      "absl-py -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp27mu|*_cp39|*_cp37m|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "brotlipy -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73']\n",
      "pillow -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39|*_pypy36_pp73']\n",
      "future -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "widgetsnbextension -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp39|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "matplotlib-base -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_pypy36_pp73|*_cp37m|*_cp39|*_cp36m']\n",
      "pyqt -> python_abi[version='3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp37m|*_cp38|*_cp39|*_cp36m']\n",
      "lxml -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.8.*|3.7.*',build='*_cp27mu|*_pypy36_pp73|*_cp37m|*_cp38|*_cp39|*_cp36m']\n",
      "pyodbc -> python_abi[version='2.7.*|3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp27mu|*_cp37m|*_cp38|*_cp39|*_cp36m']\n",
      "pexpect -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*',build='*_cp37m|*_cp27mu|*_cp38|*_cp36m|*_pypy36_pp73']\n",
      "pytables -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp36m|*_cp39']\n",
      "numpy -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_cp36m|*_pypy36_pp73']\n",
      "fastcache -> python_abi[version='2.7.*|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp37m|*_cp36m|*_cp39']\n",
      "bokeh -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp39|*_cp36m']\n",
      "pywavelets -> python_abi[version='3.6.*|3.6|3.8.*|3.9.*|3.7.*',build='*_cp37m|*_cp39|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "numexpr -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "astropy -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_cp36m']\n",
      "multidict -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_pypy36_pp73|*_cp39|*_cp36m']\n",
      "pysocks -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp36m|*_pypy36_pp73|*_cp37m|*_cp38|*_cp39']\n",
      "tornado -> python_abi[version='3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_pypy36_pp73|*_cp36m|*_cp37m|*_cp38|*_cp39']\n",
      "jupyter_core -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73|*_cp36m']\n",
      "mistune -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_pypy36_pp73|*_cp38|*_cp36m|*_cp37m|*_cp39']\n",
      "pyzmq -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.8.*|3.7.*',build='*_cp27mu|*_cp38|*_cp39|*_cp36m|*_pypy36_pp73|*_cp37m']\n",
      "pymssql -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_cp36m']\n",
      "cryptography -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.9.*|3.7.*',build='*_cp27mu|*_cp37m|*_cp38|*_cp36m|*_cp39|*_pypy36_pp73']\n",
      "h5py -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39']\n",
      "s3transfer -> python_abi[version='3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp36m|*_cp39|*_cp38|*_cp37m|*_pypy36_pp73']\n",
      "pickleshare -> python_abi[version='2.7.*|3.6.*|3.6|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_pypy36_pp73|*_cp38|*_cp37m|*_cp36m']\n",
      "typing_extensions -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp27mu|*_cp37m|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "pluggy -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_pypy36_pp73|*_cp37m|*_cp36m|*_cp39']\n",
      "ipykernel -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_pypy36_pp73|*_cp36m']\n",
      "pyrsistent -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp27mu|*_cp39|*_cp38|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "mock -> python_abi[version='2.7.*|3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp27mu|*_cp38|*_cp37m|*_pypy36_pp73|*_cp39|*_cp36m']\n",
      "cytoolz -> python_abi[version='3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp36m|*_cp37m|*_cp39']\n",
      "cffi -> python_abi[version='3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_cp36m|*_pypy36_pp73']\n",
      "sqlalchemy -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp27mu|*_cp37m|*_cp38|*_cp36m|*_pypy36_pp73|*_cp39']\n",
      "keyring -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp36m|*_cp38|*_cp39|*_pypy36_pp73|*_cp37m']\n",
      "tensorflow-base -> python_abi[version='3.6.*|3.7.*',build='*_cp37m|*_cp36m']\n",
      "terminado -> python_abi[version='2.7.*|3.6|3.6.*|3.7.*|3.9.*|3.8.*',build='*_cp27mu|*_cp38|*_cp39|*_cp37m|*_cp36m|*_pypy36_pp73']\n",
      "requests -> python_abi[version='2.7.*|3.6.*|3.6|3.8.*|3.7.*',build='*_cp27mu|*_cp37m|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "pyyaml -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp27mu|*_cp39|*_pypy36_pp73|*_cp38|*_cp36m|*_cp37m']\n",
      "yarl -> python_abi[version='3.6|3.6.*|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_cp36m|*_pypy36_pp73']\n",
      "setuptools -> python_abi[version='3.6.*|3.6|3.9.*|3.8.*|3.7.*',build='*_cp36m|*_cp38|*_cp39|*_pypy36_pp73|*_cp37m']\n",
      "cx_oracle -> python_abi[version='2.7.*|3.6|3.6.*|3.8.*|3.7.*|3.9.*',build='*_cp27mu|*_cp39|*_cp37m|*_cp38|*_pypy36_pp73|*_cp36m']\n",
      "pytest -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_pypy36_pp73|*_cp36m']\n",
      "scikit-image -> python_abi[version='3.6.*|3.6|3.7.*|3.9.*|3.8.*',build='*_pypy36_pp73|*_cp38|*_cp37m|*_cp39|*_cp36m']\n",
      "nbconvert -> python_abi[version='3.6.*|3.6|3.9.*|3.7.*|3.8.*',build='*_cp38|*_cp37m|*_cp39|*_pypy36_pp73|*_cp36m']\n",
      "pytorch -> python_abi[version='3.6.*|3.7.*|3.8.*|3.9.*',build='*_cp39|*_cp38|*_cp37m|*_cp36m']\n",
      "\n",
      "Package libgcc-ng conflicts for:\n",
      "zstd -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyqt -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "cx_oracle -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "jpeg -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "fastcache -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "dbus -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "icu -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "lxml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyrsistent -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "pyzmq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libuuid -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=9.3.0']\n",
      "unixodbc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "lz4-c -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyodbc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pcre -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "snappy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "yarl -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "bzip2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxslt -> libgcc-ng[version='>=4.9|>=7.3.0|>=9.3.0|>=7.2.0']\n",
      "mkl-service -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "lcms2 -> libgcc-ng[version='>=7.3.0|>=7.5.0']\n",
      "qt -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "pymssql -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "biopython -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numpy-base -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "scipy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cytoolz -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pytables -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "freetds -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "libffi -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pytorch -> libgcc-ng[version='>=5.4.0|>=7.3.0|>=7.5.0']\n",
      "libsodium -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "mkl_random -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "matplotlib -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "c-ares -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "glib -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "multidict -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cffi -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxml2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libedit -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "tensorboard -> libgcc-ng[version='>=7.2.0|>=7.3.0']\n",
      "fontconfig -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pywavelets -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "blosc -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "gmp -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "mkl_fft -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pandas -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "expat -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "sip -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "gstreamer -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pillow -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "freetype -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "markupsafe -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "astropy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "kiwisolver -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "blas -> libgcc-ng[version='>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "hdf5 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "statsmodels -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numexpr -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "grpcio -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "lzo -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "tornado -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "aiohttp -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "python=3.7 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "tk -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libtiff -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "zeromq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "brotlipy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "ninja -> libgcc-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "xz -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "protobuf -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "cryptography -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "ibm-wsrt-py37main-main -> libgcc-ng==9.1.0[build=*]\n",
      "libpq -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "yaml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "tensorflow-base -> libgcc-ng[version='>=5.4.0|>=7.2.0']\n",
      "readline -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "krb5 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "wrapt -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "libpng -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "sqlite -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "regex -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxcb -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "libxgboost -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=5.4.0|>=7.2.0']\n",
      "matplotlib-base -> libgcc-ng[version='>=7.3.0|>=7.5.0']\n",
      "py-xgboost -> libgcc-ng[version='>=4.9|>=7.3.0|>=5.4.0|>=7.2.0']\n",
      "h5py -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "scikit-learn -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "zlib -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "scikit-image -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libprotobuf -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyyaml -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "sqlalchemy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "openssl -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "psycopg2 -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "mistune -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "numpy -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "ncurses -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "gst-plugins-base -> libgcc-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "\n",
      "Package cryptography conflicts for:\n",
      "oauthlib -> cryptography\n",
      "ibm-wsrt-py37main-main -> cryptography==3.2.1[build=*]\n",
      "pyjwt -> cryptography[version='>=1.0|>=1.4|>=2.6,<3.0.0']\n",
      "urllib3 -> cryptography[version='>=1.3.4']\n",
      "pyopenssl -> cryptography[version='>=1.3|>=1.3.4|>=1.9|>=2.1.4|>=2.2.1|>=2.8|>=3.2']\n",
      "secretstorage -> cryptography\n",
      "\n",
      "Package setuptools conflicts for:\n",
      "protobuf -> setuptools\n",
      "joblib -> setuptools\n",
      "jsonschema -> setuptools\n",
      "plotly -> setuptools\n",
      "grpcio -> setuptools\n",
      "wheel -> setuptools\n",
      "google-auth -> setuptools[version='>=40.3.0']\n",
      "networkx -> setuptools\n",
      "sympy -> setuptools\n",
      "ipython -> setuptools[version='>=18.5']\n",
      "matplotlib-base -> setuptools\n",
      "ibm-wsrt-py37main-main -> setuptools==47.3.1[build=*]\n",
      "tensorboard -> setuptools[version='>=41.0.0|>=41.4']\n",
      "numexpr -> setuptools\n",
      "astropy -> setuptools\n",
      "markdown -> setuptools[version='>=36']\n",
      "bleach -> setuptools\n",
      "jinja2 -> setuptools\n",
      "pygments -> setuptools\n",
      "pytest -> setuptools[version='>=40.0']\n",
      "matplotlib -> setuptools\n",
      "pip -> setuptools\n",
      "\n",
      "Package typing_extensions conflicts for:\n",
      "importlib-metadata -> typing_extensions[version='>=3.6.4']\n",
      "ibm-wsrt-py37main-main -> typing_extensions==3.7.4.2[build=*]\n",
      "aiohttp -> typing_extensions[version='>=3.6.5']\n",
      "bokeh -> typing_extensions[version='>=3.7.4']\n",
      "\n",
      "Package icu conflicts for:\n",
      "libxslt -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "qt -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "matplotlib-base -> icu[version='>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0']\n",
      "libxml2 -> icu[version='56.*|58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "fontconfig -> icu[version='58.*|>=58.2,<59.0a0|>=64.2,<65.0a0|>=67.1,<68.0a0|>=68.1,<69.0a0']\n",
      "ibm-wsrt-py37main-main -> icu==58.2[build=*]\n",
      "matplotlib -> icu[version='>=58.2,<59.0a0']\n",
      "\n",
      "Package mistune conflicts for:\n",
      "nbconvert -> mistune[version='>0.6|>=0.7.4|>=0.8.1']\n",
      "ibm-wsrt-py37main-main -> mistune==0.8.4[build=*]\n",
      "\n",
      "Package libxcb conflicts for:\n",
      "gst-plugins-base -> libxcb[version='>=1.12,<2.0a0|>=1.13,<2.0a0']\n",
      "qt -> libxcb[version='>=1.12,<2.0a0|>=1.13,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> libxcb==1.14[build=*]\n",
      "\n",
      "Package prompt-toolkit conflicts for:\n",
      "ibm-wsrt-py37main-main -> prompt-toolkit==3.0.5[build=*]\n",
      "ipython -> prompt-toolkit[version='!=3.0.0,!=3.0.1,<3.1.0,>=2.0.0']\n",
      "\n",
      "Package sip conflicts for:\n",
      "ibm-wsrt-py37main-main -> sip==4.19.8[build=*]\n",
      "pyqt -> sip[version='4.18|4.18.*|>=4.19.4,<=4.19.8|4.19.13.*|>=4.19.13,<=4.19.14']\n",
      "\n",
      "Package bzip2 conflicts for:\n",
      "python=3.7 -> bzip2[version='>=1.0.6,<2.0a0|>=1.0.8,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> bzip2==1.0.8[build=*]\n",
      "pytables -> bzip2[version='1.0.*|>=1.0.6,<2.0a0|>=1.0.8,<2.0a0']\n",
      "\n",
      "Package _openmp_mutex conflicts for:\n",
      "libgcc-ng -> _openmp_mutex[version='>=4.5']\n",
      "blas -> _openmp_mutex[version='*|>=4.5',build=*_llvm]\n",
      "pytorch -> _openmp_mutex[version='>=4.5']\n",
      "mkl -> _openmp_mutex[version='*|>=4.5',build=*_llvm]\n",
      "\n",
      "Package keyring conflicts for:\n",
      "ibm-wsrt-py37main-main -> keyring==18.0.0[build=*]\n",
      "arcgis=1.6.0 -> keyring\n",
      "\n",
      "Package tk conflicts for:\n",
      "krb5 -> tk[version='8.6.*|>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "python=3.7 -> tk[version='>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "matplotlib-base -> tk[version='>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0']\n",
      "matplotlib -> tk[version='8.5.*|8.6.*|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "pillow -> tk[version='8.6.*|>=8.6.10,<8.7.0a0|>=8.6.9,<8.7.0a0|>=8.6.8,<8.7.0a0|>=8.6.7,<8.7.0a0']\n",
      "ibm-wsrt-py37main-main -> tk==8.6.10[build=*]\n",
      "\n",
      "Package numpy-base conflicts for:\n",
      "ibm-wsrt-py37main-main -> numpy-base==1.18.5[build=*]\n",
      "mkl_random -> numpy-base[version='>=1.0.2,<2.0a0']\n",
      "numexpr -> numpy-base[version='>=1.17.3,<2.0a0']\n",
      "numpy -> numpy-base[version='1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.11.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.3|1.14.4|1.14.4|1.14.4|1.14.4|1.14.4|1.14.4|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.5|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.14.6|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.0|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.1|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.2|1.15.3|1.15.3|1.15.3|1.15.3|1.15.3|1.15.3|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.15.4|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.0|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.1|1.16.2|1.16.2|1.16.2|1.16.2|1.16.2|1.16.2|1.16.3|1.16.3|1.16.3|1.16.3|1.16.3|1.16.3|1.16.4|1.16.4|1.16.4|1.16.4|1.16.4|1.16.4|1.16.5|1.16.5|1.16.5|1.16.5|1.16.5|1.16.5|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.16.6|1.17.2.*|1.17.3.*|1.17.4.*|1.18.1.*|1.18.5.*|1.19.1|1.19.1|1.19.1|1.19.1|1.19.1|1.19.1|1.19.2|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|1.9.3|>=1.9.3,<2.0a0',build='py36h2b20989_6|py36hdbf6ddf_6|py27h2b20989_7|py36h2b20989_7|py35h2b20989_7|py37hdbf6ddf_7|py37h2b20989_7|py36h2b20989_7|py27hdbf6ddf_7|py37hdbf6ddf_7|py36hdbf6ddf_8|py36h2b20989_8|py37h2b20989_8|py35hdbf6ddf_8|py37h7cdd4dd_9|py37h3dfced4_9|py36h3dfced4_9|py27h74e8950_9|py35h74e8950_9|py36h74e8950_9|py35h81de0dd_9|py35h74e8950_10|py27h74e8950_10|py27h81de0dd_10|py37h81de0dd_10|py36h81de0dd_10|py36h2f8d375_10|py27h2f8d375_11|py36hde5b4d6_11|py37h2f8d375_12|py37hde5b4d6_12|py36hde5b4d6_12|py35h0ea5e3f_1|py36h9be14a7_1|py27h9be14a7_1|py35h9be14a7_1|py35h2b20989_0|py35hdbf6ddf_0|py27hdbf6ddf_0|py35hdbf6ddf_0|py36h2b20989_1|py27hdbf6ddf_1|py36hdbf6ddf_1|py37hdbf6ddf_1|py27h2b20989_1|py27h2b20989_2|py36h2b20989_2|py27hdbf6ddf_2|py37hdbf6ddf_3|py36hdbf6ddf_3|py27h2b20989_3|py27hdbf6ddf_4|py37h2b20989_4|py36h2b20989_4|py36hdbf6ddf_4|py35hdbf6ddf_4|py37h2f8d375_4|py35h2f8d375_4|py27h81de0dd_4|py27h2f8d375_4|py35h81de0dd_4|py36h81de0dd_4|py38h2f8d375_4|py38hde5b4d6_4|py36hde5b4d6_5|py36h7cdd4dd_0|py37h7cdd4dd_0|py36h3dfced4_0|py36h74e8950_0|py37h81de0dd_0|py36h2f8d375_0|py37h2f8d375_0|py37h2f8d375_0|py37h81de0dd_0|py35h81de0dd_0|py35h2f8d375_0|py27h2f8d375_1|py36h81de0dd_1|py37h81de0dd_1|py37h2f8d375_1|py37h2f8d375_0|py37h81de0dd_0|py37h2f8d375_0|py37h81de0dd_0|py36h81de0dd_0|py27hde5b4d6_0|py37hde5b4d6_0|py37h2f8d375_0|py37hde5b4d6_0|py36h2f8d375_0|py27hde5b4d6_0|py36hde5b4d6_0|py37h2f8d375_1|py36h2f8d375_1|py27hde5b4d6_1|py36hde5b4d6_1|py37h2f8d375_0|py36h2f8d375_0|py36hde5b4d6_0|py27hde5b4d6_0|py27hde5b4d6_1|py37h2f8d375_0|py36h2f8d375_0|py37hde5b4d6_0|py27hde5b4d6_0|py36hde5b4d6_0|py37h2f8d375_0|py37hde5b4d6_0|py27hde5b4d6_0|py36h2f8d375_0|py37h2f8d375_0|py37hde5b4d6_0|py27hde5b4d6_0|py37h2f8d375_0|py27hde5b4d6_0|py37hde5b4d6_0|py36hde5b4d6_0|py37h2f8d375_0|py36h2f8d375_0|py36hde5b4d6_0|py38h2f8d375_0|py38hde5b4d6_0|py27h2f8d375_0|py27hde5b4d6_0|py37hfa32c7d_0|py36hfa32c7d_0|py37h75fe3a5_0|py37hfa32c7d_0|py38h75fe3a5_0|py36hfa32c7d_0|py39h2ae0177_0|py39h0f7b65f_0|py38hfa32c7d_0|py36h75fe3a5_0|py37h75fe3a5_0|py36h75fe3a5_0|py38hfa32c7d_0|py38h75fe3a5_0|py39h76555f2_1|py39hfb011de_1|py37hde5b4d6_0|py27h2f8d375_0|py36h2f8d375_0|py36hde5b4d6_0|py27h2f8d375_0|py36hde5b4d6_0|py36h2f8d375_0|py27h2f8d375_0|py27h2f8d375_0|py36hde5b4d6_1|py37hde5b4d6_1|py36h2f8d375_1|py37h2f8d375_1|py27h2f8d375_1|py37hde5b4d6_0|py27h2f8d375_0|py37hde5b4d6_1|py27h2f8d375_1|py27h2f8d375_0|py36hde5b4d6_0|py27h81de0dd_0|py27h2f8d375_0|py36h2f8d375_0|py36h81de0dd_0|py27h81de0dd_0|py36h2f8d375_0|py27h2f8d375_0|py27h81de0dd_1|py36h2f8d375_1|py36h81de0dd_0|py36h2f8d375_0|py27h81de0dd_0|py27h2f8d375_0|py27h2f8d375_0|py35h2f8d375_0|py35h81de0dd_0|py27h81de0dd_0|py36h81de0dd_0|py37h74e8950_0|py27h74e8950_0|py35h74e8950_0|py37h3dfced4_0|py35h3dfced4_0|py27h3dfced4_0|py35h7cdd4dd_0|py27h7cdd4dd_0|py37hde5b4d6_5|py27hde5b4d6_5|py27h2f8d375_5|py37h2f8d375_5|py36h2f8d375_5|py37h81de0dd_4|py36h2f8d375_4|py35h2b20989_4|py37hdbf6ddf_4|py27h2b20989_4|py27hdbf6ddf_3|py37h2b20989_3|py36h2b20989_3|py36hdbf6ddf_2|py37hdbf6ddf_2|py37h2b20989_2|py37h2b20989_1|py36hdbf6ddf_0|py27h2b20989_0|py36h2b20989_0|py36hdbf6ddf_0|py27hdbf6ddf_0|py36h2b20989_0|py27h2b20989_0|py27h0ea5e3f_1|py36h0ea5e3f_1|py38h2f8d375_12|py38hde5b4d6_12|py27hde5b4d6_12|py36h2f8d375_12|py27h2f8d375_12|py27hde5b4d6_11|py37hde5b4d6_11|py36h2f8d375_11|py37h2f8d375_11|py35h2f8d375_10|py27h2f8d375_10|py37h2f8d375_10|py35h81de0dd_10|py36h74e8950_10|py37h74e8950_10|py27h81de0dd_9|py37h74e8950_9|py37h81de0dd_9|py36h81de0dd_9|py27h3dfced4_9|py35h3dfced4_9|py27h7cdd4dd_9|py35h7cdd4dd_9|py36h7cdd4dd_9|py35h2b20989_8|py27hdbf6ddf_8|py27h2b20989_8|py37hdbf6ddf_8|py36hdbf6ddf_7|py27h2b20989_7|py37h2b20989_7|py35hdbf6ddf_7|py36hdbf6ddf_7|py27hdbf6ddf_7|py27hdbf6ddf_6|py37hdbf6ddf_6|py37h2b20989_6|py27h2b20989_6']\n",
      "mkl_fft -> numpy-base[version='>=1.0.6,<2.0a0']\n",
      "\n",
      "Package futures conflicts for:\n",
      "bokeh -> futures[version='>=3.0.3']\n",
      "jupyterlab -> futures\n",
      "imageio -> futures\n",
      "tornado -> futures\n",
      "grpcio -> futures[version='>=2.2.0']\n",
      "s3transfer -> futures[version='>=2.2.0,<4.0.0']\n",
      "tensorboard -> futures[version='>=3.1.1']\n",
      "\n",
      "Package future conflicts for:\n",
      "tensorflow-base -> future\n",
      "pytorch -> future\n",
      "ibm-wsrt-py37main-main -> future==0.18.2[build=*]\n",
      "\n",
      "Package pywavelets conflicts for:\n",
      "ibm-wsrt-py37main-main -> pywavelets==1.1.1[build=*]\n",
      "scikit-image -> pywavelets[version='>=0.4.0']\n",
      "\n",
      "Package packaging conflicts for:\n",
      "bokeh -> packaging[version='>=16.8']\n",
      "jupyterlab -> packaging\n",
      "pytest -> packaging\n",
      "wheel -> packaging[version='>=20.2']\n",
      "jupyterlab_server -> packaging\n",
      "bleach -> packaging\n",
      "ibm-wsrt-py37main-main -> packaging==20.4[build=*]\n",
      "\n",
      "Package matplotlib-base conflicts for:\n",
      "seaborn -> matplotlib-base[version='>=2.1.2']\n",
      "ibm-wsrt-py37main-main -> matplotlib-base==3.2.2[build=*]\n",
      "matplotlib -> matplotlib-base[version='2.1.2|2.1.2|2.1.2|2.2.3|2.2.3|2.2.3|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|2.2.4|3.0.1|3.0.2|3.0.2|3.0.2|3.0.2|3.0.2|3.0.3|3.0.3|3.0.3|3.0.3|3.1.0|3.1.0|3.1.0|3.1.0|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.1|3.1.2|3.1.2|3.1.2|3.1.2|3.1.2|3.1.2|3.1.3|3.1.3|3.1.3|>=3.2.0,<3.2.1.0a0|>=3.2.1,<3.2.2.0a0|>=3.2.2,<3.2.3.0a0|>=3.3.0,<3.3.1.0a0|>=3.3.1,<3.3.2.0a0|>=3.3.2,<3.3.3.0a0|>=3.3.3,<3.3.4.0a0|>=2.2.5,<2.2.6.0a0|3.1.3|3.1.3|3.1.3|3.1.2|3.1.2|3.1.2',build='py38hef1b27d_1|py38hef1b27d_0|py36hef1b27d_0|py37h250f245_1|py27h60b886d_1|py36h60b886d_1|py37hfd891ef_0|py36hfd891ef_0|py37h250f245_1|py27h250f245_2|py36h250f245_2|py37hc2fb212_1001|py37h167e16e_1002|py36h167e16e_1002|py37h167e16e_0|py36h167e16e_0|py37h5f35d83_0|py36hfd891ef_0|py37hfd891ef_0|py37he7580a8_1|py38h250f245_1|py38h250f245_2|py36h250f245_2|py37h250f245_0|py38h250f245_0|py37h250f245_1|py36h250f245_0|py37h250f245_0|py38h250f245_0|py38h250f245_1|py36h250f245_1|py36h250f245_0|py37h250f245_2|py36he7580a8_1|py36hfd891ef_1|py37hfd891ef_1|py36h5f35d83_0|py36h5f35d83_1|py37h5f35d83_1|py36h167e16e_1001|py37h167e16e_1001|py36h167e16e_1000|py38h250f245_2|py37h250f245_2|py27h250f245_1|py36h250f245_1|py27hfd891ef_0|py37h60b886d_1|py36h250f245_1|py27h250f245_1|py37hef1b27d_0|py36hef1b27d_1|py37hef1b27d_1']\n",
      "scikit-image -> matplotlib-base[version='>=2.0.0']\n",
      "\n",
      "Package protobuf conflicts for:\n",
      "grpcio -> protobuf[version='>=3.5.0']\n",
      "tensorflow-estimator -> protobuf[version='>=3.6.1']\n",
      "ibm-wsrt-py37main-main -> protobuf==3.12.3[build=*]\n",
      "tensorboard -> protobuf[version='>=3.3.0|>=3.4.0|>=3.6.0|>=3.8.0|>=3.6.1']\n",
      "tensorflow-base -> protobuf[version='>=3.3.0|>=3.4.0|>=3.6.0|>=3.6.1,<4.0a0|>=3.6.1|>=3.8.0|>=3.9.2']\n",
      "\n",
      "Package fastcache conflicts for:\n",
      "sympy -> fastcache\n",
      "ibm-wsrt-py37main-main -> fastcache==1.1.0[build=*]\n",
      "\n",
      "Package pytz conflicts for:\n",
      "plotly -> pytz\n",
      "ibm-wsrt-py37main-main -> pytz==2020.1[build=*]\n",
      "matplotlib -> pytz\n",
      "pandas -> pytz[version='>=2017.2']\n",
      "matplotlib-base -> pytz\n",
      "\n",
      "Package matplotlib conflicts for:\n",
      "nltk -> matplotlib\n",
      "bokeh -> matplotlib\n",
      "scikit-image -> matplotlib[version='>=1.1|>=1.3.1|>=2.0.0']\n",
      "arcgis=1.6.0 -> matplotlib\n",
      "seaborn -> matplotlib[version='>=1.4.3|>=2.1.2']\n",
      "ibm-wsrt-py37main-main -> matplotlib==3.2.2[build=*]\n",
      "\n",
      "Package freetype conflicts for:\n",
      "pillow -> freetype[version='2.5.*|2.6.*|2.7|2.7.*|2.7|2.8.*|2.8.1|2.8.1.*|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8.1,<2.9.0a0|>=2.10.3,<3.0a0|>=2.8,<2.9.0a0']\n",
      "fontconfig -> freetype[version='2.6.*|2.7|2.7.*|2.7|2.8.1|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8.1,<2.9.0a0|>=2.9,<3.0a0|>=2.8,<2.9.0a0']\n",
      "matplotlib -> freetype[version='2.6.*|>=2.9.1,<3.0a0|>=2.8,<2.9.0a0']\n",
      "matplotlib-base -> freetype[version='>=2.10.2,<3.0a0|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0']\n",
      "qt -> freetype[version='2.7|2.7.*|>=2.10.4,<3.0a0|>=2.9.1,<3.0a0|>=2.8,<2.9.0a0']\n",
      "ibm-wsrt-py37main-main -> freetype==2.10.2[build=*]\n",
      "\n",
      "Package dbus conflicts for:\n",
      "pyqt -> dbus[version='>=1.10.22,<2.0a0|>=1.12.2,<2.0a0|>=1.13.12,<2.0a0|>=1.13.6,<2.0a0|>=1.13.2,<2.0a0']\n",
      "secretstorage -> dbus\n",
      "qt -> dbus[version='>=1.10.22,<2.0a0|>=1.12.2,<2.0a0|>=1.13.0,<2.0a0|>=1.13.6,<2.0a0|>=1.13.2,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> dbus==1.13.16[build=*]\n",
      "\n",
      "Package tornado conflicts for:\n",
      "matplotlib -> tornado\n",
      "terminado -> tornado[version='>=4']\n",
      "jupyterlab -> tornado[version='!=6.0.0,!=6.0.1,!=6.0.2|>=6.1']\n",
      "matplotlib-base -> tornado\n",
      "ibm-wsrt-py37main-main -> tornado==6.0.4[build=*]\n",
      "jupyter_client -> tornado[version='>=4.1|>=4.1,<6']\n",
      "notebook -> tornado[version='>=4|>=4,<6|>=4.1,<7|>=5.0|>=5.0,<7']\n",
      "bokeh -> tornado[version='>=4.3,<4.5|>=4.3|>=5|>=5.1']\n",
      "ipykernel -> tornado[version='>=4.0|>=4.2']\n",
      "\n",
      "Package ncurses conflicts for:\n",
      "libedit -> ncurses[version='5.9|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0|>=6.1,<7.0a0|6.0.*']\n",
      "sqlite -> ncurses[version='5.9|5.9.*|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0']\n",
      "ibm-wsrt-py37main-main -> ncurses==6.2[build=*]\n",
      "python=3.7 -> ncurses[version='>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.2,<7.0a0|>=6.1,<7.0a0']\n",
      "readline -> ncurses[version='5.9.*|>=6.1,<6.3.0a0|>=6.2,<6.3.0a0|>=6.1,<7.0a0|>=6.0,<7.0a0|6.0.*']\n",
      "\n",
      "Package python-dateutil conflicts for:\n",
      "matplotlib -> python-dateutil\n",
      "ibm-wsrt-py37main-main -> python-dateutil==2.8.1[build=*]\n",
      "jupyter_client -> python-dateutil[version='>=2.1']\n",
      "matplotlib-base -> python-dateutil[version='>=2.1']\n",
      "pandas -> python-dateutil[version='>=2.5.*|>=2.6.1|>=2.7.3']\n",
      "bokeh -> python-dateutil[version='>=2.1']\n",
      "botocore -> python-dateutil[version='>=2.1,<2.7.0|>=2.1,<2.8.1|>=2.1,<3.0.0']\n",
      "\n",
      "Package pyrsistent conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyrsistent==0.16.0[build=*]\n",
      "jsonschema -> pyrsistent[version='>=0.14.0']\n",
      "\n",
      "Package cachetools conflicts for:\n",
      "google-auth -> cachetools[version='>=2.0.0,<3.2|>=2.0.0,<5.0|>=2.0.0,<3dev']\n",
      "ibm-wsrt-py37main-main -> cachetools==4.1.1[build=*]\n",
      "\n",
      "Package typing conflicts for:\n",
      "pytorch -> typing\n",
      "typing_extensions -> typing[version='>=3.6.2|>=3.7.4']\n",
      "\n",
      "Package yarl conflicts for:\n",
      "aiohttp -> yarl[version='>=0.10.0,<0.11|>=1.0,<1.6.0|>=1.0,<2.0|>=0.11']\n",
      "ibm-wsrt-py37main-main -> yarl==1.5.1[build=*]\n",
      "\n",
      "Package mock conflicts for:\n",
      "pytables -> mock\n",
      "tensorflow-estimator -> mock[version='>=2.0.0']\n",
      "tensorflow-base -> mock[version='>=2.0.0|>=2.0.0,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> mock==4.0.2[build=*]\n",
      "\n",
      "Package notebook conflicts for:\n",
      "widgetsnbextension -> notebook[version='>=4.2.0|>=4.4.1']\n",
      "jupyterlab_server -> notebook[version='>=4.2.0']\n",
      "ibm-wsrt-py37main-main -> notebook==6.0.3[build=*]\n",
      "jupyterlab -> notebook[version='>=4.2|>=4.3|>=4.3.1']\n",
      "arcgis=1.6.0 -> notebook\n",
      "ipywidgets -> notebook\n",
      "\n",
      "Package jupyter_core conflicts for:\n",
      "nbconvert -> jupyter_core\n",
      "ibm-wsrt-py37main-main -> jupyter_core==4.6.3[build=*]\n",
      "jupyterlab -> jupyter_core\n",
      "nbformat -> jupyter_core\n",
      "jupyter_client -> jupyter_core[version='>=4.6.0']\n",
      "notebook -> jupyter_core[version='>=4.4.0|>=4.6.0|>=4.6.1']\n",
      "\n",
      "Package opt_einsum conflicts for:\n",
      "tensorflow-base -> opt_einsum[version='>=2.3.2,<3.0a0|>=2.3.2|>=3.1.0|>=3.1.0,<4.0a0']\n",
      "ibm-wsrt-py37main-main -> opt_einsum==3.1.0[build=*]\n",
      "\n",
      "Package docutils conflicts for:\n",
      "botocore -> docutils[version='>=0.10|>=0.10,<0.15|>=0.10,<0.16']\n",
      "ibm-wsrt-py37main-main -> docutils==0.15.2[build=*]\n",
      "\n",
      "Package libffi conflicts for:\n",
      "ibm-wsrt-py37main-main -> libffi==3.3[build=*]\n",
      "python=3.7 -> libffi[version='>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "cffi -> libffi[version='<3.3.0.a0|>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "gstreamer -> libffi[version='>=3.2.1,<3.3.0a0|>=3.2.1,<3.3a0']\n",
      "glib -> libffi[version='<3.3.0.a0|>=3.0.0|>=3.2.1,<3.3.0a0|>=3.3,<3.4.0a0|>=3.2.1,<3.3a0']\n",
      "\n",
      "Package scipy conflicts for:\n",
      "scikit-learn -> scipy\n",
      "patsy -> scipy\n",
      "ibm-wsrt-py37main-main -> scipy==1.5.0[build=*]\n",
      "py-xgboost -> scipy\n",
      "seaborn -> scipy[version='>=0.15.2|>=1.0.1']\n",
      "statsmodels -> scipy[version='>=0.14|>=1.0|>=1.2']\n",
      "scikit-image -> scipy[version='>=0.17|>=0.19|>=0.9']\n",
      "tensorflow-base -> scipy[version='>=1.2.1|>=1.4.1']\n",
      "nltk -> scipy\n",
      "keras-preprocessing -> scipy[version='>=0.14']\n",
      "\n",
      "Package wcwidth conflicts for:\n",
      "pytest -> wcwidth\n",
      "prompt-toolkit -> wcwidth\n",
      "ibm-wsrt-py37main-main -> wcwidth==0.2.4[build=*]\n",
      "\n",
      "Package multidict conflicts for:\n",
      "aiohttp -> multidict[version='>=2.1.4|>=4.0,<5.0|>=4.5,<5.0|>=4.5,<7.0|>=3.0.0']\n",
      "ibm-wsrt-py37main-main -> multidict==4.7.6[build=*]\n",
      "yarl -> multidict[version='>=2.0|>=4.0']\n",
      "\n",
      "Package zlib conflicts for:\n",
      "pytables -> zlib[version='1.2.*|1.2.11.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "grpcio -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "tk -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "sqlite -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "libtiff -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "glib -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "protobuf -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "libpq -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "zstd -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "libpng -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "freetype -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "pillow -> zlib[version='1.2.*|1.2.11|1.2.11.*|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "tensorflow-base -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "qt -> zlib[version='1.2.*|>=1.2.11,<1.3.0a0']\n",
      "blosc -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "matplotlib -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "libprotobuf -> zlib[version='1.2.11|>=1.2.11,<1.3.0a0']\n",
      "pandoc -> zlib[version='1.2.*|1.2.11|1.2.11.*']\n",
      "libxml2 -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0']\n",
      "gst-plugins-base -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "hdf5 -> zlib[version='1.2.*|1.2.11|>=1.2.11,<1.3.0a0|1.2.8']\n",
      "ibm-wsrt-py37main-main -> zlib==1.2.11[build=*]\n",
      "python=3.7 -> zlib[version='>=1.2.11,<1.3.0a0']\n",
      "\n",
      "Package scikit-learn conflicts for:\n",
      "py-xgboost -> scikit-learn\n",
      "nltk -> scikit-learn\n",
      "ibm-wsrt-py37main-main -> scikit-learn==0.23.1[build=*]\n",
      "\n",
      "Package libstdcxx-ng conflicts for:\n",
      "scipy -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pandas -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pymssql -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "pyqt -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "protobuf -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "pyodbc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "mkl_fft -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "py-xgboost -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=5.4.0|>=7.2.0']\n",
      "krb5 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pytables -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "sqlite -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "mkl_random -> libstdcxx-ng[version='>=7.2.0|>=7.3.0|>=7.5.0']\n",
      "zstd -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "hdf5 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "matplotlib-base -> libstdcxx-ng[version='>=7.3.0|>=7.5.0']\n",
      "yaml -> libstdcxx-ng[version='>=7.3.0']\n",
      "libffi -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "lz4-c -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "scikit-learn -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "sip -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "zeromq -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "freetds -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "pytorch -> libstdcxx-ng[version='>=5.4.0|>=7.3.0|>=7.5.0']\n",
      "ninja -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "qt -> libstdcxx-ng[version='>=7.2.0|>=7.3.0|>=7.5.0|>=9.3.0']\n",
      "snappy -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "python=3.7 -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libprotobuf -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libtiff -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "numexpr -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pcre -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "ncurses -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "tensorboard -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "biopython -> libstdcxx-ng[version='>=7.2.0']\n",
      "ibm-wsrt-py37main-main -> libstdcxx-ng==9.1.0[build=*]\n",
      "gmp -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "pyzmq -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "numpy -> libstdcxx-ng[version='>=4.9|>=7.3.0']\n",
      "unixodbc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0']\n",
      "kiwisolver -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "grpcio -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "icu -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=7.2.0']\n",
      "blosc -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "scikit-image -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "gst-plugins-base -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "tensorflow-base -> libstdcxx-ng[version='>=5.4.0|>=7.2.0']\n",
      "glib -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=7.2.0']\n",
      "libxgboost -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.5.0|>=9.3.0|>=5.4.0|>=7.2.0']\n",
      "matplotlib -> libstdcxx-ng[version='>=7.2.0|>=7.3.0']\n",
      "expat -> libstdcxx-ng[version='>=4.9|>=7.3.0|>=7.2.0']\n",
      "freetype -> libstdcxx-ng[version='>=4.9']\n",
      "\n",
      "Package cytoolz conflicts for:\n",
      "scikit-image -> cytoolz[version='>=0.7.3']\n",
      "ibm-wsrt-py37main-main -> cytoolz==0.10.1[build=*]\n",
      "\n",
      "Package libopenblas conflicts for:\n",
      "numpy-base -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "numexpr -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "numpy -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "scipy -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.2,<0.3.3.0a0|>=0.3.3,<1.0a0']\n",
      "scikit-learn -> libopenblas[version='>=0.2.20,<0.2.21.0a0|>=0.3.3,<1.0a0']\n",
      "\n",
      "Package jupyterlab_server conflicts for:\n",
      "ibm-wsrt-py37main-main -> jupyterlab_server==1.1.0[build=*]\n",
      "jupyterlab -> jupyterlab_server[version='>=0.2.0,<0.3.0|>=1.0.0,<2.0.0|>=1.1.0,<2.0.0|>=2.0.0,<3.0.0']\n",
      "\n",
      "Package libcurl conflicts for:\n",
      "tensorflow-base -> libcurl[version='>=7.64.1,<8.0a0|>=7.71.1,<8.0a0']\n",
      "hdf5 -> libcurl[version='>=7.71.1,<8.0a0']\n",
      "\n",
      "Package backports.weakref conflicts for:\n",
      "tensorflow-estimator -> backports.weakref[version='>=1.0rc1']\n",
      "tensorflow-base -> backports.weakref[version='>=1.0.0inf.1,<2.0a0|>=1.0|>=1.0rc1']\n",
      "\n",
      "Package glib conflicts for:\n",
      "gstreamer -> glib[version='2.51.*|>=2.55.0,<2.56.0a0|>=2.56.2,<2.57.0a0|>=2.58.2,<2.59.0a0|>=2.58.3,<3.0a0|>=2.56.1,<3.0a0|>=2.53.6,<3.0a0']\n",
      "gst-plugins-base -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.58.2,<2.59.0a0|>=2.58.3,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> glib==2.65.0[build=*]\n",
      "dbus -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.56.2,<3.0a0|>=2.58.3,<3.0a0|>=2.63.1,<3.0a0']\n",
      "qt -> glib[version='>=2.53.6,<3.0a0|>=2.56.1,<3.0a0|>=2.56.2,<3.0a0|>=2.58.3,<3.0a0']\n",
      "\n",
      "Package libprotobuf conflicts for:\n",
      "ibm-wsrt-py37main-main -> libprotobuf==3.12.3[build=*]\n",
      "protobuf -> libprotobuf[version='3.10.0.*|3.10.1.*|3.11.0.*|3.11.1.*|3.11.2.*|3.11.3.*|3.11.4.*|3.12.1.*|3.12.3.*|3.12.4.*|3.13.0.*|3.13.0.1.*|3.14.0.*|>=3.14.0,<3.15.0a0|>=3.13.0.1,<3.14.0a0|>=3.13.0,<3.14.0a0|>=3.12.4,<3.13.0a0|>=3.12.3,<3.13.0a0|>=3.12.1,<3.13.0a0|>=3.11.4,<3.12.0a0|>=3.11.3,<3.12.0a0|>=3.11.2,<3.12.0a0|>=3.11.1,<3.12.0a0|>=3.11.0,<3.12.0a0|>=3.10.1,<3.11.0a0|>=3.10.0,<3.11.0a0|3.9.2.*|>=3.9.2,<3.10.0a0|3.9.1.*|>=3.9.1,<3.10.0a0|3.9.0.*|>=3.9.0,<3.10.0a0|3.8.0.*|>=3.8.0,<3.9.0a0|3.7.1.*|>=3.7.1,<3.8.0a0|3.7.0.*|>=3.7.0,<3.7.1.0a0|3.6.1.*|>=3.6.1,<3.6.2.0a0|3.6.0.*|>=3.6.0,<3.6.1.0a0|3.5.2.*|3.5.2|3.5.1.1|3.5.1|>=3.5.2,<3.6.0a0|>=3.5.1,<3.6.0a0|>=3.4.1,<3.5.0a0']\n",
      "tensorflow-base -> libprotobuf[version='>=3.6.1,<3.7.0a0|>=3.8.0,<3.9.0a0|>=3.9.1,<3.10.0a0']\n",
      "\n",
      "Package chardet conflicts for:\n",
      "ibm-wsrt-py37main-main -> chardet==3.0.4[build=*]\n",
      "requests -> chardet[version='>=3.0.2,<3.1.0|>=3.0.2,<4|>=3.0.2,<5']\n",
      "aiohttp -> chardet[version='>=2.0,<4.0']\n",
      "\n",
      "Package pillow conflicts for:\n",
      "matplotlib-base -> pillow[version='>=6.2.0']\n",
      "ibm-wsrt-py37main-main -> pillow==7.2.0[build=*]\n",
      "scikit-image -> pillow[version='>=1.7.8|>=2.1.0|>=4.3.0']\n",
      "bokeh -> pillow[version='>=4.0|>=7.1.0']\n",
      "imageio -> pillow\n",
      "\n",
      "Package click conflicts for:\n",
      "nltk -> click\n",
      "google-auth-oauthlib -> click\n",
      "ibm-wsrt-py37main-main -> click==7.1.2[build=*]\n",
      "\n",
      "Package pyshp conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyshp==2.1.0[build=*]\n",
      "arcgis=1.6.0 -> pyshp\n",
      "\n",
      "Package prometheus_client conflicts for:\n",
      "ibm-wsrt-py37main-main -> prometheus_client==0.8.0[build=*]\n",
      "notebook -> prometheus_client\n",
      "\n",
      "Package decorator conflicts for:\n",
      "ipython -> decorator\n",
      "plotly -> decorator[version='>=4.0.6']\n",
      "traitlets -> decorator\n",
      "networkx -> decorator[version='>=3.4.0|>=4.3.0|>=4.1.0']\n",
      "ibm-wsrt-py37main-main -> decorator==4.4.2[build=*]\n",
      "\n",
      "Package werkzeug conflicts for:\n",
      "tensorflow-base -> werkzeug[version='>=0.14.1,<1.0a0']\n",
      "ibm-wsrt-py37main-main -> werkzeug==1.0.1[build=*]\n",
      "tensorboard -> werkzeug[version='>=0.11.10|>=0.11.15|>=0.14']\n",
      "\n",
      "Package libiconv conflicts for:\n",
      "glib -> libiconv[version='1.15|>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "unixodbc -> libiconv[version='>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "libxml2 -> libiconv[version='1.15|>=1.15,<1.17.0a0|>=1.16,<1.17.0a0']\n",
      "fontconfig -> libiconv[version='1.15|>=1.15,<1.17.0a0']\n",
      "\n",
      "Package six conflicts for:\n",
      "jsonschema -> six[version='>=1.11.0']\n",
      "pytest -> six[version='>=1.10.0']\n",
      "pyopenssl -> six[version='>=1.5.2']\n",
      "ibm-wsrt-py37main-main -> six==1.15.0[build=*]\n",
      "traitlets -> six\n",
      "tensorflow-base -> six[version='>=1.10.0|>=1.12.0|>=1.12.0,<2.0a0']\n",
      "mkl-service -> six\n",
      "cryptography -> six[version='>=1.4.1']\n",
      "bokeh -> six[version='>=1.5.2']\n",
      "packaging -> six\n",
      "tensorflow-estimator -> six[version='>=1.10.0']\n",
      "arcgis=1.6.0 -> six\n",
      "pytables -> six\n",
      "cycler -> six\n",
      "html5lib -> six[version='>=1.9']\n",
      "prompt-toolkit -> six[version='>=1.9.0']\n",
      "retrying -> six[version='>=1.7.0']\n",
      "keras-preprocessing -> six[version='>=1.9.0']\n",
      "patsy -> six\n",
      "python-dateutil -> six[version='>=1.5']\n",
      "google-auth -> six[version='>=1.9.0|>=1.9.0,<2dev']\n",
      "mock -> six\n",
      "plotly -> six\n",
      "grpcio -> six[version='>=1.5.2']\n",
      "tensorboard -> six[version='>=1.10.0|>=1.12']\n",
      "nltk -> six\n",
      "scikit-image -> six[version='>=1.4|>=1.7.3']\n",
      "protobuf -> six\n",
      "pyrsistent -> six\n",
      "bleach -> six\n",
      "h5py -> six\n",
      "google-pasta -> six\n",
      "absl-py -> six\n",
      "\n",
      "Package libsodium conflicts for:\n",
      "pyzmq -> libsodium[version='>=1.0.16,<1.0.17.0a0|>=1.0.17,<1.0.18.0a0|>=1.0.18,<1.0.19.0a0']\n",
      "zeromq -> libsodium[version='>=1.0.16,<1.0.17.0a0|>=1.0.17,<1.0.18.0a0|>=1.0.18,<1.0.19.0a0']\n",
      "ibm-wsrt-py37main-main -> libsodium==1.0.18[build=*]\n",
      "\n",
      "Package cloudpickle conflicts for:\n",
      "scikit-image -> cloudpickle[version='>=0.2.1']\n",
      "ibm-wsrt-py37main-main -> cloudpickle==1.5.0[build=*]\n",
      "\n",
      "Package google-auth conflicts for:\n",
      "google-auth-oauthlib -> google-auth\n",
      "ibm-wsrt-py37main-main -> google-auth==1.22.0[build=*]\n",
      "tensorboard -> google-auth[version='>=1.6.3,<2']\n",
      "\n",
      "Package zipp conflicts for:\n",
      "ibm-wsrt-py37main-main -> zipp==3.1.0[build=*]\n",
      "importlib-metadata -> zipp[version='>=0.5']\n",
      "importlib_metadata -> zipp[version='>=0.3.2|>=0.5']\n",
      "\n",
      "Package zeromq conflicts for:\n",
      "pyzmq -> zeromq[version='4.1.*|4.2.1|>=4.2.3,<4.3|>=4.2.5,<4.3|>=4.2.5,<4.3.0a0|>=4.3.1,<4.4.0a0|>=4.3.2,<4.4.0a0|>=4.3.3,<4.4.0a0|>=4.2.5,<4.2.6.0a0|4.2.*']\n",
      "ibm-wsrt-py37main-main -> zeromq==4.3.2[build=*]\n",
      "\n",
      "Package mpmath conflicts for:\n",
      "ibm-wsrt-py37main-main -> mpmath==1.1.0[build=*]\n",
      "sympy -> mpmath[version='>=0.19']\n",
      "\n",
      "Package _libgcc_mutex conflicts for:\n",
      "libgcc-ng -> _libgcc_mutex[version='*|0.1',build='conda_forge|main']\n",
      "ibm-wsrt-py37main-main -> _libgcc_mutex==0.1[build=*]\n",
      "\n",
      "Package openssl conflicts for:\n",
      "krb5 -> openssl[version='1.0.*|>=1.0.2l,<1.0.3a|>=1.0.2m,<1.0.3a|>=1.0.2n,<1.0.3a|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1d,<1.1.2a']\n",
      "libpq -> openssl[version='1.0.*|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1f,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1b,<1.1.2a|>=1.0.2o,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "grpcio -> openssl[version='>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a']\n",
      "hdf5 -> openssl[version='>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a']\n",
      "freetds -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1e,<1.1.2a|>=1.0.2n,<1.0.3a']\n",
      "python=3.7 -> openssl[version='>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1e,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1c,<1.1.2a|>=1.1.1b,<1.1.2a']\n",
      "ibm-wsrt-py37main-main -> openssl==1.1.1i[build=*]\n",
      "psycopg2 -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1f,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.0.2n,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "qt -> openssl[version='1.0.*|1.1.*|>=1.1.1g,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.0.2p,<1.0.3a|>=1.0.2r,<1.0.3a|>=1.0.2o,<1.0.3a|>=1.0.2n,<1.0.3a']\n",
      "cryptography -> openssl[version='1.0.*|>=1.0.2o,<1.0.3a|>=1.0.2p,<1.0.3a|>=1.1.1a,<1.1.2a|>=1.1.1d,<1.1.2a|>=1.1.1g,<1.1.2a|>=1.1.1h,<1.1.2a|>=1.1.1i,<1.1.2a|>=1.1.1c,<1.1.2a|>=1.1.1b,<1.1.2a|>=1.0.2n,<1.0.3a|>=1.0.2m,<1.0.3a']\n",
      "\n",
      "Package xz conflicts for:\n",
      "gst-plugins-base -> xz[version='>=5.2.3,<6.0a0|>=5.2.4,<5.3.0a0']\n",
      "gstreamer -> xz[version='>=5.2.3,<6.0a0|>=5.2.4,<5.3.0a0']\n",
      "ibm-wsrt-py37main-main -> xz==5.2.5[build=*]\n",
      "python=3.7 -> xz[version='>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0']\n",
      "libxml2 -> xz[version='5.0.*|5.2.*|>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0|>=5.2.3,<6.0a0']\n",
      "zstd -> xz[version='>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0']\n",
      "libtiff -> xz[version='5.0.*|5.2.*|>=5.2.3,<5.3.0a0|>=5.2.4,<5.3.0a0|>=5.2.5,<5.3.0a0|>=5.2.5,<6.0a0|>=5.2.4,<6.0a0|>=5.2.3,<6.0a0']\n",
      "\n",
      "Package pexpect conflicts for:\n",
      "ibm-wsrt-py37main-main -> pexpect==4.8.0[build=*]\n",
      "ipython -> pexpect[version='>4.3']\n",
      "\n",
      "Package _py-xgboost-mutex conflicts for:\n",
      "py-xgboost -> _py-xgboost-mutex[version='1.0|2.0',build='gpu_0|cpu_0']\n",
      "ibm-wsrt-py37main-main -> _py-xgboost-mutex==2.0=cpu_0\n",
      "\n",
      "Package funcsigs conflicts for:\n",
      "mock -> funcsigs\n",
      "pytest -> funcsigs[version='>=1.0']\n",
      "\n",
      "Package brotlipy conflicts for:\n",
      "ibm-wsrt-py37main-main -> brotlipy==0.7.0[build=*]\n",
      "urllib3 -> brotlipy[version='>=0.6.0']\n",
      "\n",
      "Package mkl_random conflicts for:\n",
      "numpy -> mkl_random[version='>=1.0.2,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> mkl_random==1.1.1[build=*]\n",
      "\n",
      "Package pycparser conflicts for:\n",
      "ibm-wsrt-py37main-main -> pycparser==2.20[build=*]\n",
      "cffi -> pycparser\n",
      "\n",
      "Package libxgboost conflicts for:\n",
      "ibm-wsrt-py37main-main -> libxgboost==0.90[build=*]\n",
      "py-xgboost -> libxgboost[version='0.7|0.71|0.72|0.72|0.72|0.80|0.80|0.80|0.80|0.80|0.80|0.81|0.81|0.82|0.82|0.90|0.90|0.90|0.90|1.0.2|1.0.2|1.1.1|1.2.0|1.3.0|0.90|0.90|0.90|0.90|0.90|0.90',build='hf484d3e_0|hf484d3e_0|h51060c3_0|h4d71fd4_0|hf484d3e_1|he6710b0_1|hfc679d8_1|hfc679d8_0|he1b5a44_0|he1b5a44_2|he1b5a44_3|he1b5a44_0|he1b5a44_0|he1b5a44_0|h9c3ff4c_0|h9c3ff4c_1|he1b5a44_1|he1b5a44_4|he1b5a44_1|he1b5a44_1|hf484d3e_1000|hf484d3e_1001|h6edc907_0|h688424c_0|he6710b0_0|h6edc907_0|h6cbba54_0|he6710b0_0|h87a4715_0|h83be7fe_0|hf484d3e_0']\n",
      "\n",
      "Package importlib-metadata conflicts for:\n",
      "keyring -> importlib-metadata\n",
      "pytest -> importlib-metadata[version='>=0.12']\n",
      "ibm-wsrt-py37main-main -> importlib-metadata==1.6.1[build=*]\n",
      "importlib_metadata -> importlib-metadata[version='>=1.1.3,<1.1.4.0a0|>=1.5.0,<1.5.1.0a0|>=1.5.2,<1.5.3.0a0|>=1.6.0,<1.6.1.0a0|>=1.6.1,<1.6.2.0a0|>=1.7.0,<1.7.1.0a0|>=2.0.0,<2.0.1.0a0|>=3.0.0,<3.0.1.0a0|>=3.1.0,<3.1.1.0a0|>=3.1.1,<3.1.2.0a0|>=3.3.0,<3.3.1.0a0']\n",
      "markdown -> importlib-metadata\n",
      "\n",
      "Package freetds conflicts for:\n",
      "pymssql -> freetds[version='>=1.0.91,<2.0a0|>=1.0.97,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> freetds==1.00.97[build=*]\n",
      "\n",
      "Package libgfortran4 conflicts for:\n",
      "libgfortran-ng -> libgfortran4=7.5.0\n",
      "blas -> libgfortran4[version='>=7.5.0']\n",
      "scipy -> libgfortran4[version='>=7.5.0']\n",
      "hdf5 -> libgfortran4[version='>=7.5.0']\n",
      "\n",
      "Package bleach conflicts for:\n",
      "ibm-wsrt-py37main-main -> bleach==3.1.5[build=*]\n",
      "nbconvert -> bleach\n",
      "tensorboard -> bleach[version='1.5.0|>=1.5.0,<1.5.1.0a0']\n",
      "\n",
      "Package pytest conflicts for:\n",
      "ibm-wsrt-py37main-main -> pytest==5.4.3[build=*]\n",
      "astropy -> pytest[version='<3.7|<4']\n",
      "\n",
      "Package pyjwt conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyjwt==1.7.1[build=*]\n",
      "oauthlib -> pyjwt[version='>=1.0.0']\n",
      "\n",
      "Package beautifulsoup4 conflicts for:\n",
      "soupsieve -> beautifulsoup4\n",
      "ibm-wsrt-py37main-main -> beautifulsoup4==4.9.1[build=*]\n",
      "\n",
      "Package blosc conflicts for:\n",
      "ibm-wsrt-py37main-main -> blosc==1.19.0[build=*]\n",
      "pytables -> blosc[version='>=1.14.3,<2.0a0|>=1.14.4,<2.0a0|>=1.15.0,<2.0a0|>=1.16.3,<2.0a0|>=1.17.0,<2.0a0|>=1.18.1,<2.0a0|>=1.20.1,<2.0a0']\n",
      "\n",
      "Package libedit conflicts for:\n",
      "ibm-wsrt-py37main-main -> libedit==3.1.20191231[build=*]\n",
      "krb5 -> libedit[version='>=3.1,<4.0a0|>=3.1.20170329,<3.2.0a0|>=3.1.20170329,<4.0a0|>=3.1.20191231,<3.2.0a0|>=3.1.20191231,<4.0a0|>=3.1.20181209,<3.2.0a0|>=3.1.20181209,<4.0a0']\n",
      "sqlite -> libedit[version='>=3.1.20170329,<3.2.0a0|>=3.1.20181209,<3.2.0a0|>=3.1.20191231,<3.2.0a0']\n",
      "unixodbc -> libedit[version='>=3.1.20170329,<3.2.0a0|>=3.1.20191231,<3.2.0a0']\n",
      "\n",
      "Package send2trash conflicts for:\n",
      "notebook -> send2trash\n",
      "ibm-wsrt-py37main-main -> send2trash==1.5.0[build=*]\n",
      "\n",
      "Package more-itertools conflicts for:\n",
      "zipp -> more-itertools\n",
      "pytest -> more-itertools[version='>=4.0,<6.0|>=4.0|>=4.0.0']\n",
      "ibm-wsrt-py37main-main -> more-itertools==8.4.0[build=*]\n",
      "\n",
      "Package krb5 conflicts for:\n",
      "libpq -> krb5[version='>=1.14.2,<1.15.0a0|>=1.16,<1.17.0a0|>=1.16.1,<1.17.0a0|>=1.16.2,<1.17.0a0|>=1.16.3,<1.17.0a0|>=1.16.4,<1.17.0a0|>=1.17.1,<1.18.0a0']\n",
      "ibm-wsrt-py37main-main -> krb5==1.17.1[build=*]\n",
      "\n",
      "Package libtiff conflicts for:\n",
      "pillow -> libtiff[version='4.*|4.0.*|>=4.0.10,<5.0a0|>=4.1.0,<5.0a0|>=4.0.9,<5.0a0|>=4.0.8,<4.0.10|>=4.0.3,<4.0.8|4.0.6|>=4.0.8,<5.0a0']\n",
      "lcms2 -> libtiff[version='>=4.0.10,<5.0a0|>=4.1.0,<5.0a0']\n",
      "qt -> libtiff[version='4.0.*|>=4.0.10,<5.0a0']\n",
      "ibm-wsrt-py37main-main -> libtiff==4.1.0[build=*]\n",
      "\n",
      "Package sqlite conflicts for:\n",
      "qt -> sqlite[version='>=3.20.1,<4.0a0|>=3.22.0,<4.0a0|>=3.23.1,<4.0a0|>=3.24.0,<4.0a0|>=3.25.3,<4.0a0|>=3.26.0,<4.0a0|>=3.28.0,<4.0a0|>=3.29.0,<4.0a0|>=3.30.1,<4.0a0|>=3.33.0,<4.0a0|>=3.34.0,<4.0a0']\n",
      "ibm-wsrt-py37main-main -> sqlite==3.33.0[build=*]\n",
      "python=3.7 -> sqlite[version='>=3.24.0,<4.0a0|>=3.25.1,<4.0a0|>=3.25.2,<4.0a0|>=3.25.3,<4.0a0|>=3.26.0,<4.0a0|>=3.28.0,<4.0a0|>=3.30.1,<4.0a0|>=3.32.3,<4.0a0|>=3.33.0,<4.0a0|>=3.34.0,<4.0a0|>=3.31.1,<4.0a0|>=3.29.0,<4.0a0|>=3.27.2,<4.0a0']\n",
      "\n",
      "Package jinja2 conflicts for:\n",
      "bokeh -> jinja2[version='>=2.7']\n",
      "jupyterlab_server -> jinja2[version='>2.10*|>=2.10']\n",
      "jupyterlab -> jinja2[version='>=2.10']\n",
      "nbconvert -> jinja2[version='>=2.4']\n",
      "ibm-wsrt-py37main-main -> jinja2==2.11.2[build=*]\n",
      "notebook -> jinja2\n",
      "\n",
      "Package ipykernel conflicts for:\n",
      "widgetsnbextension -> ipykernel[version='>=4.5.1']\n",
      "ibm-wsrt-py37main-main -> ipykernel==5.3.0[build=*]\n",
      "notebook -> ipykernel\n",
      "ipywidgets -> ipykernel[version='>=4.2.2|>=4.5.1']\n",
      "\n",
      "Package keras-applications conflicts for:\n",
      "tensorflow-base -> keras-applications[version='>=1.0.5|>=1.0.6|>=1.0.8|>=1.0.8,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> keras-applications==1.0.8[build=*]\n",
      "\n",
      "Package termcolor conflicts for:\n",
      "tensorflow-base -> termcolor[version='>=1.1.0|>=1.1.0,<2.0a0']\n",
      "tensorflow-estimator -> termcolor[version='>=1.1.0']\n",
      "ibm-wsrt-py37main-main -> termcolor==1.1.0[build=*]\n",
      "\n",
      "Package ipython conflicts for:\n",
      "ipywidgets -> ipython[version='>=4.0.0']\n",
      "ipykernel -> ipython[version='>=4.0.0|>=4.0|>=5.0']\n",
      "ibm-wsrt-py37main-main -> ipython==7.15.0[build=*]\n",
      "\n",
      "Package keras-preprocessing conflicts for:\n",
      "tensorflow-base -> keras-preprocessing[version='>=1.0.3|>=1.0.5,<2.0a0|>=1.0.5|>=1.1.0']\n",
      "ibm-wsrt-py37main-main -> keras-preprocessing==1.1.0[build=*]\n",
      "\n",
      "Package grpcio conflicts for:\n",
      "tensorflow-estimator -> grpcio[version='>=1.8.6']\n",
      "ibm-wsrt-py37main-main -> grpcio==1.27.2[build=*]\n",
      "tensorflow-base -> grpcio[version='>=1.14.1,<2.0a0|>=1.14.1|>=1.16.1|>=1.8.6']\n",
      "tensorboard -> grpcio[version='>=1.14|>=1.24.3|>=1.6.3']\n",
      "\n",
      "Package libgcc conflicts for:\n",
      "scipy -> libgcc\n",
      "pytorch -> libgcc\n",
      "pyqt -> libgcc\n",
      "\n",
      "Package networkx conflicts for:\n",
      "scikit-image -> networkx[version='>=1.8,<2.0|>=1.8|>=2.0']\n",
      "ibm-wsrt-py37main-main -> networkx==2.4[build=*]\n",
      "\n",
      "Package requests conflicts for:\n",
      "requests-oauthlib -> requests[version='>=2.0.0']\n",
      "ibm-wsrt-py37main-main -> requests==2.24.0[build=*]\n",
      "bokeh -> requests[version='>=1.2.3']\n",
      "plotly -> requests\n",
      "jupyterlab_server -> requests\n",
      "tensorboard -> requests[version='>=2.21.0,<3']\n",
      "nltk -> requests\n",
      "\n",
      "Package importlib_metadata conflicts for:\n",
      "jsonschema -> importlib_metadata\n",
      "pluggy -> importlib_metadata[version='>=0.12|>=0.9']\n",
      "pytest -> importlib_metadata[version='>=0.12']\n",
      "keyring -> importlib_metadata[version='>=1']\n",
      "ibm-wsrt-py37main-main -> importlib_metadata==1.6.1[build=*]\n",
      "\n",
      "Package gettext conflicts for:\n",
      "glib -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "gst-plugins-base -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "gstreamer -> gettext[version='>=0.19.8.1,<1.0a0']\n",
      "\n",
      "Package pyzmq conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyzmq==19.0.1[build=*]\n",
      "jupyter_client -> pyzmq[version='>=13']\n",
      "notebook -> pyzmq[version='>=17']\n",
      "\n",
      "Package widgetsnbextension conflicts for:\n",
      "ipywidgets -> widgetsnbextension[version='>=1.2.2|>=1.2.3|>=1.2.6|>=1.2.6,<2|>=2.0.0|>=2.0.0,<3.0.0|>=3.0.0|>=3.0.0,<3.1.0|>=3.1.0,<3.2.0|>=3.2.0,<3.3.0|>=3.3.0,<3.4.0|>=3.4.0,<3.5.0|>=3.5.0,<3.6.0|>=3.2.0,<4.0.0|>=3.1.0,<4.0.0|>=3.0.0,<4.0.0|>=3.1.0,<4.0']\n",
      "arcgis=1.6.0 -> widgetsnbextension[version='>=3']\n",
      "ibm-wsrt-py37main-main -> widgetsnbextension==3.5.1[build=*]\n",
      "\n",
      "Package libxml2 conflicts for:\n",
      "libxslt -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "qt -> libxml2[version='>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0']\n",
      "fontconfig -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "lxml -> libxml2[version='2.9.*|>=2.9.10,<2.10.0a0|>=2.9.9,<2.10.0a0|>=2.9.8,<2.10.0a0|2.9.3|>=2.9.7,<2.10.0a0|>=2.9.4,<2.10.0a0']\n",
      "ibm-wsrt-py37main-main -> libxml2==2.9.10[build=*]\n",
      "\n",
      "Package jupyter_client conflicts for:\n",
      "nbconvert -> jupyter_client[version='>=4.2']\n",
      "notebook -> jupyter_client[version='>=5.2.0|>=5.3.1|>=5.3.4']\n",
      "ipykernel -> jupyter_client\n",
      "ibm-wsrt-py37main-main -> jupyter_client==6.1.3[build=*]\n",
      "\n",
      "Package libblas conflicts for:\n",
      "pytorch -> libblas[version='*|>=3.8.0,<4.0a0',build=*_mkl]\n",
      "scipy -> libblas[version='>=3.8.0,<4.0a0']\n",
      "blas -> libblas[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_h6e990d7_netlib|2_blis|3_blis|4_openblas|4_mkl|5_blis|5_mkl|6_blis|6_openblas|6_h6e990d7_netlib|7_blis|7_openblas|8_mkl|9_blis|9_mkl|10_openblas|10_h86c2bf4_netlib|11_blis|11_openblas|11_h86c2bf4_netlib|12_openblas|13_openblas|14_blis|14_openblas|15_mkl|15_openblas|16_openblas|20_mkl|21_mkl|19_mkl|18_mkl|17_openblas|16_mkl|16_blis|15_blis|14_mkl|13_mkl|13_blis|12_mkl|12_blis|11_mkl|10_mkl|10_blis|9_openblas|8_h6e990d7_netlib|8_openblas|8_blis|7_h6e990d7_netlib|7_mkl|6_mkl|5_openblas|5_h6e990d7_netlib|4_h6e990d7_netlib|4_blis|3_openblas|2_openblas|1_h6e990d7_netlib|0_openblas|0_blis']\n",
      "numpy -> libblas[version='>=3.8.0,<4.0a0']\n",
      "\n",
      "Package libpng conflicts for:\n",
      "tensorflow-base -> libpng[version='>=1.6.37,<1.7.0a0']\n",
      "gst-plugins-base -> libpng[version='>=1.6.37,<1.7.0a0']\n",
      "freetype -> libpng[version='1.6.*|>=1.6.21,<1.7|>=1.6.22,<1.6.31|>=1.6.32,<1.6.35|>=1.6.34,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.28,<1.7|>=1.6.23,<1.7|>=1.6.32,<1.7.0a0']\n",
      "ibm-wsrt-py37main-main -> libpng==1.6.37[build=*]\n",
      "qt -> libpng[version='>=1.6.28,<1.7|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.36,<1.7.0a0|>=1.6.34,<1.7.0a0|>=1.6.32,<1.7.0a0']\n",
      "matplotlib -> libpng[version='>=1.6.23,<1.7|>=1.6.37,<1.7.0a0|>=1.6.36,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.34,<1.7.0a0|>=1.6.32,<1.7.0a0']\n",
      "fontconfig -> libpng[version='>=1.6.21,<1.7|>=1.6.22,<1.6.31|>=1.6.32,<1.6.35|>=1.6.34,<1.7.0a0|>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0|>=1.6.28,<1.7|>=1.6.23,<1.7|>=1.6.32,<1.7.0a0']\n",
      "matplotlib-base -> libpng[version='>=1.6.35,<1.7.0a0|>=1.6.37,<1.7.0a0']\n",
      "\n",
      "Package tensorflow-estimator conflicts for:\n",
      "tensorflow-base -> tensorflow-estimator[version='>=1.13.0,<1.14.0a0|>=1.14.0rc0,<1.15.0a0']\n",
      "ibm-wsrt-py37main-main -> tensorflow-estimator==2.1.0[build=*]\n",
      "\n",
      "Package requests-oauthlib conflicts for:\n",
      "ibm-wsrt-py37main-main -> requests-oauthlib==1.3.0[build=*]\n",
      "google-auth-oauthlib -> requests-oauthlib[version='>=0.7.0|>=0.7.0,<1dev']\n",
      "\n",
      "Package subprocess32 conflicts for:\n",
      "matplotlib-base -> subprocess32\n",
      "jupyterlab -> subprocess32\n",
      "matplotlib -> subprocess32\n",
      "\n",
      "Package toolz conflicts for:\n",
      "ibm-wsrt-py37main-main -> toolz==0.10.0[build=*]\n",
      "cytoolz -> toolz[version='>=0.10.0|>=0.8.0']\n",
      "scikit-image -> toolz[version='>=0.7.3|>=0.7.4']\n",
      "\n",
      "Package mkl conflicts for:\n",
      "scipy -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "mkl_fft -> mkl[version='>=2018.0.3,<2019.0a0|>=2019.1,<2020.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.2,<2021.0a0|>=2019.4,<2021.0a0|>=2019.3,<2021.0a0|>=2019.1,<2021.0a0']\n",
      "numexpr -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.1,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "pytorch -> mkl[version='2019.*|>=2020.4,<2021.0a0|>=2019.4,<2021.0a0|>=2019.1,<2021.0a0|>=2018.0.3,<2019.0a0|>=2018.0.2,<2019.0a0']\n",
      "numpy -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.1,<2019.0a0|>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "mkl_random -> mkl[version='>=2018.0.3,<2019.0a0|>=2019.1,<2020.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.0,<2021.0a0|>=2020.2,<2021.0a0|>=2020.1,<2021.0a0|>=2019.4,<2021.0a0|>=2019.1,<2021.0a0']\n",
      "ibm-wsrt-py37main-main -> mkl==2020.1[build=*]\n",
      "mkl-service -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2020.0a0|>=2019.4,<2020.0a0|>=2020.2,<2021.0a0|>=2019.4,<2021.0a0|>=2019.3,<2021.0a0']\n",
      "blas -> mkl\n",
      "tensorflow-base -> mkl[version='>=2018.0.2,<2019.0a0']\n",
      "scikit-learn -> mkl[version='>=2018.0.0,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "numpy-base -> mkl[version='>=2018.0.2,<2019.0a0|>=2018.0.3,<2019.0a0|>=2019.1,<2021.0a0|>=2019.3,<2021.0a0|>=2019.4,<2021.0a0']\n",
      "\n",
      "Package traitlets conflicts for:\n",
      "ipywidgets -> traitlets[version='>=4.2.1|>=4.3.1|>=4.3.1,<5.0.0|>=4.3.1,<6.0.0']\n",
      "ipython -> traitlets[version='>=4.2']\n",
      "ibm-wsrt-py37main-main -> traitlets==4.3.3[build=*]\n",
      "nbconvert -> traitlets[version='>=4.2']\n",
      "notebook -> traitlets[version='>=4.2.1|>=4.3']\n",
      "jupyter_client -> traitlets\n",
      "widgetsnbextension -> traitlets[version='>=4.3.1']\n",
      "jupyter_core -> traitlets\n",
      "ipykernel -> traitlets[version='>=4.1']\n",
      "nbformat -> traitlets[version='>=4.1']\n",
      "\n",
      "Package attrs conflicts for:\n",
      "ibm-wsrt-py37main-main -> attrs==19.3.0[build=*]\n",
      "aiohttp -> attrs[version='>=17.3.0|>=17.4.0']\n",
      "jsonschema -> attrs[version='>=17.4.0']\n",
      "pytest -> attrs[version='>=17.2.0|>=17.4.0,<=19.1.0|>=17.4.0|>=19.2.0']\n",
      "\n",
      "Package pyasn1 conflicts for:\n",
      "rsa -> pyasn1[version='>=0.1.3']\n",
      "pyasn1-modules -> pyasn1[version='0.3.3|>=0.3.4,<0.4.0|>=0.4.1,<0.5.0|>=0.4.6,<0.5.0|>=0.1.8']\n",
      "ibm-wsrt-py37main-main -> pyasn1==0.4.8[build=*]\n",
      "google-auth -> pyasn1[version='>=0.1.7,<1dev']\n",
      "\n",
      "Package libgfortran-ng conflicts for:\n",
      "numpy-base -> libgfortran-ng[version='>=7,<8.0a0']\n",
      "numpy -> libgfortran-ng[version='>=4.9|>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "blas -> libgfortran-ng[version='>=7,<8.0a0']\n",
      "ibm-wsrt-py37main-main -> libgfortran-ng==7.3.0[build=*]\n",
      "scipy -> libgfortran-ng[version='>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "hdf5 -> libgfortran-ng[version='>=7,<8.0a0|>=7.2.0,<8.0a0']\n",
      "\n",
      "Package enum34 conflicts for:\n",
      "absl-py -> enum34\n",
      "grpcio -> enum34[version='>=1.0.4']\n",
      "traitlets -> enum34\n",
      "imageio -> enum34\n",
      "pyqt -> enum34\n",
      "tensorflow-base -> enum34[version='>=1.1.6|>=1.1.6,<2.0a0']\n",
      "tensorflow-estimator -> enum34[version='>=1.1.6']\n",
      "brotlipy -> enum34\n",
      "cryptography -> enum34\n",
      "\n",
      "Package retrying conflicts for:\n",
      "plotly -> retrying[version='>=1.3.3']\n",
      "ibm-wsrt-py37main-main -> retrying==1.3.3[build=*]\n",
      "\n",
      "Package functools32 conflicts for:\n",
      "matplotlib-base -> functools32\n",
      "jsonschema -> functools32\n",
      "tensorflow-base -> functools32[version='>=3.2.3.2']\n",
      "matplotlib -> functools32\n",
      "\n",
      "Package statsmodels conflicts for:\n",
      "ibm-wsrt-py37main-main -> statsmodels==0.11.1[build=*]\n",
      "seaborn -> statsmodels[version='>=0.5.0|>=0.8.0']\n",
      "\n",
      "Package nbformat conflicts for:\n",
      "notebook -> nbformat\n",
      "ibm-wsrt-py37main-main -> nbformat==5.0.7[build=*]\n",
      "widgetsnbextension -> nbformat[version='>=4.2.0']\n",
      "nbconvert -> nbformat[version='>=4.4']\n",
      "ipywidgets -> nbformat[version='>=4.2.0']\n",
      "plotly -> nbformat[version='>=4.2']\n",
      "\n",
      "Package gst-plugins-base conflicts for:\n",
      "qt -> gst-plugins-base[version='>=1.12.2,<1.13.0a0|>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.4,<1.15.0a0|>=1.14.0,<1.15.0a0']\n",
      "ibm-wsrt-py37main-main -> gst-plugins-base==1.14.0[build=*]\n",
      "\n",
      "Package numexpr conflicts for:\n",
      "ibm-wsrt-py37main-main -> numexpr==2.7.1[build=*]\n",
      "pytables -> numexpr\n",
      "\n",
      "Package secretstorage conflicts for:\n",
      "keyring -> secretstorage[version='>=3|>=3.2']\n",
      "ibm-wsrt-py37main-main -> secretstorage==3.1.0[build=*]\n",
      "\n",
      "Package testpath conflicts for:\n",
      "ibm-wsrt-py37main-main -> testpath==0.4.4[build=*]\n",
      "nbconvert -> testpath\n",
      "\n",
      "Package webencodings conflicts for:\n",
      "ibm-wsrt-py37main-main -> webencodings==0.5.1[build=*]\n",
      "tensorboard -> webencodings\n",
      "bleach -> webencodings\n",
      "html5lib -> webencodings\n",
      "\n",
      "Package certifi conflicts for:\n",
      "requests -> certifi[version='>=2017.4.17']\n",
      "matplotlib-base -> certifi[version='>=2020.06.20']\n",
      "tornado -> certifi\n",
      "setuptools -> certifi[version='>=2016.09|>=2016.9.26']\n",
      "ibm-wsrt-py37main-main -> certifi==2020.12.5[build=*]\n",
      "urllib3 -> certifi\n",
      "\n",
      "Package jedi conflicts for:\n",
      "ipython -> jedi[version='>=0.10|>=0.16']\n",
      "ibm-wsrt-py37main-main -> jedi==0.17.1[build=*]\n",
      "\n",
      "Package pysocks conflicts for:\n",
      "urllib3 -> pysocks[version='>=1.5.6,<2.0,!=1.5.7']\n",
      "ibm-wsrt-py37main-main -> pysocks==1.7.1[build=*]\n",
      "\n",
      "Package blinker conflicts for:\n",
      "oauthlib -> blinker\n",
      "ibm-wsrt-py37main-main -> blinker==1.4[build=*]\n",
      "\n",
      "Package c-ares conflicts for:\n",
      "grpcio -> c-ares[version='>=1.14.0,<2.0a0|>=1.15.0,<2.0a0|>=1.16.1,<2.0a0|>=1.17.1,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> c-ares==1.15.0[build=*]\n",
      "\n",
      "Package dask-core conflicts for:\n",
      "ibm-wsrt-py37main-main -> dask-core==2.20.0[build=*]\n",
      "scikit-image -> dask-core[version='>=0.15|>=0.15.0|>=0.9.0']\n",
      "\n",
      "Package lcms2 conflicts for:\n",
      "pillow -> lcms2[version='>=2.11,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> lcms2==2.11[build=*]\n",
      "\n",
      "Package olefile conflicts for:\n",
      "ibm-wsrt-py37main-main -> olefile==0.46[build=*]\n",
      "pillow -> olefile\n",
      "\n",
      "Package tensorboard conflicts for:\n",
      "ibm-wsrt-py37main-main -> tensorboard==2.1.0[build=*]\n",
      "tensorflow-base -> tensorboard[version='>=1.13.0,<1.14.0a0|>=1.14.0,<1.15.0a0']\n",
      "\n",
      "Package pathlib2 conflicts for:\n",
      "importlib-metadata -> pathlib2\n",
      "pytest -> pathlib2[version='>=2.2.0']\n",
      "ipython -> pathlib2\n",
      "testpath -> pathlib2\n",
      "pickleshare -> pathlib2\n",
      "importlib_metadata -> pathlib2\n",
      "\n",
      "Package pyparsing conflicts for:\n",
      "packaging -> pyparsing[version='>=2.0.2']\n",
      "nltk -> pyparsing\n",
      "matplotlib-base -> pyparsing[version='>=2.0.3,!=2.0.4,!=2.1.2,!=2.1.6']\n",
      "ibm-wsrt-py37main-main -> pyparsing==2.4.7[build=*]\n",
      "matplotlib -> pyparsing\n",
      "\n",
      "Package ld_impl_linux-64 conflicts for:\n",
      "python=3.7 -> ld_impl_linux-64[version='>=2.34']\n",
      "ibm-wsrt-py37main-main -> ld_impl_linux-64==2.33.1[build=*]\n",
      "\n",
      "Package typing-extensions conflicts for:\n",
      "yarl -> typing-extensions[version='>=3.7.4']\n",
      "aiohttp -> typing-extensions[version='>=3.6.5']\n",
      "\n",
      "Package yaml conflicts for:\n",
      "ibm-wsrt-py37main-main -> yaml==0.2.5[build=*]\n",
      "pyyaml -> yaml[version='>=0.1.7,<0.2.0a0|>=0.2.2,<0.3.0a0|>=0.2.5,<0.3.0a0']\n",
      "\n",
      "Package hdf5 conflicts for:\n",
      "pytables -> hdf5[version='1.10.1.*|1.10.1|>=1.10.3,<1.10.4.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.6,<1.10.7.0a0|>=1.10.2,<1.10.3.0a0|1.8.18|1.8.18.*|1.8.17|1.8.17.*|>=1.8.20,<1.9.0a0|>=1.8.18,<1.8.19.0a0|>=1.10.1,<1.10.2.0a0']\n",
      "ibm-wsrt-py37main-main -> hdf5==1.10.4[build=*]\n",
      "h5py -> hdf5[version='1.10.1|1.10.1.*|1.10.2.*|>=1.10.3,<1.10.4.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.4,<1.10.5.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.5,<1.10.6.0a0|>=1.10.6,<1.10.7.0a0|>=1.10.2,<1.10.3.0a0|1.8.18|1.8.18.*|1.8.17|1.8.17.*|1.8.17.*|1.8.15.*|>=1.8.20,<1.9.0a0|>=1.8.18,<1.8.19.0a0|>=1.10.1,<1.10.2.0a0',build='mpi_mpich_*|mpi_openmpi_*|mpi_mpich_*|mpi_openmpi_*|mpi_openmpi_*|mpi_mpich_*']\n",
      "\n",
      "Package keras conflicts for:\n",
      "keras-preprocessing -> keras[version='>=2.1.6']\n",
      "keras-applications -> keras[version='>=2.1.6']\n",
      "\n",
      "Package cycler conflicts for:\n",
      "ibm-wsrt-py37main-main -> cycler==0.10.0[build=*]\n",
      "matplotlib -> cycler[version='>=0.10']\n",
      "matplotlib-base -> cycler[version='>=0.10']\n",
      "\n",
      "Package cudatoolkit conflicts for:\n",
      "pytorch -> cudatoolkit[version='10.0.*|10.0|10.0.*|10.2|10.2.*|10.1|10.1.*|9.2|9.2.*|>=10.1.243,<10.2.0a0|>=9.2,<9.3.0a0|>=10.0.130,<10.1.0a0|9.2.*|>=9.0,<9.1.0a0|>=8.0,<8.1.0a0|9.0.*|8.0.*|7.5.*']\n",
      "libxgboost -> cudatoolkit[version='8.0.*|>=10.0.130,<10.1.0a0|>=9.0,<9.1.0a0|>=9.2,<9.3.0a0|9.0.*|9.2.*']\n",
      "py-xgboost -> cudatoolkit[version='8.0.*|>=10.0.130,<10.1.0a0|>=9.0,<9.1.0a0|>=9.2,<9.3.0a0|9.0.*|9.2.*']\n",
      "tensorflow-base -> cudatoolkit[version='8.0.*|9.0.*|9.2.*|>=10.0.130,<10.1.0a0|>=10.1.243,<10.2.0a0|>=10.1.168,<10.2.0a0|>=9.2,<9.3.0a0|>=9.0,<9.1.0a0']\n",
      "\n",
      "Package mpich conflicts for:\n",
      "hdf5 -> mpich[version='>=3.2,<3.3.0a0|>=3.3,<3.4.0a0']\n",
      "h5py -> mpich[version='>=3.2,<3.3.0a0|>=3.2.1,<3.3.0a0|>=3.3.1,<3.4.0a0|>=3.3.2,<3.4.0a0']\n",
      "\n",
      "Package html5lib conflicts for:\n",
      "bleach -> html5lib[version='>=0.999,!=0.9999,!=0.99999,<0.99999999|>=0.99999999|>=0.99999999pre,!=1.0b1,!=1.0b2,!=1.0b3,!=1.0b4,!=1.0b5,!=1.0b6,!=1.0b7,!=1.0b8']\n",
      "ibm-wsrt-py37main-main -> html5lib==1.1.0[build=*]\n",
      "tensorboard -> html5lib[version='0.9999999|>=0.9999999,<0.10000000.0a0']\n",
      "\n",
      "Package lzo conflicts for:\n",
      "ibm-wsrt-py37main-main -> lzo==2.10[build=*]\n",
      "pytables -> lzo[version='2.*|>=2.10,<3.0a0|2.06']\n",
      "\n",
      "Package pcre conflicts for:\n",
      "gstreamer -> pcre[version='>=8.41,<9.0a0|>=8.43,<9.0a0|>=8.42,<9.0a0']\n",
      "ibm-wsrt-py37main-main -> pcre==8.44[build=*]\n",
      "glib -> pcre[version='>=8.41,<9.0a0|>=8.43,<9.0a0|>=8.44,<9.0a0|>=8.42,<9.0a0']\n",
      "\n",
      "Package lz4-c conflicts for:\n",
      "zstd -> lz4-c[version='>=1.8.1.2,<1.8.2.0a0|>=1.8.3,<1.8.4.0a0|>=1.9.2,<1.9.3.0a0|>=1.9.2,<1.10.0a0']\n",
      "ibm-wsrt-py37main-main -> lz4-c==1.9.2[build=*]\n",
      "blosc -> lz4-c[version='>=1.8.1.2,<1.9.0a0|>=1.9.2,<1.10.0a0']\n",
      "\n",
      "Package pandoc conflicts for:\n",
      "nbconvert -> pandoc[version='>=1.12.1|>=1.12.1,<2.0.0']\n",
      "ibm-wsrt-py37main-main -> pandoc==2.9.2.1[build=*]\n",
      "\n",
      "Package singledispatch conflicts for:\n",
      "tornado -> singledispatch\n",
      "nltk -> singledispatch\n",
      "\n",
      "Package pyasn1-modules conflicts for:\n",
      "google-auth -> pyasn1-modules[version='>=0.0.5,<1dev|>=0.2.1']\n",
      "ibm-wsrt-py37main-main -> pyasn1-modules==0.2.8[build=*]\n",
      "\n",
      "Package pyyaml conflicts for:\n",
      "bokeh -> pyyaml[version='>=3.10']\n",
      "ibm-wsrt-py37main-main -> pyyaml==5.3.1[build=*]\n",
      "dask-core -> pyyaml\n",
      "\n",
      "Package absl-py conflicts for:\n",
      "tensorflow-estimator -> absl-py[version='>=0.1.6|>=0.7.0']\n",
      "ibm-wsrt-py37main-main -> absl-py==0.9.0[build=*]\n",
      "tensorboard -> absl-py[version='>=0.4|>=0.8.0|>=0.7']\n",
      "tensorflow-base -> absl-py[version='>=0.1.6|>=0.7.0|>=0.7.1|>=0.8.1|>=0.7.1,<1.0a0']\n",
      "\n",
      "Package pandas conflicts for:\n",
      "ibm-wsrt-py37main-main -> pandas==1.0.5[build=*]\n",
      "bokeh -> pandas\n",
      "arcgis=1.6.0 -> pandas[version='>=0.23']\n",
      "statsmodels -> pandas[version='>=0.14|>=0.21|>=0.23']\n",
      "seaborn -> pandas[version='>=0.14.0|>=0.22.0']\n",
      "\n",
      "Package terminado conflicts for:\n",
      "ibm-wsrt-py37main-main -> terminado==0.8.3[build=*]\n",
      "notebook -> terminado[version='>=0.3.3|>=0.8.1|>=0.8.3']\n",
      "\n",
      "Package google-pasta conflicts for:\n",
      "tensorflow-base -> google-pasta[version='>=0.1.6|>=0.1.8|>=0.1.7|>=0.1.7,<1.0a0']\n",
      "ibm-wsrt-py37main-main -> google-pasta==0.2.0[build=*]\n",
      "\n",
      "Package expat conflicts for:\n",
      "ibm-wsrt-py37main-main -> expat==2.2.9[build=*]\n",
      "dbus -> expat[version='>=2.2.10,<3.0a0|>=2.2.5,<2.3.0a0|>=2.2.9,<2.3.0a0|>=2.2.6,<3.0a0|>=2.2.5,<3.0a0']\n",
      "qt -> expat[version='>=2.2.5,<2.3.0a0|>=2.2.9,<2.3.0a0|>=2.2.6,<3.0a0|>=2.2.5,<3.0a0']\n",
      "\n",
      "Package ca-certificates conflicts for:\n",
      "openssl -> ca-certificates\n",
      "ibm-wsrt-py37main-main -> ca-certificates==2020.10.14[build=*]\n",
      "\n",
      "Package botocore conflicts for:\n",
      "s3transfer -> botocore[version='>=1.12.36,<2.0.0|>=1.12.36,<2.0a.0|>=1.3.0,<2.0.0']\n",
      "boto3 -> botocore[version='>=1.10.0,<1.11.0|>=1.10.1,<1.11.0|>=1.10.10,<1.11.0|>=1.10.11,<1.11.0|>=1.10.12,<1.11.0|>=1.10.13,<1.11.0|>=1.10.14,<1.11.0|>=1.10.15,<1.11.0|>=1.10.16,<1.11.0|>=1.10.17,<1.11.0|>=1.10.18,<1.11.0|>=1.10.19,<1.11.0|>=1.10.20,<1.11.0|>=1.10.21,<1.11.0|>=1.10.22,<1.11.0|>=1.10.23,<1.11.0|>=1.10.24,<1.11.0|>=1.10.25,<1.11.0|>=1.10.26,<1.11.0|>=1.10.27,<1.11.0|>=1.10.28,<1.11.0|>=1.10.29,<1.11.0|>=1.10.30,<1.11.0|>=1.10.31,<1.11.0|>=1.10.32,<1.11.0|>=1.10.33,<1.11.0|>=1.10.34,<1.11.0|>=1.10.35,<1.11.0|>=1.10.36,<1.11.0|>=1.10.37,<1.11.0|>=1.10.38,<1.11.0|>=1.10.39,<1.11.0|>=1.10.40,<1.11.0|>=1.10.41,<1.11.0|>=1.10.42,<1.11.0|>=1.10.43,<1.11.0|>=1.10.44,<1.11.0|>=1.10.45,<1.11.0|>=1.10.46,<1.11.0|>=1.10.47,<1.11.0|>=1.10.48,<1.11.0|>=1.10.49,<1.11.0|>=1.10.50,<1.11.0|>=1.10.51,<1.11.0|>=1.10.52,<1.11.0|>=1.10.53,<1.11.0|>=1.10.54,<1.11.0|>=1.10.55,<1.11.0|>=1.10.56,<1.11.0|>=1.10.57,<1.11.0|>=1.10.58,<1.11.0|>=1.10.59,<1.11.0|>=1.10.60,<1.11.0|>=1.10.61,<1.11.0|>=1.10.62,<1.11.0|>=1.10.63,<1.11.0|>=1.10.64,<1.11.0|>=1.10.65,<1.11.0|>=1.10.66,<1.11.0|>=1.10.67,<1.11.0|>=1.10.68,<1.11.0|>=1.10.69,<1.11.0|>=1.10.70,<1.11.0|>=1.10.71,<1.11.0|>=1.10.72,<1.11.0|>=1.10.73,<1.11.0|>=1.10.74,<1.11.0|>=1.10.75,<1.11.0|>=1.10.76,<1.11.0|>=1.10.77,<1.11.0|>=1.10.78,<1.11.0|>=1.10.79,<1.11.0|>=1.10.80,<1.11.0|>=1.10.81,<1.11.0|>=1.10.82,<1.11.0|>=1.10.83,<1.11.0|>=1.10.84,<1.11.0|>=1.11.0,<1.12.0|>=1.11.1,<1.12.0|>=1.11.2,<1.12.0|>=1.11.3,<1.12.0|>=1.11.4,<1.12.0|>=1.11.5,<1.12.0|>=1.11.6,<1.12.0|>=1.11.7,<1.12.0|>=1.11.8,<1.12.0|>=1.11.9,<1.12.0|>=1.12.0,<1.13.0|>=1.12.1,<1.13.0|>=1.12.10,<1.13.0|>=1.12.100,<1.13.0|>=1.12.101,<1.13.0|>=1.12.102,<1.13.0|>=1.12.103,<1.13.0|>=1.12.104,<1.13.0|>=1.12.105,<1.13.0|>=1.12.106,<1.13.0|>=1.12.107,<1.13.0|>=1.12.108,<1.13.0|>=1.12.109,<1.13.0|>=1.12.110,<1.13.0|>=1.12.111,<1.13.0|>=1.12.112,<1.13.0|>=1.12.113,<1.13.0|>=1.12.114,<1.13.0|>=1.12.115,<1.13.0|>=1.12.116,<1.13.0|>=1.12.117,<1.13.0|>=1.12.118,<1.13.0|>=1.12.119,<1.13.0|>=1.12.120,<1.13.0|>=1.12.121,<1.13.0|>=1.12.122,<1.13.0|>=1.12.123,<1.13.0|>=1.12.124,<1.13.0|>=1.12.125,<1.13.0|>=1.12.126,<1.13.0|>=1.12.127,<1.13.0|>=1.12.128,<1.13.0|>=1.12.129,<1.13.0|>=1.12.130,<1.13.0|>=1.12.131,<1.13.0|>=1.12.132,<1.13.0|>=1.12.133,<1.13.0|>=1.12.134,<1.13.0|>=1.12.135,<1.13.0|>=1.12.136,<1.13.0|>=1.12.137,<1.13.0|>=1.12.138,<1.13.0|>=1.12.139,<1.13.0|>=1.12.140,<1.13.0|>=1.12.141,<1.13.0|>=1.12.142,<1.13.0|>=1.12.143,<1.13.0|>=1.12.144,<1.13.0|>=1.12.145,<1.13.0|>=1.12.146,<1.13.0|>=1.12.147,<1.13.0|>=1.12.148,<1.13.0|>=1.12.149,<1.13.0|>=1.12.150,<1.13.0|>=1.12.151,<1.13.0|>=1.12.152,<1.13.0|>=1.12.153,<1.13.0|>=1.12.154,<1.13.0|>=1.12.155,<1.13.0|>=1.12.156,<1.13.0|>=1.12.157,<1.13.0|>=1.12.158,<1.13.0|>=1.12.159,<1.13.0|>=1.12.160,<1.13.0|>=1.12.161,<1.13.0|>=1.12.162,<1.13.0|>=1.12.163,<1.13.0|>=1.12.164,<1.13.0|>=1.12.165,<1.13.0|>=1.12.166,<1.13.0|>=1.12.167,<1.13.0|>=1.12.168,<1.13.0|>=1.12.169,<1.13.0|>=1.12.170,<1.13.0|>=1.12.171,<1.13.0|>=1.12.172,<1.13.0|>=1.12.173,<1.13.0|>=1.12.174,<1.13.0|>=1.12.175,<1.13.0|>=1.12.176,<1.13.0|>=1.12.177,<1.13.0|>=1.12.178,<1.13.0|>=1.12.179,<1.13.0|>=1.12.180,<1.13.0|>=1.12.181,<1.13.0|>=1.12.182,<1.13.0|>=1.12.183,<1.13.0|>=1.12.184,<1.13.0|>=1.12.185,<1.13.0|>=1.12.186,<1.13.0|>=1.12.187,<1.13.0|>=1.12.188,<1.13.0|>=1.12.189,<1.13.0|>=1.12.190,<1.13.0|>=1.12.191,<1.13.0|>=1.12.192,<1.13.0|>=1.12.193,<1.13.0|>=1.12.194,<1.13.0|>=1.12.195,<1.13.0|>=1.12.196,<1.13.0|>=1.12.197,<1.13.0|>=1.12.198,<1.13.0|>=1.12.199,<1.13.0|>=1.12.200,<1.13.0|>=1.12.201,<1.13.0|>=1.12.202,<1.13.0|>=1.12.203,<1.13.0|>=1.12.204,<1.13.0|>=1.12.205,<1.13.0|>=1.12.206,<1.13.0|>=1.12.207,<1.13.0|>=1.12.208,<1.13.0|>=1.12.209,<1.13.0|>=1.12.210,<1.13.0|>=1.12.211,<1.13.0|>=1.12.212,<1.13.0|>=1.12.213,<1.13.0|>=1.12.214,<1.13.0|>=1.12.215,<1.13.0|>=1.12.216,<1.13.0|>=1.12.217,<1.13.0|>=1.12.218,<1.13.0|>=1.12.219,<1.13.0|>=1.12.220,<1.13.0|>=1.12.221,<1.13.0|>=1.12.222,<1.13.0|>=1.12.223,<1.13.0|>=1.12.224,<1.13.0|>=1.12.225,<1.13.0|>=1.12.226,<1.13.0|>=1.12.227,<1.13.0|>=1.12.228,<1.13.0|>=1.12.229,<1.13.0|>=1.12.230,<1.13.0|>=1.12.231,<1.13.0|>=1.12.232,<1.13.0|>=1.12.233,<1.13.0|>=1.12.234,<1.13.0|>=1.12.235,<1.13.0|>=1.12.236,<1.13.0|>=1.12.237,<1.13.0|>=1.12.238,<1.13.0|>=1.12.239,<1.13.0|>=1.12.240,<1.13.0|>=1.12.241,<1.13.0|>=1.12.242,<1.13.0|>=1.12.243,<1.13.0|>=1.12.244,<1.13.0|>=1.12.245,<1.13.0|>=1.12.246,<1.13.0|>=1.12.247,<1.13.0|>=1.12.248,<1.13.0|>=1.12.249,<1.13.0|>=1.12.250,<1.13.0|>=1.12.251,<1.13.0|>=1.12.252,<1.13.0|>=1.12.253,<1.13.0|>=1.13.0,<1.14.0|>=1.13.1,<1.14.0|>=1.13.10,<1.14.0|>=1.13.11,<1.14.0|>=1.13.12,<1.14.0|>=1.13.13,<1.14.0|>=1.13.14,<1.14.0|>=1.13.15,<1.14.0|>=1.13.16,<1.14.0|>=1.13.17,<1.14.0|>=1.13.18,<1.14.0|>=1.13.19,<1.14.0|>=1.13.20,<1.14.0|>=1.13.21,<1.14.0|>=1.13.22,<1.14.0|>=1.13.23,<1.14.0|>=1.13.24,<1.14.0|>=1.13.25,<1.14.0|>=1.13.26,<1.14.0|>=1.13.27,<1.14.0|>=1.13.28,<1.14.0|>=1.13.29,<1.14.0|>=1.13.30,<1.14.0|>=1.13.31,<1.14.0|>=1.13.32,<1.14.0|>=1.13.33,<1.14.0|>=1.13.34,<1.14.0|>=1.13.35,<1.14.0|>=1.13.36,<1.14.0|>=1.13.37,<1.14.0|>=1.13.38,<1.14.0|>=1.13.39,<1.14.0|>=1.13.40,<1.14.0|>=1.13.41,<1.14.0|>=1.13.42,<1.14.0|>=1.13.43,<1.14.0|>=1.13.44,<1.14.0|>=1.13.45,<1.14.0|>=1.13.46,<1.14.0|>=1.13.47,<1.14.0|>=1.13.48,<1.14.0|>=1.13.49,<1.14.0|>=1.13.50,<1.14.0|>=1.14.0,<1.15.0|>=1.14.1,<1.15.0|>=1.14.10,<1.15.0|>=1.14.11,<1.15.0|>=1.14.12,<1.15.0|>=1.14.13,<1.15.0|>=1.14.14,<1.15.0|>=1.14.15,<1.15.0|>=1.14.16,<1.15.0|>=1.14.17,<1.15.0|>=1.15.0,<1.16.0|>=1.15.1,<1.16.0|>=1.15.10,<1.16.0|>=1.15.11,<1.16.0|>=1.15.12,<1.16.0|>=1.15.13,<1.16.0|>=1.15.14,<1.16.0|>=1.15.15,<1.16.0|>=1.15.16,<1.16.0|>=1.15.17,<1.16.0|>=1.15.18,<1.16.0|>=1.15.19,<1.16.0|>=1.15.20,<1.16.0|>=1.15.21,<1.16.0|>=1.15.22,<1.16.0|>=1.15.23,<1.16.0|>=1.15.24,<1.16.0|>=1.15.25,<1.16.0|>=1.15.26,<1.16.0|>=1.15.27,<1.16.0|>=1.15.28,<1.16.0|>=1.15.29,<1.16.0|>=1.15.30,<1.16.0|>=1.15.31,<1.16.0|>=1.15.32,<1.16.0|>=1.15.33,<1.16.0|>=1.15.34,<1.16.0|>=1.15.35,<1.16.0|>=1.15.36,<1.16.0|>=1.15.37,<1.16.0|>=1.15.38,<1.16.0|>=1.15.39,<1.16.0|>=1.15.40,<1.16.0|>=1.15.41,<1.16.0|>=1.15.42,<1.16.0|>=1.15.43,<1.16.0|>=1.15.44,<1.16.0|>=1.15.45,<1.16.0|>=1.15.46,<1.16.0|>=1.15.47,<1.16.0|>=1.15.48,<1.16.0|>=1.15.49,<1.16.0|>=1.16.0,<1.17.0|>=1.16.1,<1.17.0|>=1.16.10,<1.17.0|>=1.16.11,<1.17.0|>=1.16.12,<1.17.0|>=1.16.13,<1.17.0|>=1.16.14,<1.17.0|>=1.16.15,<1.17.0|>=1.16.16,<1.17.0|>=1.16.17,<1.17.0|>=1.16.18,<1.17.0|>=1.16.19,<1.17.0|>=1.16.20,<1.17.0|>=1.16.21,<1.17.0|>=1.16.22,<1.17.0|>=1.16.23,<1.17.0|>=1.16.24,<1.17.0|>=1.16.25,<1.17.0|>=1.16.26,<1.17.0|>=1.17.0,<1.18.0|>=1.17.1,<1.18.0|>=1.17.10,<1.18.0|>=1.17.11,<1.18.0|>=1.17.12,<1.18.0|>=1.17.13,<1.18.0|>=1.17.14,<1.18.0|>=1.17.15,<1.18.0|>=1.17.16,<1.18.0|>=1.17.17,<1.18.0|>=1.17.18,<1.18.0|>=1.17.19,<1.18.0|>=1.17.20,<1.18.0|>=1.17.21,<1.18.0|>=1.17.22,<1.18.0|>=1.17.23,<1.18.0|>=1.17.24,<1.18.0|>=1.17.25,<1.18.0|>=1.17.26,<1.18.0|>=1.17.27,<1.18.0|>=1.17.28,<1.18.0|>=1.17.29,<1.18.0|>=1.17.30,<1.18.0|>=1.17.31,<1.18.0|>=1.17.32,<1.18.0|>=1.17.33,<1.18.0|>=1.17.34,<1.18.0|>=1.17.35,<1.18.0|>=1.17.36,<1.18.0|>=1.17.37,<1.18.0|>=1.17.38,<1.18.0|>=1.17.39,<1.18.0|>=1.17.40,<1.18.0|>=1.17.41,<1.18.0|>=1.17.42,<1.18.0|>=1.17.43,<1.18.0|>=1.17.44,<1.18.0|>=1.17.45,<1.18.0|>=1.17.46,<1.18.0|>=1.17.47,<1.18.0|>=1.17.48,<1.18.0|>=1.17.49,<1.18.0|>=1.17.50,<1.18.0|>=1.17.51,<1.18.0|>=1.17.52,<1.18.0|>=1.17.53,<1.18.0|>=1.17.54,<1.18.0|>=1.17.55,<1.18.0|>=1.17.56,<1.18.0|>=1.17.57,<1.18.0|>=1.17.58,<1.18.0|>=1.17.59,<1.18.0|>=1.17.60,<1.18.0|>=1.17.61,<1.18.0|>=1.17.62,<1.18.0|>=1.17.63,<1.18.0|>=1.18.0,<1.19.0|>=1.18.1,<1.19.0|>=1.18.10,<1.19.0|>=1.18.11,<1.19.0|>=1.18.12,<1.19.0|>=1.18.13,<1.19.0|>=1.18.14,<1.19.0|>=1.18.15,<1.19.0|>=1.18.16,<1.19.0|>=1.18.17,<1.19.0|>=1.18.18,<1.19.0|>=1.19.0,<1.20.0|>=1.19.1,<1.20.0|>=1.19.10,<1.20.0|>=1.19.11,<1.20.0|>=1.19.12,<1.20.0|>=1.19.13,<1.20.0|>=1.19.14,<1.20.0|>=1.19.15,<1.20.0|>=1.19.16,<1.20.0|>=1.19.17,<1.20.0|>=1.19.18,<1.20.0|>=1.19.19,<1.20.0|>=1.19.20,<1.20.0|>=1.19.21,<1.20.0|>=1.19.22,<1.20.0|>=1.19.23,<1.20.0|>=1.19.24,<1.20.0|>=1.19.25,<1.20.0|>=1.19.26,<1.20.0|>=1.19.27,<1.20.0|>=1.19.28,<1.20.0|>=1.19.29,<1.20.0|>=1.19.30,<1.20.0|>=1.19.31,<1.20.0|>=1.19.32,<1.20.0|>=1.19.33,<1.20.0|>=1.19.34,<1.20.0|>=1.19.35,<1.20.0|>=1.19.36,<1.20.0|>=1.19.37,<1.20.0|>=1.19.38,<1.20.0|>=1.19.39,<1.20.0|>=1.19.40,<1.20.0|>=1.19.41,<1.20.0|>=1.19.42,<1.20.0|>=1.19.43,<1.20.0|>=1.19.9,<1.20.0|>=1.19.8,<1.20.0|>=1.19.7,<1.20.0|>=1.19.6,<1.20.0|>=1.19.5,<1.20.0|>=1.19.4,<1.20.0|>=1.19.3,<1.20.0|>=1.19.2,<1.20.0|>=1.18.9,<1.19.0|>=1.18.8,<1.19.0|>=1.18.7,<1.19.0|>=1.18.6,<1.19.0|>=1.18.5,<1.19.0|>=1.18.4,<1.19.0|>=1.18.3,<1.19.0|>=1.18.2,<1.19.0|>=1.17.9,<1.18.0|>=1.17.8,<1.18.0|>=1.17.7,<1.18.0|>=1.17.6,<1.18.0|>=1.17.5,<1.18.0|>=1.17.4,<1.18.0|>=1.17.3,<1.18.0|>=1.17.2,<1.18.0|>=1.16.9,<1.17.0|>=1.16.8,<1.17.0|>=1.16.7,<1.17.0|>=1.16.6,<1.17.0|>=1.16.5,<1.17.0|>=1.16.4,<1.17.0|>=1.16.3,<1.17.0|>=1.16.2,<1.17.0|>=1.15.9,<1.16.0|>=1.15.8,<1.16.0|>=1.15.7,<1.16.0|>=1.15.6,<1.16.0|>=1.15.5,<1.16.0|>=1.15.4,<1.16.0|>=1.15.3,<1.16.0|>=1.15.2,<1.16.0|>=1.14.9,<1.15.0|>=1.14.8,<1.15.0|>=1.14.7,<1.15.0|>=1.14.6,<1.15.0|>=1.14.5,<1.15.0|>=1.14.4,<1.15.0|>=1.14.3,<1.15.0|>=1.14.2,<1.15.0|>=1.13.9,<1.14.0|>=1.13.8,<1.14.0|>=1.13.7,<1.14.0|>=1.13.6,<1.14.0|>=1.13.5,<1.14.0|>=1.13.4,<1.14.0|>=1.13.3,<1.14.0|>=1.13.2,<1.14.0|>=1.12.99,<1.13.0|>=1.12.98,<1.13.0|>=1.12.97,<1.13.0|>=1.12.96,<1.13.0|>=1.12.95,<1.13.0|>=1.12.94,<1.13.0|>=1.12.93,<1.13.0|>=1.12.92,<1.13.0|>=1.12.91,<1.13.0|>=1.12.90,<1.13.0|>=1.12.89,<1.13.0|>=1.12.88,<1.13.0|>=1.12.87,<1.13.0|>=1.12.86,<1.13.0|>=1.12.85,<1.13.0|>=1.12.84,<1.13.0|>=1.12.83,<1.13.0|>=1.12.82,<1.13.0|>=1.12.81,<1.13.0|>=1.12.80,<1.13.0|>=1.12.79,<1.13.0|>=1.12.78,<1.13.0|>=1.12.77,<1.13.0|>=1.12.76,<1.13.0|>=1.12.75,<1.13.0|>=1.12.74,<1.13.0|>=1.12.73,<1.13.0|>=1.12.72,<1.13.0|>=1.12.71,<1.13.0|>=1.12.70,<1.13.0|>=1.12.69,<1.13.0|>=1.12.68,<1.13.0|>=1.12.67,<1.13.0|>=1.12.66,<1.13.0|>=1.12.65,<1.13.0|>=1.12.64,<1.13.0|>=1.12.63,<1.13.0|>=1.12.62,<1.13.0|>=1.12.61,<1.13.0|>=1.12.60,<1.13.0|>=1.12.59,<1.13.0|>=1.12.58,<1.13.0|>=1.12.57,<1.13.0|>=1.12.56,<1.13.0|>=1.12.55,<1.13.0|>=1.12.54,<1.13.0|>=1.12.53,<1.13.0|>=1.12.52,<1.13.0|>=1.12.51,<1.13.0|>=1.12.50,<1.13.0|>=1.12.49,<1.13.0|>=1.12.48,<1.13.0|>=1.12.47,<1.13.0|>=1.12.46,<1.13.0|>=1.12.45,<1.13.0|>=1.12.44,<1.13.0|>=1.12.43,<1.13.0|>=1.12.42,<1.13.0|>=1.12.41,<1.13.0|>=1.12.40,<1.13.0|>=1.12.39,<1.13.0|>=1.12.38,<1.13.0|>=1.12.37,<1.13.0|>=1.12.36,<1.13.0|>=1.12.35,<1.13.0|>=1.12.34,<1.13.0|>=1.12.33,<1.13.0|>=1.12.32,<1.13.0|>=1.12.31,<1.13.0|>=1.12.30,<1.13.0|>=1.12.29,<1.13.0|>=1.12.28,<1.13.0|>=1.12.27,<1.13.0|>=1.12.26,<1.13.0|>=1.12.25,<1.13.0|>=1.12.24,<1.13.0|>=1.12.23,<1.13.0|>=1.12.22,<1.13.0|>=1.12.21,<1.13.0|>=1.12.20,<1.13.0|>=1.12.19,<1.13.0|>=1.12.18,<1.13.0|>=1.12.17,<1.13.0|>=1.12.16,<1.13.0|>=1.12.15,<1.13.0|>=1.12.14,<1.13.0|>=1.12.13,<1.13.0|>=1.12.12,<1.13.0|>=1.12.11,<1.13.0|>=1.12.9,<1.13.0|>=1.12.8,<1.13.0|>=1.12.7,<1.13.0|>=1.12.6,<1.13.0|>=1.12.5,<1.13.0|>=1.12.4,<1.13.0|>=1.12.3,<1.13.0|>=1.12.2,<1.13.0|>=1.10.9,<1.11.0|>=1.10.8,<1.11.0|>=1.10.7,<1.11.0|>=1.10.6,<1.11.0|>=1.10.5,<1.11.0|>=1.10.4,<1.11.0|>=1.10.3,<1.11.0|>=1.10.2,<1.11.0|>=1.9.23,<1.10.0|>=1.9.22,<1.10.0|>=1.9.21,<1.10.0|>=1.9.20,<1.10.0|>=1.9.19,<1.10.0|>=1.9.18,<1.10.0|>=1.9.17,<1.10.0|>=1.9.16,<1.10.0|>=1.9.15,<1.10.0|>=1.9.14,<1.10.0|>=1.9.13,<1.10.0|>=1.9.12,<1.10.0|>=1.9.11,<1.10.0|>=1.9.10,<1.10.0|>=1.9.9,<1.10.0|>=1.9.8,<1.10.0|>=1.9.7,<1.10.0|>=1.9.6,<1.10.0|>=1.9.5,<1.10.0|>=1.9.4,<1.10.0|>=1.9.3,<1.10.0|>=1.9.2,<1.10.0|>=1.9.1,<1.10.0|>=1.9.0,<1.10.0|>=1.8.50,<1.9.0|>=1.8.49,<1.9.0|>=1.8.48,<1.9.0|>=1.8.47,<1.9.0|>=1.8.46,<1.9.0|>=1.8.45,<1.9.0|>=1.8.44,<1.9.0|>=1.8.43,<1.9.0|>=1.8.42,<1.9.0|>=1.8.41,<1.9.0|>=1.8.40,<1.9.0|>=1.8.39,<1.9.0|>=1.8.38,<1.9.0|>=1.8.37,<1.9.0|>=1.8.36,<1.9.0|>=1.8.32,<1.9.0|>=1.8.28,<1.9.0|>=1.5.0,<1.6.0|>=1.4.1,<1.5.0|>=1.8.0,<1.9.0|>=1.7.0,<1.8.0']\n",
      "ibm-wsrt-py37main-main -> botocore==1.16.11[build=*]\n",
      "\n",
      "Package cudnn conflicts for:\n",
      "pytorch -> cudnn[version='5.1.*|6.0.*|>=7.0.0,<=8.0a0|>=7.0.5,<=8.0a0|>=7.1.0,<=8.0a0|>=7.1.3,<8.0a0|>=7.3.0,<=8.0a0|>=7.6,<8.0a0|>=7.6.5,<8.0a0|>=7.6.4,<8.0a0|>=7.3.1,<8.0a0|>=7.1.2,<=8.0a0']\n",
      "tensorflow-base -> cudnn[version='>=7.0.0,<=8.0a0|>=7.1.0,<=8.0a0|>=7.2.0,<=8.0a0|>=7.3.1,<8.0a0|>=7.6,<8.0a0|>=7.6.5,<8.0a0|>=7.6.0,<8.0a0|>=7.6.4,<8.0a0|>=7.1.2,<=8.0a0|>=7.0.5,<=8.0a0']\n",
      "\n",
      "Package jpeg conflicts for:\n",
      "qt -> jpeg[version='9.*|>=9c,<10a|>=9d,<10a|>=9b,<10a']\n",
      "lcms2 -> jpeg[version='>=9b,<10a|>=9c,<10a|>=9d,<10a']\n",
      "libtiff -> jpeg[version='9.*|>=9b,<10a|>=9c,<10a|>=9d,<10a']\n",
      "ibm-wsrt-py37main-main -> jpeg==9b[build=*]\n",
      "pillow -> jpeg[version='8.*|9.*|>=9c,<10a|>=9d,<10a|>=9b,<10a']\n",
      "\n",
      "Package wrapt conflicts for:\n",
      "tensorflow-estimator -> wrapt[version='>=1.11.1']\n",
      "tensorflow-base -> wrapt[version='>=1.11.1|>=1.11.2|>=1.12.1|>=1.11.2,<2.0a0']\n",
      "ibm-wsrt-py37main-main -> wrapt==1.12.1[build=*]\n",
      "\n",
      "Package ipython_genutils conflicts for:\n",
      "notebook -> ipython_genutils\n",
      "nbformat -> ipython_genutils\n",
      "traitlets -> ipython_genutils\n",
      "ibm-wsrt-py37main-main -> ipython_genutils==0.2.0[build=*]\n",
      "\n",
      "Package libxslt conflicts for:\n",
      "ibm-wsrt-py37main-main -> libxslt==1.1.34[build=*]\n",
      "lxml -> libxslt[version='>=1.1.32,<2.0a0|>=1.1.33,<2.0a0|>=1.1.34,<2.0a0']\n",
      "\n",
      "Package _pytorch_select conflicts for:\n",
      "ibm-wsrt-py37main-main -> _pytorch_select==0.1[build=*]\n",
      "pytorch -> _pytorch_select[version='0.1|0.2']\n",
      "\n",
      "Package configparser conflicts for:\n",
      "importlib_metadata -> configparser[version='>=3.5']\n",
      "importlib-metadata -> configparser[version='>=3.5']\n",
      "entrypoints -> configparser[version='>=3.5']\n",
      "\n",
      "Package wheel conflicts for:\n",
      "ibm-wsrt-py37main-main -> wheel==0.34.2[build=*]\n",
      "tensorboard -> wheel[version='>=0.26']\n",
      "pip -> wheel\n",
      "\n",
      "Package h5py conflicts for:\n",
      "ibm-wsrt-py37main-main -> h5py==2.10.0[build=*]\n",
      "keras-applications -> h5py\n",
      "tensorflow-base -> h5py[version='>=2.10.0,<2.11.0a0']\n",
      "\n",
      "Package libcblas conflicts for:\n",
      "blas -> libcblas[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_h6e990d7_netlib|2_blis|3_blis|4_openblas|4_mkl|5_blis|5_mkl|6_blis|6_openblas|6_h6e990d7_netlib|7_blis|7_openblas|8_mkl|9_blis|9_mkl|10_openblas|10_h86c2bf4_netlib|11_blis|11_openblas|11_h86c2bf4_netlib|12_openblas|13_openblas|14_blis|14_openblas|15_mkl|15_openblas|16_openblas|20_mkl|21_mkl|19_mkl|18_mkl|17_openblas|16_mkl|16_blis|15_blis|14_mkl|13_mkl|13_blis|12_mkl|12_blis|11_mkl|10_mkl|10_blis|9_openblas|8_h6e990d7_netlib|8_openblas|8_blis|7_h6e990d7_netlib|7_mkl|6_mkl|5_openblas|5_h6e990d7_netlib|4_h6e990d7_netlib|4_blis|3_openblas|2_openblas|1_h6e990d7_netlib|0_openblas|0_blis']\n",
      "scikit-learn -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "scipy -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "numpy -> libcblas[version='>=3.8.0,<4.0a0']\n",
      "\n",
      "Package contextlib2 conflicts for:\n",
      "importlib-metadata -> contextlib2\n",
      "importlib_metadata -> contextlib2\n",
      "\n",
      "Package pip conflicts for:\n",
      "ibm-wsrt-py37main-main -> pip==20.1.1[build=*]\n",
      "python=3.7 -> pip\n",
      "\n",
      "Package idna conflicts for:\n",
      "cryptography -> idna[version='>=2.1']\n",
      "requests -> idna[version='>=2.5,<2.6|>=2.5,<2.7|>=2.5,<2.8|>=2.5,<2.9|>=2.5,<3']\n",
      "yarl -> idna[version='>=2.0']\n",
      "ibm-wsrt-py37main-main -> idna==2.9[build=*]\n",
      "urllib3 -> idna[version='>=2.0.0']\n",
      "\n",
      "Package imageio conflicts for:\n",
      "scikit-image -> imageio[version='>=2.1.0|>=2.3.0']\n",
      "ibm-wsrt-py37main-main -> imageio==2.9.0[build=*]\n",
      "\n",
      "Package backcall conflicts for:\n",
      "ibm-wsrt-py37main-main -> backcall==0.2.0[build=*]\n",
      "ipython -> backcall\n",
      "\n",
      "Package kiwisolver conflicts for:\n",
      "ibm-wsrt-py37main-main -> kiwisolver==1.2.0[build=*]\n",
      "matplotlib -> kiwisolver\n",
      "matplotlib-base -> kiwisolver[version='>=1.0.1']\n",
      "\n",
      "Package markdown conflicts for:\n",
      "ibm-wsrt-py37main-main -> markdown==3.1.1[build=*]\n",
      "tensorflow-base -> markdown[version='>=2.6.11']\n",
      "tensorboard -> markdown[version='>=2.6.11|>=2.6.8']\n",
      "\n",
      "Package jupyterlab conflicts for:\n",
      "arcgis=1.6.0 -> jupyterlab\n",
      "ibm-wsrt-py37main-main -> jupyterlab==2.2.6[build=*]\n",
      "\n",
      "Package joblib conflicts for:\n",
      "nltk -> joblib\n",
      "ibm-wsrt-py37main-main -> joblib==0.16.0[build=*]\n",
      "scikit-learn -> joblib[version='>=0.11']\n",
      "\n",
      "Package parso conflicts for:\n",
      "ibm-wsrt-py37main-main -> parso==0.7.0[build=*]\n",
      "jedi -> parso[version='0.1.0|>=0.1.0,<0.2|>=0.2.0,<0.8.0|>=0.3.0,<0.8.0|>=0.5.0,<0.8.0|>=0.5.2,<0.8.0|>=0.7.0,<0.8.0|>=0.7.0|>=0.5.2|>=0.5.0|>=0.3.0|>=0.2.0']\n",
      "\n",
      "Package ipaddress conflicts for:\n",
      "urllib3 -> ipaddress\n",
      "notebook -> ipaddress\n",
      "cryptography -> ipaddress\n",
      "\n",
      "Package intel-openmp conflicts for:\n",
      "ibm-wsrt-py37main-main -> intel-openmp==2020.1[build=*]\n",
      "mkl -> intel-openmp\n",
      "\n",
      "Package jsonschema conflicts for:\n",
      "nbformat -> jsonschema[version='>=2.0,!=2.5.0|>=2.4,!=2.5.0']\n",
      "jupyterlab_server -> jsonschema[version='>=3.0.1']\n",
      "ibm-wsrt-py37main-main -> jsonschema==3.2.0[build=*]\n",
      "\n",
      "Package mkl-service conflicts for:\n",
      "ibm-wsrt-py37main-main -> mkl-service==2.3.0[build=*]\n",
      "mkl_fft -> mkl-service[version='>=2,<3.0a0']\n",
      "pytorch -> mkl-service[version='>=2,<3.0a0']\n",
      "numpy-base -> mkl-service[version='>=2,<3.0a0']\n",
      "scipy -> mkl-service[version='>=2,<3.0a0']\n",
      "mkl_random -> mkl-service[version='>=2,<3.0a0']\n",
      "scikit-learn -> mkl-service[version='>=2,<3.0a0']\n",
      "numexpr -> mkl-service[version='>=2,<3.0a0']\n",
      "numpy -> mkl-service[version='>=2,<3.0a0']\n",
      "\n",
      "Package libuuid conflicts for:\n",
      "fontconfig -> libuuid[version='>=1.0.3,<2.0a0|>=2.32.1,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> libuuid==1.0.3[build=*]\n",
      "\n",
      "Package threadpoolctl conflicts for:\n",
      "ibm-wsrt-py37main-main -> threadpoolctl==2.1.0[build=*]\n",
      "scikit-learn -> threadpoolctl\n",
      "\n",
      "Package urllib3 conflicts for:\n",
      "ibm-wsrt-py37main-main -> urllib3==1.25.9[build=*]\n",
      "requests -> urllib3[version='>=1.21.1,<1.22|>=1.21.1,<1.23|>=1.21.1,<1.24|>=1.21.1,<1.25|>=1.21.1,<1.26,!=1.25.0,!=1.25.1|>=1.21.1,<1.27']\n",
      "botocore -> urllib3[version='>=1.20,<1.24|>=1.20,<1.25|>=1.20,<1.26|>=1.25.4,<1.26|>=1.25.4,<1.27']\n",
      "\n",
      "Package snappy conflicts for:\n",
      "ibm-wsrt-py37main-main -> snappy==1.1.8[build=*]\n",
      "blosc -> snappy[version='1.1.6|>=1.1.8,<2.0a0|>=1.1.7,<2.0a0']\n",
      "\n",
      "Package json5 conflicts for:\n",
      "jupyterlab_server -> json5\n",
      "ibm-wsrt-py37main-main -> json5==0.9.5[build=*]\n",
      "\n",
      "Package unixodbc conflicts for:\n",
      "freetds -> unixodbc[version='>=2.3.5,<2.4.0a0|>=2.3.7,<2.4.0a0|>=2.3.6,<2.4.0a0']\n",
      "pyodbc -> unixodbc[version='2.3.4.*|2.3.4|>=2.3.5,<2.4.0a0|>=2.3.7,<2.4.0a0|>=2.3.9,<2.4.0a0|>=2.3.6,<2.4.0a0']\n",
      "ibm-wsrt-py37main-main -> unixodbc==2.3.7[build=*]\n",
      "\n",
      "Package gmp conflicts for:\n",
      "pandoc -> gmp\n",
      "ibm-wsrt-py37main-main -> gmp==6.1.2[build=*]\n",
      "\n",
      "Package s3transfer conflicts for:\n",
      "boto3 -> s3transfer[version='>=0.1.0,<0.2.0|>=0.1.10,<0.2.0|>=0.2.0,<0.3.0|>=0.3.0,<0.4.0']\n",
      "ibm-wsrt-py37main-main -> s3transfer==0.3.3[build=*]\n",
      "\n",
      "Package regex conflicts for:\n",
      "ibm-wsrt-py37main-main -> regex==2020.6.8[build=*]\n",
      "nltk -> regex\n",
      "\n",
      "Package jmespath conflicts for:\n",
      "botocore -> jmespath[version='>=0.7.1,<1.0.0']\n",
      "boto3 -> jmespath[version='>=0.7.1,<1.0.0']\n",
      "ibm-wsrt-py37main-main -> jmespath==0.9.4[build=*]\n",
      "\n",
      "Package markupsafe conflicts for:\n",
      "ibm-wsrt-py37main-main -> markupsafe==1.1.1[build=*]\n",
      "jinja2 -> markupsafe[version='>=0.23']\n",
      "\n",
      "Package ptyprocess conflicts for:\n",
      "ibm-wsrt-py37main-main -> ptyprocess==0.6.0[build=*]\n",
      "terminado -> ptyprocess\n",
      "pexpect -> ptyprocess[version='>=0.5']\n",
      "\n",
      "Package tqdm conflicts for:\n",
      "ibm-wsrt-py37main-main -> tqdm==4.47.0[build=*]\n",
      "nltk -> tqdm\n",
      "\n",
      "Package libpq conflicts for:\n",
      "psycopg2 -> libpq[version='>=10.3,<11.0a0|>=10.5,<11.0a0|>=10.6,<11.0a0|>=11.2,<12.0a0|>=11.3,<12.0a0|>=11.5,<12.0a0|>=12.1,<13.0a0|>=12.2,<13.0a0|>=12.3,<13.0a0|>=11.1,<12.0a0|>=9.6.6']\n",
      "ibm-wsrt-py37main-main -> libpq==12.2[build=*]\n",
      "qt -> libpq[version='>=12.3,<13.0a0']\n",
      "\n",
      "Package readline conflicts for:\n",
      "libpq -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "python=3.7 -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "ibm-wsrt-py37main-main -> readline==8.0[build=*]\n",
      "freetds -> readline[version='>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "sqlite -> readline[version='6.2.*|7.0|7.0.*|>=7.0,<8.0a0|>=8.0,<9.0a0']\n",
      "\n",
      "Package pickleshare conflicts for:\n",
      "ipython -> pickleshare\n",
      "ibm-wsrt-py37main-main -> pickleshare==0.7.5[build=*]\n",
      "\n",
      "Package pygments conflicts for:\n",
      "ibm-wsrt-py37main-main -> pygments==2.6.1[build=*]\n",
      "prompt-toolkit -> pygments\n",
      "ipython -> pygments\n",
      "nbconvert -> pygments[version='>=2.4.1']\n",
      "\n",
      "Package async-timeout conflicts for:\n",
      "aiohttp -> async-timeout[version='<4.0,>=3.0|>=3.0,<4.0|>=1.2,<3.0|>=1.2.0']\n",
      "ibm-wsrt-py37main-main -> async-timeout==3.0.1[build=*]\n",
      "\n",
      "Package fontconfig conflicts for:\n",
      "qt -> fontconfig[version='2.12.*|>=2.13.1,<3.0a0|>=2.13.0,<3.0a0|>=2.12.6,<3.0a0|>=2.12.4,<3.0a0']\n",
      "ibm-wsrt-py37main-main -> fontconfig==2.13.0[build=*]\n",
      "\n",
      "Package google-auth-oauthlib conflicts for:\n",
      "ibm-wsrt-py37main-main -> google-auth-oauthlib==0.4.1[build=*]\n",
      "tensorboard -> google-auth-oauthlib[version='0.4.1|>=0.4.1,<0.5']\n",
      "\n",
      "Package cffi conflicts for:\n",
      "pytorch -> cffi\n",
      "brotlipy -> cffi[version='>=1.0.0']\n",
      "ibm-wsrt-py37main-main -> cffi==1.14.0[build=*]\n",
      "cryptography -> cffi[version='!=1.11.3,>=1.8|>=1.8,!=1.11.3|>=1.7|>=1.8']\n",
      "\n",
      "Package rsa conflicts for:\n",
      "ibm-wsrt-py37main-main -> rsa==4.6[build=*]\n",
      "google-auth -> rsa[version='>=3.1.4,<4.1|>=3.1.4,<5|>=3.1.4,<4dev']\n",
      "\n",
      "Package zstd conflicts for:\n",
      "ibm-wsrt-py37main-main -> zstd==1.4.4[build=*]\n",
      "libtiff -> zstd[version='>=1.3.3,<1.3.4.0a0|>=1.4.0,<1.5.0.0a0|>=1.4.3,<1.5.0.0a0|>=1.4.4,<1.5.0.0a0|>=1.4.5,<1.5.0a0|>=1.4|>=1.4.4,<1.5.0a0|>=1.3.7,<1.3.8.0a0']\n",
      "blosc -> zstd[version='>=1.3.7,<1.3.8.0a0|>=1.4.4,<1.5.0a0|>=1.4.5,<1.4.6.0a0']\n",
      "\n",
      "Package backports.functools_lru_cache conflicts for:\n",
      "soupsieve -> backports.functools_lru_cache\n",
      "matplotlib-base -> backports.functools_lru_cache\n",
      "matplotlib -> backports.functools_lru_cache\n",
      "wcwidth -> backports.functools_lru_cache\n",
      "\n",
      "Package pyopenssl conflicts for:\n",
      "ibm-wsrt-py37main-main -> pyopenssl==19.1.0[build=*]\n",
      "urllib3 -> pyopenssl[version='>=0.14']\n",
      "\n",
      "Package ninja conflicts for:\n",
      "pytorch -> ninja\n",
      "ibm-wsrt-py37main-main -> ninja==1.9.0[build=*]\n",
      "\n",
      "Package aiohttp conflicts for:\n",
      "google-auth -> aiohttp[version='>=3.6.2,<4.0.0dev']\n",
      "ibm-wsrt-py37main-main -> aiohttp==3.6.2[build=*]\n",
      "\n",
      "Package oauthlib conflicts for:\n",
      "requests-oauthlib -> oauthlib[version='>=0.6.2|>=3.0.0|>=2.1.0,<3.0.0']\n",
      "ibm-wsrt-py37main-main -> oauthlib==3.1.0[build=*]\n",
      "\n",
      "Package libgfortran conflicts for:\n",
      "hdf5 -> libgfortran[version='>=3.0']\n",
      "scipy -> libgfortran[version='>=3.0']\n",
      "numpy -> libgfortran[version='>=3.0']\n",
      "\n",
      "Package nbconvert conflicts for:\n",
      "ibm-wsrt-py37main-main -> nbconvert==5.6.1[build=*]\n",
      "notebook -> nbconvert[version='<6.0']\n",
      "\n",
      "Package jupyter_server conflicts for:\n",
      "jupyterlab_server -> jupyter_server[version='>=1.1.0,<2.0.0']\n",
      "jupyterlab -> jupyter_server[version='>=1.1.0,<2.0.0']\n",
      "\n",
      "Package libglib conflicts for:\n",
      "dbus -> libglib[version='>=2.64.6,<3.0a0']\n",
      "qt -> libglib[version='>=2.66.4,<3.0a0']\n",
      "glib -> libglib[version='2.64.6|2.66.1|2.66.2|2.66.2|2.66.3|2.66.3|2.66.4',build='h0dae87d_0|h0dae87d_0|hbe7bbb4_0|h1f3bc88_1|h164308a_0|hdb14261_0|h164308a_1|hf9edacf_1|hdb14261_1|h748fe8e_1|h748fe8e_0|hf9edacf_0|hbe7bbb4_0|h0dae87d_1']\n",
      "gstreamer -> libglib[version='>=2.64.6,<3.0a0']\n",
      "gst-plugins-base -> libglib[version='>=2.64.6,<3.0a0']\n",
      "\n",
      "Package patsy conflicts for:\n",
      "seaborn -> patsy\n",
      "ibm-wsrt-py37main-main -> patsy==0.5.1[build=*]\n",
      "statsmodels -> patsy[version='>=0.4.0|>=0.5.1']\n",
      "\n",
      "Package gmpy2 conflicts for:\n",
      "mpmath -> gmpy2\n",
      "sympy -> gmpy2[version='>=2.0.8']\n",
      "\n",
      "Package defusedxml conflicts for:\n",
      "ibm-wsrt-py37main-main -> defusedxml==0.6.0[build=*]\n",
      "nbconvert -> defusedxml\n",
      "\n",
      "Package gast conflicts for:\n",
      "tensorflow-base -> gast[version='>=0.2.0|>=0.3.3,<0.3.4.0a0|>=0.2.2,<0.2.3.0a0']\n",
      "tensorflow-estimator -> gast[version='>=0.2.0']\n",
      "ibm-wsrt-py37main-main -> gast==0.2.2[build=*]\n",
      "\n",
      "Package pluggy conflicts for:\n",
      "pytest -> pluggy[version='>=0.12,<1.0|>=0.12,<1.0.0a1|>=0.9,!=0.10,<1.0|>=0.9|>=0.7|>=0.5,<0.7']\n",
      "ibm-wsrt-py37main-main -> pluggy==0.13.1[build=*]\n",
      "\n",
      "Package gstreamer conflicts for:\n",
      "gst-plugins-base -> gstreamer[version='1.8.*|>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.1,<2.0a0|>=1.14.4,<2.0a0|>=1.14.5,<2.0a0|>=1.18.1,<2.0a0|>=1.18.2,<2.0a0|>=1.14.0,<2.0a0|>=1.12.2,<1.13.0a0']\n",
      "qt -> gstreamer[version='>=1.12.4,<1.13.0a0|>=1.12.5,<1.13.0a0|>=1.14.4,<1.15.0a0|>=1.18.2,<1.19.0a0|>=1.14.0,<1.15.0a0']\n",
      "ibm-wsrt-py37main-main -> gstreamer==1.14.0[build=*]\n",
      "\n",
      "Package py conflicts for:\n",
      "ibm-wsrt-py37main-main -> py==1.8.2[build=*]\r\n",
      "pytest -> py[version='>=1.4.29|>=1.4.33|>=1.5.0|>=1.8.2']\r\n",
      "pyzmq -> py\r\n",
      "\r\n",
      "Package entrypoints conflicts for:\r\n",
      "ibm-wsrt-py37main-main -> entrypoints==0.3[build=*]\r\n",
      "nbconvert -> entrypoints[version='>=0.2.2']\r\n",
      "jupyter_client -> entrypoints\r\n",
      "keyring -> entrypoints\r\n",
      "\r\n",
      "Package pandocfilters conflicts for:\r\n",
      "ibm-wsrt-py37main-main -> pandocfilters==1.4.2[build=*]\r\n",
      "nbconvert -> pandocfilters[version='>=1.4.1']\r\n",
      "\r\n",
      "Package astor conflicts for:\r\n",
      "tensorflow-estimator -> astor[version='>=0.6.0']\r\n",
      "ibm-wsrt-py37main-main -> astor==0.8.0[build=*]\r\n",
      "tensorflow-base -> astor[version='>=0.6.0|>=0.6.2|>=0.6.2,<1.0a0']\r\n",
      "\r\n",
      "Package pyqt conflicts for:\r\n",
      "ibm-wsrt-py37main-main -> pyqt==5.9.2[build=*]\r\n",
      "matplotlib -> pyqt[version='4.11.*|>=5.12.3,<5.13.0a0|>=5.6.0,<5.7.0a0|>=5.9.2,<5.10.0a0|5.9.*|>=5.6,<6.0a0|5.*|5.6.*']\r\n",
      "\r\n",
      "Package ipywidgets conflicts for:\r\n",
      "arcgis=1.6.0 -> ipywidgets[version='>=7']\r\n",
      "ibm-wsrt-py37main-main -> ipywidgets==7.5.1[build=*]\r\n",
      "\r\n",
      "Package llvm-openmp conflicts for:\r\n",
      "blas -> llvm-openmp[version='>=10.0.0|>=11.0.0|>=9.0.1']\r\n",
      "mkl -> llvm-openmp[version='>=10.0.0|>=11.0.0|>=9.0.1']\r\n",
      "\r\n",
      "Package jeepney conflicts for:\r\n",
      "ibm-wsrt-py37main-main -> jeepney==0.4.0[build=*]\r\n",
      "secretstorage -> jeepney[version='>=0.6']\r\n",
      "keyring -> jeepney[version='>=0.4.2']\r\n",
      "\r\n",
      "Package mkl_fft conflicts for:\r\n",
      "numpy -> mkl_fft[version='>=1.0.4|>=1.0.6,<2.0a0']\r\n",
      "ibm-wsrt-py37main-main -> mkl_fft==1.1.0[build=*]\r\n",
      "\r\n",
      "Package qt conflicts for:\r\n",
      "ibm-wsrt-py37main-main -> qt==5.9.7[build=*]\r\n",
      "pyqt -> qt[version='4.8.*|5.6.*|5.9.*|>=5.12.5,<5.13.0a0|>=5.12.9,<5.13.0a0|>=5.9.7,<5.10.0a0|>=5.6.2,<5.7.0a0|>=4.8.6,<5.0|>=5.9.6,<5.10.0a0|>=5.9.4,<5.10.0a0|>=5.6.3,<5.7.0a0']\r\n",
      "\r\n",
      "Package liblapack conflicts for:\r\n",
      "scipy -> liblapack[version='>=3.8.0,<4.0.0a0|>=3.8.0,<4.0a0']\r\n",
      "numpy -> liblapack[version='>=3.8.0,<4.0.0a0|>=3.8.0,<4.0a0']\r\n",
      "blas -> liblapack[version='3.8.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0|3.9.0',build='0_openblas|2_openblas|*netlib|3_openblas|4_mkl|5_h6e990d7_netlib|5_openblas|5_mkl|6_openblas|6_mkl|6_h6e990d7_netlib|8_mkl|9_mkl|10_openblas|10_h86c2bf4_netlib|11_openblas|12_openblas|14_openblas|15_openblas|16_openblas|*netlib|20_mkl|21_mkl|19_mkl|18_mkl|17_openblas|16_mkl|15_mkl|14_mkl|13_mkl|13_openblas|12_mkl|11_h86c2bf4_netlib|11_mkl|10_mkl|9_openblas|8_h6e990d7_netlib|8_openblas|7_h6e990d7_netlib|7_mkl|7_openblas|4_h6e990d7_netlib|4_openblas|1_h6e990d7_netlib|0_h6e990d7_netlib']\r\n",
      "Note that strict channel priority may have removed packages required for satisfiability.\r\n",
      "\r\n"
     ]
    }
   ],
   "source": [
    "!conda install -c conda-forge pydotplus -y\n",
    "!conda install -c conda-forge python-graphviz -y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: pydotplus in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (2.0.2)\r\n",
      "Requirement already satisfied: pyparsing>=2.0.1 in /opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages (from pydotplus) (2.4.7)\r\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f0cd1ac80d0>"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 7200x14400 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from  io import StringIO\n",
    "!pip install pydotplus\n",
    "import pydotplus\n",
    "import matplotlib.image as mpimg\n",
    "from sklearn import tree\n",
    "%matplotlib inline\n",
    "\n",
    "dot_data = StringIO()\n",
    "filename = \"dec_tree.png\"\n",
    "featureNames = df.columns[0:9]\n",
    "targetNames = df[\"loan_status\"].unique().tolist()\n",
    "out=tree.export_graphviz(dec_Tree,feature_names=featureNames, out_file=dot_data, class_names= np.unique(y_train), filled=True,  special_characters=True,rotate=False)  \n",
    "graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  \n",
    "graph.write_png(filename)\n",
    "img = mpimg.imread(filename)\n",
    "plt.figure(figsize=(100, 200))\n",
    "plt.imshow(img,interpolation='nearest')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Support Vector Machine"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import svm\n",
    "clf = svm.SVC(kernel='rbf')\n",
    "clf.fit(X_train, y_train) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PAIDOFF', 'PAIDOFF', 'COLLECTION', 'PAIDOFF', 'PAIDOFF'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat = clf.predict(X_test)\n",
    "yhat [0:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "  COLLECTION       0.33      0.08      0.13        12\n",
      "     PAIDOFF       0.84      0.97      0.90        58\n",
      "\n",
      "    accuracy                           0.81        70\n",
      "   macro avg       0.58      0.52      0.51        70\n",
      "weighted avg       0.75      0.81      0.77        70\n",
      "\n",
      "Confusion matrix, without normalization\n",
      "[[ 1 11]\n",
      " [ 2 56]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf.fit(X_train, y_train)\n",
    "\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "import itertools\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    \n",
    "    # Compute confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_test, yhat)\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "print (classification_report(y_test, yhat))\n",
    "\n",
    "# Plot non-normalized confusion matrix\n",
    "plt.figure()\n",
    "plot_confusion_matrix(cnf_matrix, classes=df[\"loan_status\"].unique().tolist(),normalize= False,  title='Confusion matrix')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Logistic Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=0.01, solver='liblinear')"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import confusion_matrix\n",
    "LR = LogisticRegression(C=0.01, solver='liblinear').fit(X_train,y_train)\n",
    "LR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'COLLECTION', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF',\n",
       "       'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF', 'PAIDOFF'],\n",
       "      dtype=object)"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat1 = LR.predict(X_test)\n",
    "yhat1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.5 , 0.5 ],\n",
       "       [0.47, 0.53],\n",
       "       [0.47, 0.53],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.47, 0.53],\n",
       "       [0.27, 0.73],\n",
       "       [0.29, 0.71],\n",
       "       [0.45, 0.55],\n",
       "       [0.29, 0.71],\n",
       "       [0.41, 0.59],\n",
       "       [0.43, 0.57],\n",
       "       [0.27, 0.73],\n",
       "       [0.45, 0.55],\n",
       "       [0.42, 0.58],\n",
       "       [0.31, 0.69],\n",
       "       [0.31, 0.69],\n",
       "       [0.43, 0.57],\n",
       "       [0.44, 0.56],\n",
       "       [0.23, 0.77],\n",
       "       [0.49, 0.51],\n",
       "       [0.44, 0.56],\n",
       "       [0.46, 0.54],\n",
       "       [0.25, 0.75],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.49, 0.51],\n",
       "       [0.28, 0.72],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.46, 0.54],\n",
       "       [0.44, 0.56],\n",
       "       [0.44, 0.56],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.31, 0.69],\n",
       "       [0.31, 0.69],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.45, 0.55],\n",
       "       [0.47, 0.53],\n",
       "       [0.47, 0.53],\n",
       "       [0.25, 0.75],\n",
       "       [0.27, 0.73],\n",
       "       [0.31, 0.69],\n",
       "       [0.47, 0.53],\n",
       "       [0.46, 0.54],\n",
       "       [0.26, 0.74],\n",
       "       [0.42, 0.58],\n",
       "       [0.49, 0.51],\n",
       "       [0.32, 0.68],\n",
       "       [0.48, 0.52],\n",
       "       [0.43, 0.57],\n",
       "       [0.49, 0.51],\n",
       "       [0.31, 0.69],\n",
       "       [0.32, 0.68],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.27, 0.73],\n",
       "       [0.5 , 0.5 ],\n",
       "       [0.27, 0.73],\n",
       "       [0.43, 0.57],\n",
       "       [0.32, 0.68],\n",
       "       [0.48, 0.52],\n",
       "       [0.49, 0.51],\n",
       "       [0.22, 0.78],\n",
       "       [0.31, 0.69],\n",
       "       [0.42, 0.58],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.47, 0.53],\n",
       "       [0.49, 0.51],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.3 , 0.7 ],\n",
       "       [0.45, 0.55],\n",
       "       [0.49, 0.51],\n",
       "       [0.28, 0.72]])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yhat_prob = LR.predict_proba(X_test)\n",
    "yhat_prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=0.01, solver='liblinear')"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "LR.fit(X, y)\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Model Evaluation using Test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting package metadata (current_repodata.json): done\n",
      "Solving environment: | \n",
      "\n",
      "Updating scikit-learn is constricted by \n",
      "\n",
      "ibm-wsrt-py37main-main -> requires scikit-learn==0.23.1[build=*]\n",
      "\n",
      "If you are sure you want an update of your package either try `conda update --all` or install a specific version of the package you want using `conda install <pkg>=<version>`\n",
      "\n",
      "done\n",
      "\n",
      "## Package Plan ##\n",
      "\n",
      "  environment location: /opt/conda/envs/Python-3.7-main\n",
      "\n",
      "  added / updated specs:\n",
      "    - scikit-learn\n",
      "\n",
      "\n",
      "The following packages will be downloaded:\n",
      "\n",
      "    package                    |            build\n",
      "    ---------------------------|-----------------\n",
      "    gmpy2-2.0.8                |   py37h10f8cd9_2         150 KB\n",
      "    mpc-1.1.0                  |       h10f8cd9_1          90 KB\n",
      "    mpfr-4.0.2                 |       hb69a4c5_1         487 KB\n",
      "    psycopg2-2.8.5             |   py37h3c74f83_1         161 KB\n",
      "    sympy-1.6.2                |   py37h06a4308_1         8.6 MB\n",
      "    ------------------------------------------------------------\n",
      "                                           Total:         9.4 MB\n",
      "\n",
      "The following NEW packages will be INSTALLED:\n",
      "\n",
      "  gmpy2              pkgs/main/linux-64::gmpy2-2.0.8-py37h10f8cd9_2\n",
      "  mpc                pkgs/main/linux-64::mpc-1.1.0-h10f8cd9_1\n",
      "  mpfr               pkgs/main/linux-64::mpfr-4.0.2-hb69a4c5_1\n",
      "\n",
      "The following packages will be UPDATED:\n",
      "\n",
      "  psycopg2                             2.8.5-py37h1ba5d50_0 --> 2.8.5-py37h3c74f83_1\n",
      "  sympy                                        1.6.2-py37_0 --> 1.6.2-py37h06a4308_1\n",
      "\n",
      "\n",
      "\n",
      "Downloading and Extracting Packages\n",
      "mpc-1.1.0            | 90 KB     | ##################################### | 100% \n",
      "mpfr-4.0.2           | 487 KB    | ##################################### | 100% \n",
      "sympy-1.6.2          | 8.6 MB    | ##################################### | 100% \n",
      "gmpy2-2.0.8          | 150 KB    | ##################################### | 100% \n",
      "psycopg2-2.8.5       | 161 KB    | ##################################### | 100% \n",
      "Preparing transaction: done\n",
      "Verifying transaction: done\n",
      "Executing transaction: done\n"
     ]
    },
    {
     "ename": "ImportError",
     "evalue": "cannot import name 'jaccard_similarity_score' from 'sklearn.metrics' (/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/sklearn/metrics/__init__.py)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-86-33e82a19032b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mget_ipython\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msystem\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'conda upgrade scikit-learn'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mjaccard_similarity_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mf1_score\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlog_loss\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: cannot import name 'jaccard_similarity_score' from 'sklearn.metrics' (/opt/conda/envs/Python-3.7-main/lib/python3.7/site-packages/sklearn/metrics/__init__.py)"
     ]
    }
   ],
   "source": [
    "!conda upgrade scikit-learn\n",
    "from sklearn.metrics import jaccard_similarity_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import log_loss"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, download and load the test set:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--2020-12-25 16:45:37--  https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv\n",
      "Resolving s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)... 67.228.254.196\n",
      "Connecting to s3-api.us-geo.objectstorage.softlayer.net (s3-api.us-geo.objectstorage.softlayer.net)|67.228.254.196|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 3642 (3.6K) [text/csv]\n",
      "Saving to: ‘loan_test.csv’\n",
      "\n",
      "loan_test.csv       100%[===================>]   3.56K  --.-KB/s    in 0s      \n",
      "\n",
      "2020-12-25 16:45:38 (11.4 MB/s) - ‘loan_test.csv’ saved [3642/3642]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "!wget -O loan_test.csv https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/ML0101ENv3/labs/loan_test.csv"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "### Load Test set for evaluation "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>Unnamed: 0.1</th>\n",
       "      <th>loan_status</th>\n",
       "      <th>Principal</th>\n",
       "      <th>terms</th>\n",
       "      <th>effective_date</th>\n",
       "      <th>due_date</th>\n",
       "      <th>age</th>\n",
       "      <th>education</th>\n",
       "      <th>Gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/8/2016</td>\n",
       "      <td>10/7/2016</td>\n",
       "      <td>50</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>300</td>\n",
       "      <td>7</td>\n",
       "      <td>9/9/2016</td>\n",
       "      <td>9/15/2016</td>\n",
       "      <td>35</td>\n",
       "      <td>Master or Above</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>21</td>\n",
       "      <td>21</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/10/2016</td>\n",
       "      <td>10/9/2016</td>\n",
       "      <td>43</td>\n",
       "      <td>High School or Below</td>\n",
       "      <td>female</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>24</td>\n",
       "      <td>24</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>1000</td>\n",
       "      <td>30</td>\n",
       "      <td>9/10/2016</td>\n",
       "      <td>10/9/2016</td>\n",
       "      <td>26</td>\n",
       "      <td>college</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>35</td>\n",
       "      <td>35</td>\n",
       "      <td>PAIDOFF</td>\n",
       "      <td>800</td>\n",
       "      <td>15</td>\n",
       "      <td>9/11/2016</td>\n",
       "      <td>9/25/2016</td>\n",
       "      <td>29</td>\n",
       "      <td>Bechalor</td>\n",
       "      <td>male</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  Unnamed: 0.1 loan_status  Principal  terms effective_date  \\\n",
       "0           1             1     PAIDOFF       1000     30       9/8/2016   \n",
       "1           5             5     PAIDOFF        300      7       9/9/2016   \n",
       "2          21            21     PAIDOFF       1000     30      9/10/2016   \n",
       "3          24            24     PAIDOFF       1000     30      9/10/2016   \n",
       "4          35            35     PAIDOFF        800     15      9/11/2016   \n",
       "\n",
       "    due_date  age             education  Gender  \n",
       "0  10/7/2016   50              Bechalor  female  \n",
       "1  9/15/2016   35       Master or Above    male  \n",
       "2  10/9/2016   43  High School or Below  female  \n",
       "3  10/9/2016   26               college    male  \n",
       "4  9/25/2016   29              Bechalor    male  "
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_df = pd.read_csv('loan_test.csv')\n",
    "test_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Unnamed: 0         int64\n",
      "Unnamed: 0.1       int64\n",
      "loan_status       object\n",
      "Principal          int64\n",
      "terms              int64\n",
      "effective_date    object\n",
      "due_date          object\n",
      "age                int64\n",
      "education         object\n",
      "Gender            object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(test_df.dtypes)\n",
    "import numpy as np\n",
    "test_df['Gender'].replace(to_replace=['male','female'], value=[np.int64(0),np.int64(1)],inplace=True)\n",
    "\n",
    "test_df.groupby(['education'])['loan_status'].value_counts(normalize=True)\n",
    "Feature = test_df[['Principal','terms','age','Gender']]\n",
    "Feature = pd.concat([Feature,pd.get_dummies(test_df['education'])], axis=1)\n",
    "Feature.drop(['Master or Above'], axis = 1,inplace=True)\n",
    "Feature.head()\n",
    "X2 = Feature\n",
    "y2 = test_df['loan_status'].values\n",
    "X2= preprocessing.StandardScaler().fit(X2).transform(X2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "DecisionTrees's Accuracy:  0.7142857142857143\n"
     ]
    }
   ],
   "source": [
    "predTree = dec_Tree.predict(X_test)\n",
    "print(\"DecisionTrees's Accuracy: \", metrics.accuracy_score(y_test, predTree))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "  COLLECTION       0.33      0.08      0.13        12\n",
      "     PAIDOFF       0.84      0.97      0.90        58\n",
      "\n",
      "    accuracy                           0.81        70\n",
      "   macro avg       0.58      0.52      0.51        70\n",
      "weighted avg       0.75      0.81      0.77        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "cr = classification_report(y_test, yhat)\n",
    "print(cr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SVM ACCY:               precision    recall  f1-score   support\n",
      "\n",
      "  COLLECTION       0.33      0.08      0.13        12\n",
      "     PAIDOFF       0.84      0.97      0.90        58\n",
      "\n",
      "    accuracy                           0.81        70\n",
      "   macro avg       0.58      0.52      0.51        70\n",
      "weighted avg       0.75      0.81      0.77        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "classification_report(y_test,yhat)\n",
    "print('SVM ACCY:', classification_report(y_test, yhat))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logit               precision    recall  f1-score   support\n",
      "\n",
      "  COLLECTION       1.00      0.08      0.15        12\n",
      "     PAIDOFF       0.84      1.00      0.91        58\n",
      "\n",
      "    accuracy                           0.84        70\n",
      "   macro avg       0.92      0.54      0.53        70\n",
      "weighted avg       0.87      0.84      0.78        70\n",
      "\n"
     ]
    }
   ],
   "source": [
    "classification_report(y_test, yhat1)\n",
    "print('Logit', classification_report(y_test, yhat1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Report\n",
    "You should be able to report the accuracy of the built model using different evaluation metrics:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "| Algorithm          | Jaccard | F1-score | LogLoss |\n",
    "|--------------------|---------|----------|---------|\n",
    "| KNN                | ?       | ?        | NA      |\n",
    "| Decision Tree      | ?       | ?        | NA      |\n",
    "| SVM                | ?       | ?        | NA      |\n",
    "| LogisticRegression | ?       | ?        | ?       |"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "button": false,
    "new_sheet": false,
    "run_control": {
     "read_only": false
    }
   },
   "source": [
    "<h2>Want to learn more?</h2>\n",
    "\n",
    "IBM SPSS Modeler is a comprehensive analytics platform that has many machine learning algorithms. It has been designed to bring predictive intelligence to decisions made by individuals, by groups, by systems – by your enterprise as a whole. A free trial is available through this course, available here: <a href=\"http://cocl.us/ML0101EN-SPSSModeler\">SPSS Modeler</a>\n",
    "\n",
    "Also, you can use Watson Studio to run these notebooks faster with bigger datasets. Watson Studio is IBM's leading cloud solution for data scientists, built by data scientists. With Jupyter notebooks, RStudio, Apache Spark and popular libraries pre-packaged in the cloud, Watson Studio enables data scientists to collaborate on their projects without having to install anything. Join the fast-growing community of Watson Studio users today with a free account at <a href=\"https://cocl.us/ML0101EN_DSX\">Watson Studio</a>\n",
    "\n",
    "<h3>Thanks for completing this lesson!</h3>\n",
    "\n",
    "<h4>Author:  <a href=\"https://ca.linkedin.com/in/saeedaghabozorgi\">Saeed Aghabozorgi</a></h4>\n",
    "<p><a href=\"https://ca.linkedin.com/in/saeedaghabozorgi\">Saeed Aghabozorgi</a>, PhD is a Data Scientist in IBM with a track record of developing enterprise level applications that substantially increases clients’ ability to turn data into actionable knowledge. He is a researcher in data mining field and expert in developing advanced analytic methods like machine learning and statistical modelling on large datasets.</p>\n",
    "\n",
    "<hr>\n",
    "\n",
    "<p>Copyright &copy; 2018 <a href=\"https://cocl.us/DX0108EN_CC\">Cognitive Class</a>. This notebook and its source code are released under the terms of the <a href=\"https://bigdatauniversity.com/mit-license/\">MIT License</a>.</p>"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3.7",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
